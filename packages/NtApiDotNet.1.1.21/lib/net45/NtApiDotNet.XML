<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NtApiDotNet</name>
    </assembly>
    <members>
        <member name="T:NtApiDotNet.AccessMask">
            <summary>
            Structure for an NT access mask.
            </summary>
        </member>
        <member name="F:NtApiDotNet.AccessMask.Access">
            <summary>
            The access mask's access bits.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="access">Access bits to use</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.Int32)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from Int32.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.UInt32)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from UInt32.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.Enum)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from enumerations.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToGenericAccess">
            <summary>
            Convert access mask to a generic access object.
            </summary>
            <returns>The generic access mask</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToMandatoryLabelPolicy">
            <summary>
            Convert access mask to a mandatory label policy
            </summary>
            <returns>The mandatory label policy</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToSpecificAccess``1">
            <summary>
            Convert to a specific access right.
            </summary>
            <typeparam name="A">The specific access right.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToSpecificAccess(System.Type)">
            <summary>
            Convert to a specific access right.
            </summary>
            <param name="enum_type">The type of enumeration to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:NtApiDotNet.AccessMask.IsEmpty">
            <summary>
            Get whether this access mask is empty (i.e. it's 0)
            </summary>
        </member>
        <member name="P:NtApiDotNet.AccessMask.HasAccess">
            <summary>
            Get whether this access mask has not access rights, i.e. not empty.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.IsAccessGranted(NtApiDotNet.AccessMask)">
            <summary>
            Get whether the current access mask is granted specific permissions.
            </summary>
            <param name="mask">The access mask to check</param>
            <returns>True one or more access granted.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.IsAllAccessGranted(NtApiDotNet.AccessMask)">
            <summary>
            Get whether the current access mask is granted all specific permissions.
            </summary>
            <param name="mask">The access mask to check</param>
            <returns>True access all is granted.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseAnd(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Bitwise AND operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseOr(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Bitwise OR operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseAnd(NtApiDotNet.AccessMask,System.UInt32)">
            <summary>
            Bitwise AND operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseOr(NtApiDotNet.AccessMask,System.UInt32)">
            <summary>
            Bitwise OR operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Equality(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Equality operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Inequality(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Inequality operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_OnesComplement(NtApiDotNet.AccessMask)">
            <summary>
            Bitwise NOT operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.GetHashCode">
            <summary>
            Overridden GetHashCode.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.Equals(System.Object)">
            <summary>
            Overridden Equals.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="P:NtApiDotNet.AccessMask.Empty">
            <summary>
            Get an empty access mask.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToString(System.String)">
            <summary>
            ToString method.
            </summary>
            <param name="format">Format code for the access mask.</param>
            <returns>The formatting string.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToString(System.String,System.IFormatProvider)">
            <summary>
            ToString method.
            </summary>
            <param name="format">Format code for the access mask.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The formatting string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ace">
            <summary>
            Class to represent an Access Control Entry (ACE)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsObjectAce">
            <summary>
            Check if the ACE is an Object ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsCallbackAce">
            <summary>
            Check if the ACE is a callback ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsConditionalAce">
            <summary>
            Check if ACE is a conditional ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsAuditAce">
            <summary>
            Check if ACE is an audit ACE.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.AceType">
            <summary>
            Get ACE type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.AceFlags">
            <summary>
            Get ACE flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Type">
            <summary>
            Get ACE type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Flags">
            <summary>
            Get ACE flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Mask">
            <summary>
            Get ACE access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Sid">
            <summary>
            Get ACE Security Identifier
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.ObjectType">
            <summary>
            Get optional Object Type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.InheritedObjectType">
            <summary>
            Get optional Inherited Object Type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.ApplicationData">
            <summary>
            Optional application data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Condition">
            <summary>
            Get conditional check if a conditional ace.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ace.ToString">
            <summary>
            Convert ACE to a string
            </summary>
            <returns>The ACE as a string</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.ToString(System.Type,System.Boolean)">
            <summary>
            Convert ACE to a string
            </summary>
            <param name="access_rights_type">An enumeration type to format the access mask</param>
            <param name="resolve_sid">True to try and resolve SID to a name</param>
            <returns>The ACE as a string</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.Equals(System.Object)">
            <summary>
            Compare ACE to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object equals this ACE</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.op_Equality(NtApiDotNet.Ace,NtApiDotNet.Ace)">
            <summary>
            Equality operator
            </summary>
            <param name="a">Left ACE</param>
            <param name="b">Right ACE</param>
            <returns>True if the ACEs are equal</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.op_Inequality(NtApiDotNet.Ace,NtApiDotNet.Ace)">
            <summary>
            Not Equal operator
            </summary>
            <param name="a">Left ACE</param>
            <param name="b">Right ACE</param>
            <returns>True if the ACEs are not equal</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.#ctor(NtApiDotNet.AceType,NtApiDotNet.AceFlags,NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Constructor
            </summary>
            <param name="type">ACE type</param>
            <param name="flags">ACE flags</param>
            <param name="mask">ACE access mask</param>
            <param name="sid">ACE sid</param>
        </member>
        <member name="T:NtApiDotNet.Acl">
            <summary>
            Class to represent an Access Control List (ACL)
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="acl">Pointer to a raw ACL in memory</param>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="acl">Buffer containing an ACL in memory</param>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Boolean)">
            <summary>
            Constructor for a NULL ACL
            </summary>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor">
            <summary>
            Constructor for an empty ACL
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.Ace},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="aces">List of ACEs to add to ACL</param>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.Ace})">
            <summary>
            Constructor
            </summary>
            <param name="aces">List of ACEs to add to ACL</param>
        </member>
        <member name="P:NtApiDotNet.Acl.Defaulted">
            <summary>
            Get or set whether the ACL was defaulted
            </summary>
        </member>
        <member name="P:NtApiDotNet.Acl.NullAcl">
            <summary>
            Get or set whether the ACL is NULL (no security)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Acl.Revision">
            <summary>
            Get or set the ACL revision
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.ToByteArray">
            <summary>
            Convert the ACL to a byte array
            </summary>
            <returns>The ACL as a byte array</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.ToSafeBuffer">
            <summary>
            Convert the ACL to a safe buffer
            </summary>
            <returns>The safe buffer</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.IsCanonical">
            <summary>
            Gets an indication if this ACL is canonical.
            </summary>
            <remarks>Canonical basically means that deny ACEs are before allow ACEs.</remarks>
            <returns>True if the ACL is canonical.</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.Canonicalize">
            <summary>
            Canonicalize the ACL (for use on DACLs only).
            </summary>
            <remarks>This isn't a general purpose algorithm, for example it doesn't worry much about object ordering.
            Also it can be lossy, if it doesn't understand an ACE type it will drop it.</remarks>
            <returns>The canonical ACL.</returns>
        </member>
        <member name="P:NtApiDotNet.Acl.HasConditionalAce">
            <summary>
            Indicates the ACL has at least one conditional ACE.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeAlpcPortMessageBuffer">
            <summary>
            Safe buffer to contain an ALPC port message.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcPortMessageBuffer.#ctor(NtApiDotNet.AlpcPortMessage,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="header">The port message header.</param>
            <param name="allocated_data_length">The total length of allocated memory excluding the header.</param>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcPortMessageBuffer.#ctor(System.Int32)">
            <summary>
            Constructor. Creates a receive buffer with a set length.
            </summary>
            <param name="allocated_data_length">The total length of allocated memory excluding the header.</param>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcPortMessageBuffer.Null">
            <summary>
            Get a NULL safe buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcPortMessageBuffer.Detach">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="T:NtApiDotNet.AlpcMessage">
            <summary>
            Base class to represent an ALPC message.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.#ctor(NtApiDotNet.AlpcPortMessage)">
            <summary>
            Constructor.
            </summary>
            <param name="header">The port message header.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.UpdateHeaderLength(System.Int32,System.Int32)">
            <summary>
            Update the header length fields.
            </summary>
            <param name="data_length">The length of the valid data.</param>
            <param name="allocated_data_length">The maximum data length supported by the packet.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.OnToSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer)">
            <summary>
            Method to handle when ToSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer being created.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.OnFromSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer,NtApiDotNet.NtAlpc)">
            <summary>
            Method to handle when FromSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer to initialize from..</param>
            <param name="port">The ALPC port associated with this message.</param>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.Header">
            <summary>
            Get or set the header.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.ProcessId">
            <summary>
            The process ID of the sender.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.ThreadId">
            <summary>
            The thread ID of the sender.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.TotalLength">
            <summary>
            Get total length of the message.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.AllocatedDataLength">
            <summary>
            Get the allocated data length for the message.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.DataLength">
            <summary>
            Get data length of the message.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.MessageId">
            <summary>
            Get the message ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.CallbackId">
            <summary>
            Get the callback ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.MessageType">
            <summary>
            Get the message type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.MessageTypeFlags">
            <summary>
            Get additional flags on message type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.ContinuationRequired">
            <summary>
            Indicates that the message requires a reply (otherwise things can leak).
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.RequiresReply">
            <summary>
            Indicates that the message requires a reply (obsolete).
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.DirectStatus">
            <summary>
            Get direct status for the message.
            </summary>
            <returns>The direct status for the message. Returns STATUS_PENDING if the message is yet to be processed.</returns>
        </member>
        <member name="P:NtApiDotNet.AlpcMessage.MaximumDataLength">
            <summary>
            Get the maximum size of a message minus the header size.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.ToSafeBuffer">
            <summary>
            Create a safe buffer for this message.
            </summary>
            <returns>The safe buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.QueryInformation(NtApiDotNet.NtAlpc,NtApiDotNet.AlpcMessageInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for a message.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="port">The port which has processed the message.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.Query``1(NtApiDotNet.NtAlpc,NtApiDotNet.AlpcMessageInformationClass,``0,System.Boolean)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="port">The port which has processed the message.</param>
            <param name="default_value">A default value for the query.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.Query``1(NtApiDotNet.NtAlpc,NtApiDotNet.AlpcMessageInformationClass,``0)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="port">The port which has processed the message.</param>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.AlpcMessage.Query``1(NtApiDotNet.NtAlpc,NtApiDotNet.AlpcMessageInformationClass)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="port">The port which has processed the message.</param>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="T:NtApiDotNet.AlpcMessageRaw">
            <summary>
            An ALPC message which holds a raw set of bytes.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data to initialize the message with.</param>
            <param name="allocated_data_length">Maximum length of the message buffer.</param>
            <param name="encoding">Specify a text encoding for the DataString property.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data to initialize the message with.</param>
            <param name="allocated_data_length">Maximum length of the message buffer.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data to initialize the message with.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data to initialize the message with.</param>
            <param name="encoding">Specify a text encoding for the DataString property.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="allocated_data_length">Total allocated length of the message buffer.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
            <param name="allocated_data_length">Total allocated length of the message buffer.</param>
            <param name="encoding">Specify a text encoding for the DataString property.</param>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageRaw.Data">
            <summary>
            Get or set the message data.
            </summary>
            <remarks>When you set the data it'll update the DataLength and TotalLength fields.</remarks>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageRaw.DataString">
            <summary>
            Get or set the message data as an encoding string.
            </summary>
            <remarks>When you set the data it'll update the DataLength and TotalLength fields.</remarks>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageRaw.Encoding">
            <summary>
            Get or set the text encoding in this raw message.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.OnFromSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer,NtApiDotNet.NtAlpc)">
            <summary>
            Method to handle when FromSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer to initialize from..</param>
            <param name="port">The ALPC port associated with this message.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageRaw.OnToSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer)">
            <summary>
            Method to handle when ToSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer being created.</param>
        </member>
        <member name="T:NtApiDotNet.AlpcMessageType`1">
            <summary>
            An ALPC message which holds a specific type with optional trailing data.
            </summary>
            <typeparam name="T">The type representing the data.</typeparam>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.#ctor">
            <summary>
            Constructor for a receive buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.#ctor(System.Int32)">
            <summary>
            Constructor for a receive buffer.
            </summary>
            <param name="total_length">Length of message. This will be rounded up to at least accomodate the header.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.#ctor(`0,System.Byte[])">
            <summary>
            Constructor for a send/receive buffer.
            </summary>
            <param name="value">The initial value to set.</param>
            <param name="trailing">Trailing data.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.#ctor(`0)">
            <summary>
            Constructor for a send/receive buffer.
            </summary>
            <param name="value">The initial value to set.</param>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageType`1.Value">
            <summary>
            Get or set the type in the buffer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageType`1.Trailing">
            <summary>
            Get or set any trailing data after the value.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.OnFromSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer,NtApiDotNet.NtAlpc)">
            <summary>
            Method to handle when FromSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer to initialize from..</param>
            <param name="port">The ALPC port associated with this message.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageType`1.OnToSafeBuffer(NtApiDotNet.SafeAlpcPortMessageBuffer)">
            <summary>
            Method to handle when ToSafeBuffer is called.
            </summary>
            <param name="buffer">The message buffer being created.</param>
        </member>
        <member name="T:NtApiDotNet.AlpcSendMessageAttributes">
            <summary>
            Class to represent a set of sending attributes.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.AlpcMessageAttribute})">
            <summary>
            Constructor.
            </summary>
            <param name="attributes">List of attributes to send.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.Add(NtApiDotNet.AlpcMessageAttribute)">
            <summary>
            Add an attribute object.
            </summary>
            <param name="attribute">The attribute to add.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.Remove(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Remove an attribute object.
            </summary>
            <param name="flag">The attribute flag to remove.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.Remove(NtApiDotNet.AlpcMessageAttribute)">
            <summary>
            Remove an attribute object.
            </summary>
            <param name="attribute">The attribute to remove.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.AddHandles(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject})">
            <summary>
            Add a list of handles to the send attributes.
            </summary>
            <param name="objects">The list of objects.</param>
            <remarks>This method doesn't maintain a reference to the objects. You need to keep them alive elsewhere.</remarks>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.AddHandles(System.Collections.Generic.IEnumerable{NtApiDotNet.AlpcHandleMessageAttributeEntry})">
            <summary>
            Add a list of handles to the send attributes.
            </summary>
            <param name="handles">The list of handles.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.AddHandle(NtApiDotNet.NtObject)">
            <summary>
            Add a list of handles to the send attributes.
            </summary>
            <param name="handle">The handle to add.</param>
            <remarks>This method doesn't maintain a reference to the objects. You need to keep them alive elsewhere.</remarks>
        </member>
        <member name="M:NtApiDotNet.AlpcSendMessageAttributes.AddHandle(NtApiDotNet.AlpcHandleMessageAttributeEntry)">
            <summary>
            Add a list of handles to the send attributes.
            </summary>
            <param name="handle">The handle to add.</param>
        </member>
        <member name="P:NtApiDotNet.AlpcSendMessageAttributes.AllocatedAttributes">
            <summary>
            Get the allocated attributes.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcReceiveMessageAttributes">
            <summary>
            Class to represent a set of received attributes.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.#ctor">
            <summary>
            Constructor. Allocated space for all known attributes.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.#ctor(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.AllocatedAttributes">
            <summary>
            Get the allocated attributes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.ValidAttributes">
            <summary>
            Get the list of valid attributes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.Attributes">
            <summary>
            Get a list of the valid attributes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.Handles">
            <summary>
            Get list of passed handles.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.DataView">
            <summary>
            Get the mapped data view. If no view sent this property is invalid.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcReceiveMessageAttributes.SecurityContext">
            <summary>
            Get the security context. If no security context this property is invalid.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.Dispose">
            <summary>
            Dispose method.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.GetAttribute``1">
            <summary>
            Get a typed attribute.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <returns>The attribute. Returns a default initialized object if not valid.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.GetAttribute(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Get an attribute.
            </summary>
            <param name="flag">The attribute flag to get.</param>
            <returns>The attribute. Returns null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.ToSendAttributes">
            <summary>
            Convert this set of attributes to a buffer to send.
            </summary>
            <returns>The send attributes.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.ToContinuationAttributes(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Convert this set of attributes to one which can be used to free on continuation required.
            </summary>
            <param name="attributes">The attributes to </param>
            <returns>The send attributes.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcReceiveMessageAttributes.HasValidAttribute(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Checks if an attribute flag is valid.
            </summary>
            <param name="attribute">The attribute to test.</param>
            <returns>True if the attribute is value.</returns>
        </member>
        <member name="T:NtApiDotNet.AlpcMessageAttribute">
            <summary>
            Base class to represent a message attribute.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcMessageAttribute.AttributeFlag">
            <summary>
            The flag for this attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcMessageAttribute.#ctor(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="attribute_flag">The single attribute flag which this represents.</param>
        </member>
        <member name="T:NtApiDotNet.AlpcSecurityMessageAttribute">
            <summary>
            Class representing a security message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcSecurityMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcSecurityMessageAttribute.Flags">
            <summary>
            Security attribute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcSecurityMessageAttribute.SecurityQoS">
            <summary>
            Security quality of service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcSecurityMessageAttribute.ContextHandle">
            <summary>
            Context handle.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcSecurityMessageAttribute.CreateHandleAttribute(NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Create an attribute which with create a handle automatically.
            </summary>
            <param name="security_quality_of_service">The security quality of service.</param>
            <returns>The security message attribute.</returns>
        </member>
        <member name="T:NtApiDotNet.AlpcTokenMessageAttribute">
            <summary>
            Class representing a security message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcTokenMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcTokenMessageAttribute.TokenId">
            <summary>
            Token ID of token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcTokenMessageAttribute.AuthenticationId">
            <summary>
            Authentication ID of token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcTokenMessageAttribute.ModifiedId">
            <summary>
            Modified ID of token
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcContextMessageAttribute">
            <summary>
            Class representing a security message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcContextMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcContextMessageAttribute.PortContext">
            <summary>
            Port context.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcContextMessageAttribute.MessageContext">
            <summary>
            Message context.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcContextMessageAttribute.Sequence">
            <summary>
            Sequence number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcContextMessageAttribute.MessageId">
            <summary>
            Message ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcContextMessageAttribute.CallbackId">
            <summary>
            Callback ID.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcDataViewMessageAttribute">
            <summary>
            Class representing a data view message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcDataViewMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcDataViewMessageAttribute.Flags">
            <summary>
            View flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcDataViewMessageAttribute.SectionHandle">
            <summary>
            Handle to section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcDataViewMessageAttribute.ViewBase">
            <summary>
            View base.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcDataViewMessageAttribute.ViewSize">
            <summary>
            View size.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcHandleMessageAttributeEntry">
            <summary>
            Handle attribute entry.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcHandleMessageAttributeEntry.Flags">
            <summary>
            Handle flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcHandleMessageAttributeEntry.Handle">
            <summary>
            The NT object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcHandleMessageAttributeEntry.ObjectType">
            <summary>
            The object type for the handle.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcHandleMessageAttributeEntry.DesiredAccess">
            <summary>
            Desired access for the handle.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttributeEntry.#ctor(NtApiDotNet.AlpcHandleAttr)">
            <summary>
            Constructor.
            </summary>
            <param name="attr">Handle attribute to initialize from.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttributeEntry.#ctor(NtApiDotNet.AlpcHandleAttr32)">
            <summary>
            Constructor.
            </summary>
            <param name="attr">Handle attribute to initialize from.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttributeEntry.#ctor(NtApiDotNet.AlpcMessageHandleInformation)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Information structure to initialize from.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttributeEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttributeEntry.#ctor(NtApiDotNet.NtObject)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">The object to construct the entry from. Will take a copy of the handle.</param>
        </member>
        <member name="T:NtApiDotNet.AlpcHandleMessageAttribute">
            <summary>
            Class representing a handle message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttribute.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.AlpcHandleMessageAttributeEntry})">
            <summary>
            Constructor.
            </summary>
            <param name="handles">List of handle entries.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttribute.#ctor(NtApiDotNet.AlpcHandleMessageAttributeEntry)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">The handle entry.</param>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttribute.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject})">
            <summary>
            Constructor.
            </summary>
            <param name="objs">List of objects to create the handle entries.</param>
            <remarks>This constructor takes copies of the objects.</remarks>
        </member>
        <member name="M:NtApiDotNet.AlpcHandleMessageAttribute.#ctor(NtApiDotNet.NtObject)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">A single object to send.</param>
            <remarks>This constructor takes copies of the object.</remarks>
        </member>
        <member name="P:NtApiDotNet.AlpcHandleMessageAttribute.Handles">
            <summary>
            List of handles in this attribute.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcDirectMessageAttribute">
            <summary>
            Class representing a direct message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcDirectMessageAttribute.#ctor(NtApiDotNet.NtEvent)">
            <summary>
            Constructor.
            </summary>
            <param name="event_object">The event object.</param>
        </member>
        <member name="P:NtApiDotNet.AlpcDirectMessageAttribute.Event">
            <summary>
            The event object.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcWorkOnBehalfMessageAttribute">
            <summary>
            Class representing a work on behalf of message attribute.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcWorkOnBehalfMessageAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcWorkOnBehalfMessageAttribute.ThreadId">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcWorkOnBehalfMessageAttribute.ThreadCreationTimeLow">
            <summary>
            Thread creation time (low).
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeAlpcMessageAttributesBuffer">
            <summary>
            Safe buffer to store an allocated set of ALPC atributes.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcMessageAttributesBuffer.GetAttributePointer(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Get a pointer to an allocated attribute. Returns NULL if not available.
            </summary>
            <param name="attribute">The attribute to get.</param>
            <returns>The pointer to the attribute buffer, IntPtr.Zero if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcMessageAttributesBuffer.GetAttribute``1(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Get an attribute as a structured type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="attribute">The attribute.</param>
            <returns>A buffer which represents the structured type.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if attribute doesn't exist.</exception>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcMessageAttributesBuffer.Create(NtApiDotNet.AlpcMessageAttributeFlags)">
            <summary>
            Create a new buffer with allocations for a specified set of attributes.
            </summary>
            <param name="flags">The attributes to allocate.</param>
            <returns>The allocated buffed.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcMessageAttributesBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose the safe buffer.
            </summary>
            <param name="disposing">True if disposing</param>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcMessageAttributesBuffer.Detach">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcMessageAttributesBuffer.Null">
            <summary>
            Get the NULL buffer.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcPortSection">
            <summary>
            Class to represent an ALPC port section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcPortSection.Handle">
            <summary>
            Handle to the port section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcPortSection.Size">
            <summary>
            Size of the port section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.AlpcPortSection.ActualSectionSize">
             <summary>
            The actual section size.
             </summary>
        </member>
        <member name="M:NtApiDotNet.AlpcPortSection.CreateSectionView(NtApiDotNet.AlpcDataViewAttrFlags,System.Int64,System.Boolean)">
            <summary>
            Create a new section view attribute.
            </summary>
            <param name="flags">Specify the flags for the data view attribute.</param>
            <param name="view_size">The section view size.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The section view attribute.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcPortSection.CreateSectionView(System.Boolean)">
            <summary>
            Create a new section view attribute.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The section view attribute.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcPortSection.CreateSectionView(NtApiDotNet.AlpcDataViewAttrFlags,System.Int64)">
            <summary>
            Create a new section view attribute.
            </summary>
            <param name="flags">Specify the flags for the data view attribute.</param>
            <param name="view_size">The section view size.</param>
            <returns>The section view attribute.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcPortSection.CreateSectionView">
            <summary>
            Create a new section view attribute.
            </summary>
            <returns>The section view attribute.</returns>
        </member>
        <member name="M:NtApiDotNet.AlpcPortSection.Dispose">
            <summary>
            Dispose of the port section.
            </summary>
        </member>
        <member name="T:NtApiDotNet.BoundaryDescriptorFlags">
            <summary>
            Flags for a boundary descriptor
            </summary>
        </member>
        <member name="F:NtApiDotNet.BoundaryDescriptorFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.BoundaryDescriptorFlags.AddPackageSid">
            <summary>
            Automatically add the AppContainer package SID to the boundary
            </summary>
        </member>
        <member name="T:NtApiDotNet.BoundaryDescriptor">
            <summary>
            Class which represents a private namespace boundary descriptor
            </summary>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.#ctor(System.String,NtApiDotNet.BoundaryDescriptorFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the boundary</param>
            <param name="flags">Additional flags for the boundary</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the boundary</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSid(NtApiDotNet.Sid)">
            <summary>
            Add a SID to the boundary descriptor.
            </summary>
            <remarks>This SID is used in an access check when creating or deleting private namespaces.</remarks>
            <param name="sid">The SID to add.</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddIntegrityLevel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Add an integrity level to the boundary descriptor.
            </summary>
            <remarks>This integrity level is used in an access check when creating or deleting private namespaces.</remarks>
            <param name="integrity_level">The integrity level to add.</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSids(System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Add a list of SIDs to the boundary descriptor. 
            </summary>
            <param name="sids">The SIDs to add. This can include normal and integrity level SIDs</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSids(NtApiDotNet.Sid,NtApiDotNet.Sid[])">
            <summary>
            Add a list of SIDs to the boundary descriptor. 
            </summary>
            <param name="sid">The first SID to add</param>
            <param name="sids">Additional SIDs</param>
        </member>
        <member name="P:NtApiDotNet.BoundaryDescriptor.Handle">
            <summary>
            The handle to the boundary descriptor. 
            </summary>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.CreateFromString(System.String)">
            <summary>
            Create a boundary descriptor from a string representation.
            </summary>
            <param name="descriptor">A boundary descriptor string of the form [SID[:SID...]@]NAME where SID is an SDDL format SID.</param>
            <returns>The new boundary descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.BufferUtils">
            <summary>
            Some simple utilities to create structure buffers.
            </summary>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.CreateBuffer``1(``0,System.Int32,System.Boolean)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <param name="additional_size">Additional byte data after the structure.</param>
            <param name="add_struct_size">Indicates if additional_size includes the structure size or not.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.CreateBuffer``1(``0)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer``1(``0)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer``1(``0,System.Int32,System.Boolean)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <param name="additional_size">Additional byte data after the structure.</param>
            <param name="add_struct_size">Indicates if additional_size includes the structure size or not.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer(System.Byte[])">
            <summary>
            Create a buffer based on a byte array.
            </summary>
            <param name="value">The byte array for the buffer.</param>
            <returns>The safe buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer``1(``0[])">
            <summary>
            Create an buffer from an array.
            </summary>
            <typeparam name="T">The array element type, must be a value type.</typeparam>
            <param name="value">The array of elements.</param>
            <returns>The allocated array buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ReadNulTerminatedUnicodeString(System.Runtime.InteropServices.SafeBuffer,System.UInt64)">
            <summary>
            Read a NUL terminated string for the byte offset.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="byte_offset">The byte offset to read from.</param>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ReadUnicodeString(System.Runtime.InteropServices.SafeBuffer,System.UInt64,System.Int32)">
            <summary>
            Read a Unicode string string with length.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="count">The number of characters to read.</param>
            <param name="byte_offset">The byte offset to read from.</param>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.WriteUnicodeString(System.Runtime.InteropServices.SafeBuffer,System.UInt64,System.String)">
            <summary>
            Write unicode string.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="byte_offset">The byte offset to write to.</param>
            <param name="value">The string value to write.</param>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ReadBytes(System.Runtime.InteropServices.SafeBuffer,System.UInt64,System.Int32)">
            <summary>
            Read bytes from buffer.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="byte_offset">The byte offset to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.WriteBytes(System.Runtime.InteropServices.SafeBuffer,System.UInt64,System.Byte[])">
            <summary>
            Write bytes to a buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="byte_offset">The byte offset to write to.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.GetStructAtOffset``1(System.Runtime.InteropServices.SafeBuffer,System.Int32)">
            <summary>
            Get a structure buffer at a specific offset.
            </summary>
            <typeparam name="T">The type of structure.</typeparam>
            <param name="buffer">The buffer to map.</param>
            <param name="offset">The offset into the buffer.</param>
            <returns>The structure buffer.</returns>
            <remarks>The returned buffer is not owned, therefore you need to maintain the original buffer while operating on this buffer.</remarks>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.CreateBufferView(System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Int32)">
            <summary>
            Creates a view of an existing safe buffer.
            </summary>
            <param name="buffer">The buffer to create a view on.</param>
            <param name="offset">The offset from the start of the buffer.</param>
            <param name="length">The length of the view.</param>
            <returns>The buffer view.</returns>
            <remarks>Note that the returned buffer doesn't own the memory, therefore the original buffer
            must be maintained for the lifetime of this buffer.</remarks>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ZeroBuffer(System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Zero an entire buffer.
            </summary>
            <param name="buffer">The buffer to zero.</param>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.FillBuffer(System.Runtime.InteropServices.SafeBuffer,System.Byte)">
            <summary>
            Fill an entire buffer with a specific byte value.
            </summary>
            <param name="buffer">The buffer to full.</param>
            <param name="fill">The fill value.</param>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.EqualBuffer(System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Int32)">
            <summary>
            Compare two buffers for equality.
            </summary>
            <param name="left">The left buffer.</param>
            <param name="left_offset">The offset into the left buffer.</param>
            <param name="right">The right buffer.</param>
            <param name="right_offset">The offset into the right buffer.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the buffers are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.EqualBuffer(System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Byte[])">
            <summary>
            Compare a buffer and a byte array for equality.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset into the left buffer.</param>
            <param name="compare">The compare byte array.</param>
            <returns>True if the buffers are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.FindBuffer(System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Byte[])">
            <summary>
            Find a byte array in a buffer. Returns all instances of the compare array.
            </summary>
            <param name="buffer">The buffer to find the data in.</param>
            <param name="start_offset">Start offset in the buffer.</param>
            <param name="compare">The comparison byte array.</param>
            <returns>A list of offsets into the buffer where the compare was found.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.FindBuffer(System.Runtime.InteropServices.SafeBuffer,System.Byte[])">
            <summary>
            Find a byte array in a buffer. Returns all instances of the compare array.
            </summary>
            <param name="buffer">The buffer to find the data in.</param>
            <param name="compare">The comparison byte array.</param>
            <returns>A list of offsets into the buffer where the compare was found.</returns>
        </member>
        <member name="T:NtApiDotNet.CreateUserProcess">
            <summary>
            Class to create a new user process using the native APIs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ImagePath">
            <summary>
            Path to the executable to start.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ConfigImagePath">
            <summary>
            Path to the executable to start which is passed in the process configuration.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.CommandLine">
            <summary>
            Command line
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.Environment">
            <summary>
            Prepared environment block.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.WindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.DllPath">
            <summary>
            Path to DLLs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.CurrentDirectory">
            <summary>
            Current directory for new process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.DesktopInfo">
            <summary>
            Desktop information value
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ShellInfo">
            <summary>
            Shell information value
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.RuntimeData">
            <summary>
            Runtime data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProhibitedImageCharacteristics">
            <summary>
            Prohibited image characteristics for new process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.AdditionalFileAccess">
            <summary>
            Additional file access for opened executable file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProcessFlags">
            <summary>
            Process create flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ThreadFlags">
            <summary>
            Thread create flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.InitFlags">
            <summary>
            Initialization flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ParentProcess">
            <summary>
            Parent process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.RestrictChildProcess">
            <summary>
            Restrict new child processes
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.OverrideRestrictChildProcess">
            <summary>
            Override restrict child process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.AdditionalAttributes">
            <summary>
            Extra process/thread attributes
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.AddProtectionLevel(NtApiDotNet.PsProtectedType,NtApiDotNet.PsProtectedSigner)">
            <summary>
            Added protected process protection level.
            </summary>
            <param name="type">The type of protected process.</param>
            <param name="signer">The signer level.</param>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ReturnOnError">
            <summary>
            Return on error instead of throwing an exception.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.TerminateOnDispose">
            <summary>
            Whether to terminate the process on dispose.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProcessSecurityDescriptor">
            <summary>
            Specify a security descriptor for the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ThreadSecurityDescriptor">
            <summary>
            Specify a security descriptor for the initial thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.Token">
            <summary>
            Specify the primary token for the new process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProcessDesiredAccess">
            <summary>
            Access for process handle.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ThreadDesiredAccess">
            <summary>
            Access for thread handle.
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.Fork">
            <summary>
            For the current process
            </summary>
            <returns>The new forked process result</returns>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.Start">
            <summary>
            Start the new process based on the ImagePath parameter.
            </summary>
            <returns>The result of the process creation</returns>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.Start(System.String)">
            <summary>
            Start the new process
            </summary>
            <param name="image_path">The image path to the file to execute</param>
            <returns>The result of the process creation</returns>
        </member>
        <member name="T:NtApiDotNet.CreateUserProcessResult">
            <summary>
            Result from a native create process call.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Process">
            <summary>
            Handle to the process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Thread">
            <summary>
            Handle to the initial thread
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ImageFile">
            <summary>
            Handle to the image file
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.SectionHandle">
            <summary>
            Handle to the image section
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.IFEOKeyHandle">
            <summary>
            Handle to the IFEO key (if it exists)
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ImageInfo">
            <summary>
            Image information
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ClientId">
            <summary>
            Client ID of process and thread
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ThreadId">
            <summary>
            Thread ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Status">
            <summary>
            Create status
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Success">
            <summary>
            True if create succeeded
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.CreateInfo">
            <summary>
            Result of the create information
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.CreateState">
            <summary>
            Creation state
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the process
            </summary>
            <param name="exitcode">Exit code for termination</param>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Resume">
            <summary>
            Resume initial thread
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.TerminateOnDispose">
            <summary>
            Set to true to terminate process on disposal
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.DebugEvent">
            <summary>
            The base class for a debug event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.DebugEvent.ProcessId">
            <summary>
            Process ID for the event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.DebugEvent.ThreadId">
            <summary>
            Thread ID for the event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.DebugEvent.State">
            <summary>
            The event code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.DebugEvent.#ctor(NtApiDotNet.DbgUiWaitStatusChange,NtApiDotNet.NtDebug)">
            <summary>
            Constructor.
            </summary>
            <param name="debug_event">The current debug event.</param>
            <param name="debug">The debug port associated with this event.</param>
        </member>
        <member name="M:NtApiDotNet.DebugEvent.Continue(NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="continue_status">The continue status code.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.DebugEvent.Continue(NtApiDotNet.NtStatus)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="continue_status">The continue status code.</param>
        </member>
        <member name="M:NtApiDotNet.DebugEvent.Continue">
            <summary>
            Continue the debugged process with a success code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.DebugEvent.Dispose">
            <summary>
            Dispose the event.
            </summary>
        </member>
        <member name="T:NtApiDotNet.CreateProcessDebugEvent">
            <summary>
            Debug event for the Create Process event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.ProcessSubSystemKey">
            <summary>
            Subsystem key for the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.File">
            <summary>
            Handle to the process file (if available).
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.BaseOfImage">
            <summary>
            Base of image file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.DebugInfoFileOffset">
            <summary>
            Debug info file offset.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.DebugInfoSize">
            <summary>
            Debug info file size.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.ThreadSubSystemKey">
            <summary>
            Subsystem key for the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.ThreadStartAddress">
            <summary>
            Start address of the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.Process">
            <summary>
            Handle to the process (if available).
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateProcessDebugEvent.Thread">
            <summary>
            Handle to the thread (if available).
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateProcessDebugEvent.Dispose">
            <summary>
            Dispose the event.
            </summary>
        </member>
        <member name="T:NtApiDotNet.CreateThreadDebugEvent">
            <summary>
            Debug event for the Create Thread event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateThreadDebugEvent.ThreadSubSystemKey">
            <summary>
            Subsystem key for the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateThreadDebugEvent.ThreadStartAddress">
            <summary>
            Start address of the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateThreadDebugEvent.Thread">
            <summary>
            Handle to the thread (if available).
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateThreadDebugEvent.Dispose">
            <summary>
            Dispose the event.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ExitThreadDebugEvent">
            <summary>
            Debug event for the Exit Thread event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExitThreadDebugEvent.ExitStatus">
            <summary>
            Exit status code.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ExitProcessDebugEvent">
            <summary>
            Debug event for the Exit Process event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExitProcessDebugEvent.ExitStatus">
            <summary>
            Exit status code.
            </summary>
        </member>
        <member name="T:NtApiDotNet.LoadDllDebugEvent">
            <summary>
            Debug event for load DLL event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.LoadDllDebugEvent.File">
            <summary>
            DLL file handle.
            </summary>
        </member>
        <member name="P:NtApiDotNet.LoadDllDebugEvent.BaseOfDll">
            <summary>
            Base of loaded DLL.
            </summary>
        </member>
        <member name="P:NtApiDotNet.LoadDllDebugEvent.DebugInfoFileOffset">
            <summary>
            Debug info offset.
            </summary>
        </member>
        <member name="P:NtApiDotNet.LoadDllDebugEvent.DebugInfoSize">
            <summary>
            Debug info size.
            </summary>
        </member>
        <member name="P:NtApiDotNet.LoadDllDebugEvent.NamePointer">
            <summary>
            Address of name.
            </summary>
        </member>
        <member name="M:NtApiDotNet.LoadDllDebugEvent.Dispose">
            <summary>
            Dispose the event.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnloadDllDebugEvent">
            <summary>
            Debug event for unload DLL event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.UnloadDllDebugEvent.BaseAddress">
            <summary>
            Base of loaded DLL.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ExceptionDebugEvent">
            <summary>
            Debug event for exception event.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.FirstChance">
            <summary>
            Indicates if this is a first chance exception.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.Code">
            <summary>
            Exception code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.Flags">
            <summary>
            Exception flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.RecordChain">
            <summary>
            Pointer to next exception in the chain.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.Address">
            <summary>
            Address of exception.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExceptionDebugEvent.Parameters">
            <summary>
            Additional parameters for exception.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnknownDebugEvent">
            <summary>
            Debug event when we don't handle the state.
            </summary>
        </member>
        <member name="P:NtApiDotNet.UnknownDebugEvent.DebugEvent">
            <summary>
            The raw debug event.
            </summary>
        </member>
        <member name="T:NtApiDotNet.DisposableList`1">
            <summary>
            Represents a list where the elements can be trivially disposed in one go.
            </summary>
            <typeparam name="T">An IDisposable implementing type</typeparam>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="collection">A collection to initialize the list</param>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.AddResource``1(``0)">
            <summary>
            Add a resource to the list and return a reference to it.
            </summary>
            <typeparam name="R">The type of resource to add.</typeparam>
            <param name="resource">The resource object.</param>
            <returns>The added resource.</returns>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.AddResource``1">
            <summary>
            Add a resource to the list and return a reference to it.
            </summary>
            <typeparam name="R">The type of resource to add.</typeparam>
            <returns>The added resource.</returns>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.ToArrayAndClear">
            <summary>
            Convert this list to an array then clear it to the disposal no longer happens.
            </summary>
            <returns>The elements as an array.</returns>
            <remarks>After doing this the current list will be cleared.</remarks>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:NtApiDotNet.DisposableList">
            <summary>
            Implementation of disposable list which just accepts IDisposable objects.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeHandleList">
            <summary>
            Disposable list of safe handles
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor(System.Collections.Generic.IEnumerable{System.Runtime.InteropServices.SafeHandle})">
            <summary>
            Constructor
            </summary>
            <param name="collection">A collection to initialize the list</param>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.DangerousMove">
            <summary>
            Move the handle list to a new disposable list.
            </summary>
            <returns>The list of handles which have been moved.</returns>
            <remarks>After doing this the current list will be cleared.</remarks>
        </member>
        <member name="T:NtApiDotNet.EaBufferEntryFlags">
            <summary>
            Flags for an EA entry
            </summary>
        </member>
        <member name="F:NtApiDotNet.EaBufferEntryFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.EaBufferEntryFlags.NeedEa">
            <summary>
            Processor must handle this EA.
            </summary>
        </member>
        <member name="T:NtApiDotNet.EaBufferEntry">
            <summary>
            A single EA entry.
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Name">
            <summary>
            Name of the entry
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Data">
            <summary>
            Data associated with the entry
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.DataAsString">
            <summary>
            Get the EA buffer data as a string.
            </summary>
            <returns>The data as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.DataAsInt32">
            <summary>
            Get the EA buffer data as an Int32.
            </summary>
            <returns>The data as an Int32.</returns>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.ToString">
            <summary>
            Convert entry to a string
            </summary>
            <returns>The entry as a string</returns>
        </member>
        <member name="T:NtApiDotNet.EaBuffer">
            <summary>
            Class to create an Extended Attributes buffer for NtCreateFile
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.EaBufferEntry})">
            <summary>
            Constructor
            </summary>
            <param name="entries">List of entries to add.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(System.Byte[])">
            <summary>
            Constructor from a binary EA buffer
            </summary>
            <param name="buffer">The EA buffer to parse</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(NtApiDotNet.EaBuffer)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Existing buffer to copy.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(NtApiDotNet.EaBufferEntry)">
            <summary>
            Add a new EA entry from an old entry. The data will be cloned.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data, will be cloned</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.GetEntry(System.String)">
            <summary>
            Get an entry by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The found entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.RemoveEntry(NtApiDotNet.EaBufferEntry)">
            <summary>
            Remove an entry from the buffer.
            </summary>
            <param name="entry">The entry to remove.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.RemoveEntry(System.String)">
            <summary>
            Remove an entry from the buffer by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.ToByteArray">
            <summary>
            Convert to a byte array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Entries">
            <summary>
            Get the list of entries.
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.ContainsEntry(System.String)">
            <summary>
            Get whether the buffer contains a specific entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>True if the buffer contains an entry with the name.</returns>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Item(System.String)">
            <summary>
            Index to get an entry by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The found entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.Clear">
            <summary>
            Clear all entries.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Forms.AclViewerControl">
            <summary>
            Control for viewing an ACL.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.AclViewerControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.AclViewerControl.SetAcl(NtApiDotNet.Acl,System.Type,NtApiDotNet.GenericMapping,NtApiDotNet.AccessMask)">
            <summary>
            Set ACL for control.
            </summary>
            <param name="acl">The ACL to view.</param>
            <param name="access_type">The enum type for the view.</param>
            <param name="mapping">Generic mapping for the type.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.AclViewerControl.SetAcl(NtApiDotNet.Acl,System.Type,NtApiDotNet.GenericMapping,NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Set ACL for control.
            </summary>
            <param name="acl">The ACL to view.</param>
            <param name="access_type">The enum type for the view.</param>
            <param name="mapping">Generic mapping for the type.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
            <param name="is_container">True to indicate this object is a container.</param>
        </member>
        <member name="F:NtApiDotNet.Forms.AclViewerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.AclViewerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.AclViewerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Forms.SecurityDescriptorViewerControl">
            <summary>
            Control to display a security descriptor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType,NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Set the security descriptor for the control.
            </summary>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="type">NT type for view.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
            <param name="is_container">True to indicate this object is a container.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType,NtApiDotNet.AccessMask)">
            <summary>
            Set the security descriptor for the control.
            </summary>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="type">NT type for view.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,System.Type,NtApiDotNet.GenericMapping,NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Set the security descriptor for the control.
            </summary>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="access_type">The enum type for the view.</param>
            <param name="mapping">Generic mapping for the type.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
            <param name="is_container">True to indicate this object is a container.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,System.Type,NtApiDotNet.GenericMapping,NtApiDotNet.AccessMask)">
            <summary>
            Set the security descriptor for the control.
            </summary>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="access_type">The enum type for the view.</param>
            <param name="mapping">Generic mapping for the type.</param>
            <param name="valid_access">The valid bit mask for access for this type.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Forms.SecurityDescriptorViewerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Forms.SecurityDescriptorViewerForm">
            <summary>
            Form to view an object's security descriptor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerForm.#ctor(System.String,NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the object.</param>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="type">NT type for view.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerForm.#ctor(System.String,NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the object.</param>
            <param name="security_descriptor">Security descriptor to view.</param>
            <param name="type">NT type for view.</param>
            <param name="is_container">True to indicate this object is a container.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerForm.#ctor(NtApiDotNet.NtObject,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">The object to view.</param>
            <param name="read_only">True to specify read only viewer.</param>
        </member>
        <member name="F:NtApiDotNet.Forms.SecurityDescriptorViewerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NtApiDotNet.Forms.SecurityDescriptorViewerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NtApiDotNet.GenericMapping">
            <summary>
            Access rights generic mapping.
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericRead">
            <summary>
            Mapping for Generic Read
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericWrite">
            <summary>
            Mapping for Generic Write
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericExecute">
            <summary>
            Mapping for Generic Execute
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericAll">
            <summary>
            Mapping for Generic All
            </summary>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.MapMask(NtApiDotNet.AccessMask)">
            <summary>
            Map a generic access mask to a specific one.
            </summary>
            <param name="mask">The generic mask to map.</param>
            <returns>The mapped mask.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasRead(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives read access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have read access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasWrite(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives write access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have write access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasExecute(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives execute access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have execute access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasAll(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives all access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have all access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.UnmapMask(NtApiDotNet.AccessMask)">
            <summary>
            Try and unmap access mask to generic rights.
            </summary>
            <param name="mask">The mask to unmap.</param>
            <returns>The unmapped mask. Any access which can be generic mapped is left in the mask as specific rights.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.ToString">
            <summary>
            Convert generic mapping to a string.
            </summary>
            <returns>The generic mapping as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.INtTransaction">
            <summary>
            Interface to abstract the kernel transaction manager support.
            </summary>
        </member>
        <member name="P:NtApiDotNet.INtTransaction.Handle">
            <summary>
            Get handle for the transaction.
            </summary>
        </member>
        <member name="M:NtApiDotNet.INtTransaction.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.INtTransaction.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.INtTransaction.Enable">
            <summary>
            Enable the transaction for anything in the current thread context.
            </summary>
            <returns>The transaction context. This should be disposed to disable the transaction.</returns>
        </member>
        <member name="T:NtApiDotNet.MandatoryLabelAce">
            <summary>
            Class to represent an Access Control Entry for a Mandatory Label.
            </summary>
        </member>
        <member name="M:NtApiDotNet.MandatoryLabelAce.#ctor(NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy,NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="flags">Flags for the ACE.</param>
            <param name="policy">The mandatory label policy.</param>
            <param name="integrity_level">The integrity level.</param>
        </member>
        <member name="M:NtApiDotNet.MandatoryLabelAce.#ctor(NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy,NtApiDotNet.Sid)">
            <summary>
            Constructor from a raw integrity level.
            </summary>
            <param name="flags">Flags for the ACE.</param>
            <param name="policy">The mandatory label policy.</param>
            <param name="sid">The integrity level sid.</param>
        </member>
        <member name="P:NtApiDotNet.MandatoryLabelAce.Policy">
            <summary>
            The policy for the mandatory label.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MandatoryLabelAce.IntegrityLevel">
            <summary>
            Get or set the integrity level
            </summary>
        </member>
        <member name="M:NtApiDotNet.MandatoryLabelAce.ToString">
            <summary>
            Convert ACE to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.MappedFile">
            <summary>
            Class which represents a mapped file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Path">
            <summary>
            Native path to file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Name">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Sections">
            <summary>
            List of mapped sections.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.BaseAddress">
            <summary>
            Mapped base address of file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Size">
            <summary>
            Mapped size of file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.IsImage">
            <summary>
            True if the mapped file is an image section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.ImageSigningLevel">
            <summary>
            Specified the signing level if an image (only on RS3+).
            </summary>
        </member>
        <member name="T:NtApiDotNet.MemoryInformation">
            <summary>
            Class to represent memory information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.BaseAddress">
            <summary>
            Base address of memory region.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.AllocationBase">
            <summary>
            Allocation base for memory region.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.AllocationProtect">
            <summary>
            Initial allocation protection.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.RegionSize">
            <summary>
            Region size.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.State">
            <summary>
            Memory state.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.Protect">
            <summary>
            Current memory protection.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.Type">
            <summary>
            Memory type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.MappedImagePath">
            <summary>
            The mapped image path, if an image.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.ProcessMemoryReader">
            <summary>
            IMemoryReader implementation for a process.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.CrossBitnessProcessMemoryReader">
            <summary>
            IMemoryReader implementation for a process.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.INdrConformantStructure">
            <summary>
            Interface for a marshalled NDR conformant structure.
            </summary>
            <remarks>This interface is primarily for internal use only.</remarks>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.INdrConformantStructure.GetConformantDimensions">
            <summary>
            Gets the number of conformant dimensions, should be at least one.
            </summary>
            <returns>The number of conformant dimensions.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.INdrStructure">
            <summary>
            Interface for a marshalled NDR structure.
            </summary>
            <remarks>This interface is primarily for internal use only.</remarks>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.INdrStructure.Marshal(NtApiDotNet.Ndr.Marshal.NdrMarshalBuffer)">
            <summary>
            Marshal the stucture to a stream.
            </summary>
            <param name="marshal">The marshal stream.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.INdrStructure.Unmarshal(NtApiDotNet.Ndr.Marshal.NdrUnmarshalBuffer)">
            <summary>
            Unmarshal the structure from a stream.
            </summary>
            <param name="unmarshal">The unmarshal stream.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.INdrStructure.GetAlignment">
            <summary>
            Get the structure's alignment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrContextHandle">
            <summary>
            Structure to represent a context handle.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrContextHandle.Attributes">
            <summary>
            Context handle attributes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrContextHandle.Uuid">
            <summary>
            Context handle UUID.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrContextHandle.#ctor(System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="attributes">Context handle attributes.</param>
            <param name="uuid">Context handle UUID.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrContextHandle.ToString">
            <summary>
            Overidden ToString method.
            </summary>
            <returns>The handle as string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrIntegerRepresentation">
            <summary>
            NDR integer representation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrCharacterRepresentation">
            <summary>
            NDR character representation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrFloatingPointRepresentation">
            <summary>
            NDR floating point representation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrDataRepresentation">
            <summary>
            Definition of the NDR data representation for an NDR stream.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrDataRepresentation.IntegerRepresentation">
            <summary>
            The integer representation of the NDR data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrDataRepresentation.CharacterRepresentation">
            <summary>
            The character representation of the NDR data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrDataRepresentation.FloatingPointRepresentation">
            <summary>
            The floating representation of the NDR data.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer`1">
            <summary>
            A class which represents an embedded pointer.
            </summary>
            <typeparam name="T">The underlying type.</typeparam>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer`1.op_Implicit(`0)~NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer{`0}">
            <summary>
            Operator to convert from a value to an embedded pointer.
            </summary>
            <param name="value">The value to point to.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer`1.op_Implicit(NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer{`0})~`0">
            <summary>
            Operator to convert from an embedded pointer to a value.
            </summary>
            <param name="pointer">The embedded pointer.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer`1.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The string form of the value.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer`1.GetValue">
            <summary>
            Get the value from the embedded pointer.
            </summary>
            <returns>The value of the pointer.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrEmpty">
            <summary>
            Structure to represent an empty value.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrEnum16">
            <summary>
            Class to represent a 16 bit enumerated type.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.Marshal.NdrEnum16.Value">
            <summary>
            Value of the structure.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Implicit(System.Int32)~NtApiDotNet.Ndr.Marshal.NdrEnum16">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Implicit(NtApiDotNet.Ndr.Marshal.NdrEnum16)~System.Int32">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Explicit(System.UInt32)~NtApiDotNet.Ndr.Marshal.NdrEnum16">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Explicit(NtApiDotNet.Ndr.Marshal.NdrEnum16)~System.Int64">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Explicit(System.Int64)~NtApiDotNet.Ndr.Marshal.NdrEnum16">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Explicit(System.Enum)~NtApiDotNet.Ndr.Marshal.NdrEnum16">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Explicit(NtApiDotNet.Ndr.Marshal.NdrEnum16)~System.UInt32">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Equality(NtApiDotNet.Ndr.Marshal.NdrEnum16,NtApiDotNet.Ndr.Marshal.NdrEnum16)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.op_Inequality(NtApiDotNet.Ndr.Marshal.NdrEnum16,NtApiDotNet.Ndr.Marshal.NdrEnum16)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if the values are not-equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.ToString">
            <summary>
            Overridden ToString.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.ToString(System.String)">
            <summary>
            ToString method.
            </summary>
            <param name="format">The formatting string.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable ToString.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="formatProvider">Formatting provider.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.Equals(NtApiDotNet.Ndr.Marshal.NdrEnum16)">
            <summary>
            Equals operator.
            </summary>
            <param name="other">The other enum16.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.Equals(System.Object)">
            <summary>
            Compare 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrEnum16.GetHashCode">
            <summary>
            Overridden GetHashCode.
            </summary>
            <returns>The hash code of the enumeration.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrInterfacePointer">
            <summary>
            Class to represent an NDR interface pointer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.Marshal.NdrInterfacePointer.Data">
            <summary>
            The marshaled interface data.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInterfacePointer.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="data">The marshaled interface data.</param>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrPickledType">
            <summary>
            Represents an NDR pickled type.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrPickledType.#ctor(System.Byte[])">
            <summary>
            Constructor from a type 1 serialized buffer.
            </summary>
            <param name="encoded">The type 1 serialized encoded buffer.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrPickledType.ToArray">
            <summary>
            Convert the pickled type to a type 1 serialized encoded buffer.
            </summary>
            <returns>The type 1 serialized encoded buffer.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrPipe`1">
            <summary>
            Placeholder for a NDR pipe type.
            </summary>
            <typeparam name="T">The base type of pipe blocks.</typeparam>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrPipe`1.Pull(System.Int32)">
            <summary>
            Pull a block from a pipe.
            </summary>
            <param name="count">The maximum number of elements to pull.</param>
            <returns>The pulled block.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrPipe`1.Push(`0[])">
            <summary>
            Push a block to a pipe.
            </summary>
            <param name="data">The block to push.</param>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrInt3264">
            <summary>
            Structure which represents an NDR FC_INT3264
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.Marshal.NdrInt3264.Value">
            <summary>
            Value of the structure.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.op_Implicit(NtApiDotNet.Ndr.Marshal.NdrInt3264)~System.IntPtr">
            <summary>
            Convert to a native IntPtr.
            </summary>
            <param name="i">The value to convert from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.ToString">
            <summary>
            Overridden ToString.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.ToString(System.String)">
            <summary>
            ToString method.
            </summary>
            <param name="format">The formatting string.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrInt3264.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable ToString.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="formatProvider">Formatting provider.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrUInt3264">
            <summary>
            Structure which represents an NDR FC_UINT3264
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.Marshal.NdrUInt3264.Value">
            <summary>
            Value of the structure.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="value">The value to construct from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.op_Implicit(NtApiDotNet.Ndr.Marshal.NdrUInt3264)~System.IntPtr">
            <summary>
            Convert to a native IntPtr.
            </summary>
            <param name="i">The value to convert from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.ToString">
            <summary>
            Overridden ToString.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.ToString(System.String)">
            <summary>
            ToString method.
            </summary>
            <param name="format">The formatting string.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.NdrUInt3264.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable ToString.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="formatProvider">Formatting provider.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrMarshalBuffer">
            <summary>
            A buffer to marshal NDR data to.
            </summary>
            <remarks>This class is primarily for internal use only.</remarks>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.INdrNonEncapsulatedUnion">
            <summary>
            Interface for a marshalled non-encapsulated NDR union.
            </summary>
            <remarks>This interface is primarily for internal use only.</remarks>
        </member>
        <member name="M:NtApiDotNet.Ndr.Marshal.INdrNonEncapsulatedUnion.Marshal(NtApiDotNet.Ndr.Marshal.NdrMarshalBuffer,System.Int64)">
            <summary>
            Marshal the union to a stream.
            </summary>
            <param name="selector">The selector for union arm.</param>
            <param name="marshal">The marshal stream.</param>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrUnmarshalBuffer">
            <summary>
            A buffer to unmarshal NDR data from.
            </summary>
            <remarks>This class is primarily for internal use only.</remarks>
        </member>
        <member name="T:NtApiDotNet.Ndr.Marshal.NdrUnsupported">
            <summary>
            Place holder for unsupported types.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrExpression">
            <summary>
            Expression element.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrExpression.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The expression as a string.</returns>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrExpression.Type">
            <summary>
            The expression type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrExpression.IsValid">
            <summary>
            Is this operator element valid.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrOperatorExpression">
            <summary>
            Operator expression element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrOperatorExpression.Operator">
            <summary>
            NDR format type of element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrOperatorExpression.Format">
            <summary>
            NDR format type of element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrOperatorExpression.Offset">
            <summary>
            Offset, used for OP_EXPRESSION.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrOperatorExpression.Arguments">
            <summary>
            Parsed arguments.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrOperatorExpression.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The expression as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrVariableExpression">
            <summary>
            Variable expression element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrVariableExpression.Offset">
            <summary>
            Offset of the variable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrVariableExpression.Format">
            <summary>
            NDR format type of element.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrVariableExpression.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The expression as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrConstantExpression">
            <summary>
            Expression element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrConstantExpression.Format">
            <summary>
            NDR format type of element.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrConstantExpression.Offset">
            <summary>
            Offset of the variable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrConstantExpression.Value">
            <summary>
            The value of the constant.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrConstantExpression.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The expression as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrComProxyDefinition">
            <summary>
            Class to represent a single COM proxy definition.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrComProxyDefinition.Name">
            <summary>
            The name of the proxy interface.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrComProxyDefinition.Iid">
            <summary>
            The IID of the proxy interface.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrComProxyDefinition.BaseIid">
            <summary>
            The base IID of the proxy interface.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrComProxyDefinition.DispatchCount">
            <summary>
            The number of dispatch methods on the interface.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrComProxyDefinition.Procedures">
            <summary>
            List of parsed procedures for the interface.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrComProxyDefinition.FromProcedures(System.String,System.Guid,System.Guid,System.Int32,System.Collections.Generic.IEnumerable{NtApiDotNet.Ndr.NdrProcedureDefinition})">
            <summary>
            Creates a proxy definition from a list of procedures.
            </summary>
            <param name="name">The name of the proxy interface.</param>
            <param name="iid">The IID of the proxy interface.</param>
            <param name="base_iid">The base IID of the proxy interface.</param>
            <param name="dispatch_count">The total dispatch count for the proxy interface.</param>
            <param name="procedures">The list of parsed procedures for the proxy interface.</param>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.INdrFormatter">
            <summary>
            An interface which can be implemented to handle formatting parsed NDR data.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.INdrFormatter.FormatComplexType(NtApiDotNet.Ndr.NdrComplexTypeReference)">
            <summary>
            Format a complex type using the current formatter.
            </summary>
            <param name="complex_type">The complex type to format.</param>
            <returns>The formatted complex type.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.INdrFormatter.FormatProcedure(NtApiDotNet.Ndr.NdrProcedureDefinition)">
            <summary>
            Format a procedure using the current formatter.
            </summary>
            <param name="procedure">The procedure to format.</param>
            <returns>The formatted procedure.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.INdrFormatter.FormatComProxy(NtApiDotNet.Ndr.NdrComProxyDefinition)">
            <summary>
            Format a COM proxy using the current formatter.
            </summary>
            <param name="com_proxy">The COM proxy to format.</param>
            <returns>The formatted COM proxy.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.INdrFormatter.FormatRpcServerInterface(NtApiDotNet.Ndr.NdrRpcServerInterface)">
            <summary>
            Format an RPC server interface using the current formatter.
            </summary>
            <param name="rpc_server">The RPC server.</param>
            <returns>The formatted RPC server interface.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrFormatter">
            <summary>
            An base class which describes a text formatter for NDR data.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.DefaultNdrFormatterFlags">
            <summary>
            Flags for the NDR formatter.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.DefaultNdrFormatterFlags.None">
            <summary>
            No flags. 
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.DefaultNdrFormatterFlags.RemoveComments">
            <summary>
            Don't emit comments.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.DefaultNdrFormatter">
            <summary>
            Default NDR formatter constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create(System.Collections.Generic.IDictionary{System.Guid,System.String},System.Func{System.String,System.String},NtApiDotNet.Ndr.DefaultNdrFormatterFlags)">
            <summary>
            Create the default formatter.
            </summary>
            <param name="iids_to_names">Specify a dictionary of IIDs to names.</param>
            <param name="demangle_com_name">Function to demangle COM interface names during formatting.</param>
            <param name="flags">Formatter flags.</param>
            <returns>The default formatter.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create(System.Collections.Generic.IDictionary{System.Guid,System.String},System.Func{System.String,System.String})">
            <summary>
            Create the default formatter.
            </summary>
            <param name="iids_to_names">Specify a dictionary of IIDs to names.</param>
            <param name="demangle_com_name">Function to demangle COM interface names during formatting.</param>
            <returns>The default formatter.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create(System.Collections.Generic.IDictionary{System.Guid,System.String},NtApiDotNet.Ndr.DefaultNdrFormatterFlags)">
            <summary>
            Create the default formatter.
            </summary>
            <param name="iids_to_names">Specify a dictionary of IIDs to names.</param>
            <param name="flags">Formatter flags.</param>
            <returns>The default formatter.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create(System.Collections.Generic.IDictionary{System.Guid,System.String})">
            <summary>
            Create the default formatter.
            </summary>
            <param name="iids_to_names">Specify a dictionary of IIDs to names.</param>
            <returns>The default formatter.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create(NtApiDotNet.Ndr.DefaultNdrFormatterFlags)">
            <summary>
            Create the default formatter.
            </summary>
            <param name="flags">Formatter flags.</param>
            <returns>The default formatter.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.DefaultNdrFormatter.Create">
            <summary>
            Create the default formatter.
            </summary>
            <returns>The default formatter.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrParserFlags">
            <summary>
            Flags for the parser.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.NdrParserFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Ndr.NdrParserFlags.IgnoreUserMarshal">
            <summary>
            Ignore processing any complex user marshal types.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrParser">
            <summary>
            Class to parse NDR data into a structured format.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor(NtApiDotNet.Ndr.IMemoryReader,NtApiDotNet.NtProcess,NtApiDotNet.Win32.ISymbolResolver,NtApiDotNet.Ndr.NdrParserFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">Memory reader to parse from.</param>
            <param name="process">Process to read from.</param>
            <param name="symbol_resolver">Specify a symbol resolver to use for looking up symbols.</param>
            <param name="parser_flags">Flags which affect the parsing operation.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor(NtApiDotNet.NtProcess,NtApiDotNet.Win32.ISymbolResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="process">Process to parse from.</param>
            <param name="symbol_resolver">Specify a symbol resolver to use for looking up symbols.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor(NtApiDotNet.NtProcess,NtApiDotNet.Win32.ISymbolResolver,NtApiDotNet.Ndr.NdrParserFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="process">Process to parse from.</param>
            <param name="symbol_resolver">Specify a symbol resolver to use for looking up symbols.</param>
            <param name="parser_flags">Flags which affect the parsing operation.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor(NtApiDotNet.Win32.ISymbolResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="symbol_resolver">Specify a symbol resolver to use for looking up symbols.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor(NtApiDotNet.NtProcess)">
            <summary>
            Constructor.
            </summary>
            <param name="process">Process to parse from.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromProxyFileInfo(System.IntPtr)">
            <summary>
            Read COM proxy information from a ProxyFileInfo structure.
            </summary>
            <param name="proxy_file_info">The address of the ProxyFileInfo structure.</param>
            <returns>The list of parsed proxy definitions.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromProxyFileInfoArray(System.IntPtr)">
            <summary>
            Read COM proxy information from an array of pointers to ProxyFileInfo structures.
            </summary>
            <param name="proxy_file_info_array">The address of an array of pointers to ProxyFileInfo structures. The last pointer should be NULL.</param>
            <returns>The list of parsed proxy definitions.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromComProxyFile(System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Read COM proxy information from a file.
            </summary>
            <param name="path">The path to the DLL containing the proxy.</param>
            <param name="clsid">Optional CLSID for the proxy class.</param>
            <param name="iids">List of IIDs to parse.</param>
            <returns>The list of parsed proxy definitions.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromComProxyFile(System.String,System.Guid)">
            <summary>
            Read COM proxy information from a file.
            </summary>
            <param name="path">The path to the DLL containing the proxy.</param>
            <param name="clsid">Optional CLSID for the proxy class.</param>
            <returns>The list of parsed proxy definitions.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromComProxyFile(System.String)">
            <summary>
            Read COM proxy information from a file.
            </summary>
            <param name="path">The path to the DLL containing the proxy.</param>
            <returns>The list of parsed proxy definitions.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromRpcServerInterface(System.IntPtr)">
            <summary>
            Parse NDR content from an RPC_SERVER_INTERFACE structure in memory.
            </summary>
            <param name="server_interface">Pointer to the RPC_SERVER_INTERFACE.</param>
            <returns>The parsed NDR content.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadRpcServerInterface(System.IntPtr)">
            <summary>
            Parse NDR content from an RPC_SERVER_INTERFACE structure in memory. Deprecated.
            </summary>
            <param name="server_interface">Pointer to the RPC_SERVER_INTERFACE.</param>
            <returns>The parsed NDR content.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromRpcServerInterface(System.String,System.Int32)">
            <summary>
            Parse NDR content from an RPC_SERVER_INTERFACE structure in memory.
            </summary>
            <param name="dll_path">The path to a DLL containing the RPC_SERVER_INTERFACE.</param>
            <param name="offset">Offset to the RPC_SERVER_INTERFACE from the base of the DLL.</param>
            <returns>The parsed NDR content.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromMidlServerInfo(System.IntPtr,System.Int32,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Parse NDR procedures from an MIDL_SERVER_INFO structure in memory.
            </summary>
            <param name="server_info">Pointer to the MIDL_SERVER_INFO.</param>
            <param name="dispatch_count">Number of dispatch functions to parse.</param>
            <param name="start_offset">The start offset to parse from. This is used for COM where the first few proxy stubs are not implemented.</param>
            <param name="names">List of names for the valid procedures. Should either be null or a list equal in size to dispatch_count - start_offset.</param>
            <returns>The parsed NDR content.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadFromMidlServerInfo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Parse NDR procedures from an MIDL_SERVER_INFO structure in memory.
            </summary>
            <param name="server_info">Pointer to the MIDL_SERVER_INFO.</param>
            <param name="dispatch_count">Number of dispatch functions to parse.</param>
            <param name="start_offset">The start offset to parse from. This is used for COM where the first few proxy stubs are not implemented.</param>
            <returns>The parsed NDR content.</returns>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrParser.Types">
            <summary>
            List of parsed types from the NDR.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrParser.ComplexTypes">
            <summary>
            List of parsed complex types from the NDR.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadPicklingComplexTypes(NtApiDotNet.NtProcess,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            Parse NDR complex type information from a pickling structure. Used to extract explicit Encode/Decode method information.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="midl_type_pickling_info">Pointer to the MIDL_TYPE_PICKLING_INFO structure.</param>
            <param name="midl_stub_desc">The pointer to the MIDL_STUB_DESC structure.</param>
            <param name="start_offsets">Offsets into the format string to the start of the types.</param>
            <returns>The list of complex types.</returns>
            <remarks>This function is used to extract type information for calls to NdrMesTypeDecode2. MIDL_TYPE_PICKLING_INFO is the second parameter,
            MIDL_STUB_DESC is the third (minus the offset).</remarks>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParser.ReadPicklingComplexTypes(System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            Parse NDR complex type information from a pickling structure. Used to extract explicit Encode/Decode method information.
            </summary>
            <param name="midl_type_pickling_info">Pointer to the MIDL_TYPE_PICKLING_INFO structure.</param>
            <param name="midl_stub_desc">The pointer to the MIDL_STUB_DESC structure.</param>
            <param name="start_offsets">Offsets into the format string to the start of the types.</param>
            <returns>The list of complex types.</returns>
            <remarks>This function is used to extract type information for calls to NdrMesTypeDecode2. MIDL_TYPE_PICKLING_INFO is the second parameter,
            MIDL_STUB_DESC is the third (minus the offset).</remarks>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrParserException">
            <summary>
            Exception thrown when NDR parsing fails.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParserException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrParserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner_exception">Inner exception to wrap.</param>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrProtocolSequenceEndpoint">
            <summary>
            Class respresenting an RPC protocol sequence.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrProtocolSequenceEndpoint.ProtocolSequence">
            <summary>
            The protocol sequence for the endpoint.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrProtocolSequenceEndpoint.Endpoint">
            <summary>
            The endpoint name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrStringBuilder">
            <summary>
            Class to build text strings for an NDR formatter.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.PushIndent(System.String)">
            <summary>
            Push an indent string on to the indent stack.
            </summary>
            <param name="indent">The string to indent any new lines.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.PushIndent(System.Char,System.Int32)">
            <summary>
            Push an indent on to the indent stack.
            </summary>
            <param name="ch">The character to indent with.</param>
            <param name="count">The number of indent characters.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.PopIndent">
            <summary>
            Pop the current indent off the indent stack.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.Append(System.String)">
            <summary>
            Append a string to the builder.
            </summary>
            <param name="str">The string to append.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.Append(System.String,System.Object[])">
            <summary>
            Append a formatted string to the builder.
            </summary>
            <param name="format">The string format.</param>
            <param name="args">The array of arguments to the formatter.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.AppendLine">
            <summary>
            Append a new line to the builder.
            </summary>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.AppendLine(System.String)">
            <summary>
            Append a string to the builder with a new line.
            </summary>
            <param name="str">The string to append.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.AppendLine(System.String,System.Object[])">
            <summary>
            Append a formatted string to the builder with a new line.
            </summary>
            <param name="format">The string format.</param>
            <param name="args">The array of arguments to the formatter.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrStringBuilder.ToString">
            <summary>
            Overridden ToString method, returns the current state of the builder.
            </summary>
            <returns>The current stated of the builder.</returns>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrFormatCharacter">
            <summary>
            NDR format character.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Ndr.NdrRpcServerInterface">
            <summary>
            A parsed NDR RPC_SERVER_INTERFACE structure.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.InterfaceId">
            <summary>
            The RPC interface GUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.InterfaceVersion">
            <summary>
            The RPC interface version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.TransferSyntaxId">
            <summary>
            The RPC transfer syntax GUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.TransferSyntaxVersion">
            <summary>
            The RPC transfer syntax version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.Procedures">
            <summary>
            List of parsed procedures.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ndr.NdrRpcServerInterface.ProtocolSequences">
            <summary>
            List of protocol sequences.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ndr.NdrRpcServerInterface.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The string form of this class.</returns>
        </member>
        <member name="T:NtApiDotNet.AlpcAccessRights">
            <summary>
            Access rights for ALPC
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcPortInformationClass">
            <summary>
            ALPC Port Information Class
            </summary>
        </member>
        <member name="F:NtApiDotNet.AlpcPortAttributeFlags.AllowMultiHandleAttribute">
            <summary>
            If set then object duplication won't complete. Used by RPC to ensure
            multi-handle attributes don't fail when receiving.
            </summary>
        </member>
        <member name="F:NtApiDotNet.AlpcDataViewAttrFlags.ReleaseView">
            <summary>
            Use in a reply to release the view.
            </summary>
        </member>
        <member name="F:NtApiDotNet.AlpcDataViewAttrFlags.AutoRelease">
            <summary>
            Automatically release the view once it's passed to the receiver. 
            </summary>
        </member>
        <member name="F:NtApiDotNet.AlpcDataViewAttrFlags.Secure">
            <summary>
            Make the data view secure.
            </summary>
        </member>
        <member name="F:NtApiDotNet.AlpcMessageFlags.Wow64Call">
            <summary>
            When used all structures passed to kernel need to be 64 bit versions.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtAlpcUtils">
            <summary>
            Static utilities for ALPC.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.WaitForComplete">
            <summary>
            Wait for the result to complete. This could be waiting on an event
            or the file handle.
            </summary>
            <returns>Returns true if the wait completed successfully.</returns>
            <remarks>If true is returned then status and information can be read out.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.WaitForCompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for the result to complete asynchronously. This could be waiting on an event
            or the file handle.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Returns true if the wait completed successfully.</returns>
            <remarks>If true is returned then status and information can be read out.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Information">
            <summary>
            Return the status information field.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Information32">
            <summary>
            Return the status information field. (32 bit)
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Status">
            <summary>
            Get completion status code.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.IsPending">
            <summary>
            Returns true if the call is pending.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Dispose">
            <summary>
            Dispose object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Reset">
            <summary>
            Reset the file result so it can be reused.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Cancel">
            <summary>
            Cancel the pending IO operation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ObjectDirectoryInformation.Children">
            <summary>
            Children of entry if IsDirectory
            </summary>
        </member>
        <member name="T:NtApiDotNet.DirectoryAccessRights">
            <summary>
            Directory access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtEnlistment">
            <summary>
            Class to represent a kernel transaction enlistment.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtResourceManager,NtApiDotNet.NtTransaction,NtApiDotNet.EnlistmentCreateOptions,NtApiDotNet.TransactionNotificationMask,System.IntPtr,System.Boolean)">
            <summary>
            Create a new enlistment object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="resource_manager">Resource manager to handle the enlistment.</param>
            <param name="transaction">The transaction to enlist.</param>
            <param name="create_options">Optional create options.</param>
            <param name="notification_mask">Notification mask.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The created enlistment and NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtResourceManager,NtApiDotNet.NtTransaction,NtApiDotNet.EnlistmentCreateOptions,NtApiDotNet.TransactionNotificationMask,System.IntPtr)">
            <summary>
            Create a new enlistment object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="resource_manager">Resource manager to handle the enlistment.</param>
            <param name="transaction">The transaction to enlist.</param>
            <param name="create_options">Optional create options.</param>
            <param name="notification_mask">Notification mask.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <returns>The created enlistment.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtResourceManager,System.Guid,System.Boolean)">
            <summary>
            Open a existing new enlistment object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="resource_manager">Resource manager handling the enlistment.</param>
            <param name="enlistment_guid">ID of the enlistment to open.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The opened enlistment and NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtResourceManager,System.Guid)">
            <summary>
            Open a existing new enlistment object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="resource_manager">Resource manager handling the enlistment.</param>
            <param name="enlistment_guid">ID of the enlistment to open.</param>
            <returns>The opened enlistment.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.GetDefaultMaskForCreateOption(NtApiDotNet.EnlistmentCreateOptions)">
            <summary>
            Get a default mask for creating an enlistment object.
            </summary>
            <param name="create_options">The creation option to get default mask for.</param>
            <returns>A default working mask.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.CommitComplete(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Commit complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.CommitEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Commit enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrePrepareComplete(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Preprepare complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrePrepareEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Preprepare enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrepareComplete(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Prepare complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrepareEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Prepare enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RollbackComplete(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Rollback complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RollbackEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Rollback enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.ReadOnlyEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Read only enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RecoverEnlistment(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Recover enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.SinglePhaseReject(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Single phase reject enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.CommitComplete(System.Nullable{System.Int64})">
            <summary>
            Commit complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.CommitEnlistment(System.Nullable{System.Int64})">
            <summary>
            Commit enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrePrepareComplete(System.Nullable{System.Int64})">
            <summary>
            Preprepare complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrePrepareEnlistment(System.Nullable{System.Int64})">
            <summary>
            Preprepare enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrepareComplete(System.Nullable{System.Int64})">
            <summary>
            Prepare complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.PrepareEnlistment(System.Nullable{System.Int64})">
            <summary>
            Prepare enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RollbackComplete(System.Nullable{System.Int64})">
            <summary>
            Rollback complete enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RollbackEnlistment(System.Nullable{System.Int64})">
            <summary>
            Rollback enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.ReadOnlyEnlistment(System.Nullable{System.Int64})">
            <summary>
            Read only enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.RecoverEnlistment(System.Nullable{System.Int64})">
            <summary>
            Recover enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.SinglePhaseReject(System.Nullable{System.Int64})">
            <summary>
            Single phase reject enlistment.
            </summary>
            <param name="virtual_clock">Optional virtual clock value.</param>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.QueryInformation(NtApiDotNet.EnlistmentInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEnlistment.SetInformation(NtApiDotNet.EnlistmentInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.EnlistmentId">
            <summary>
            Get enlistment ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.TransactionId">
            <summary>
            Get associated transaction ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.ResourceManagerId">
            <summary>
            Get resource manager ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.CrmEnlistmentId">
            <summary>
            Get CRM enlistment ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.CrmTransactionManagerId">
            <summary>
            Get CRM transaction manager ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.CrmResourceManagerId">
            <summary>
            Get CRM resource manager ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEnlistment.RecoveryInformation">
            <summary>
            Get or set recovery information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.IoStatus.Information32">
            <summary>
            Return the status information field. (32 bit)
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="T:NtApiDotNet.NtGeneric">
            <summary>
            A generic wrapper for any object, used if we don't know the type ahead of time.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtGeneric.ToTypedObject">
            <summary>
            Convert the generic object to the best typed object.
            </summary>
            <returns>The typed object. Can be NtGeneric if no better type is known.</returns>
        </member>
        <member name="M:NtApiDotNet.NtGeneric.ToTypedObject(System.Boolean)">
            <summary>
            Convert the generic object to the best typed object.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The typed object. Can be NtGeneric if no better type is known.</returns>
        </member>
        <member name="P:NtApiDotNet.NtGeneric.IsContainer">
            <summary>
            Returns whether this object is a container.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtHandle">
            <summary>
            Class to represent a system handle
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ProcessId">
            <summary>
            The ID of the process holding the handle
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ObjectTypeIndex">
            <summary>
            The object type index
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ObjectType">
            <summary>
            The object type name
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.NtType">
            <summary>
            The object type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Attributes">
            <summary>
            The handle attribute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Handle">
            <summary>
            The handle value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Object">
            <summary>
            The address of the object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.GrantedAccess">
            <summary>
            The granted access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Name">
            <summary>
            The name of the object (needs to have set query access in constructor)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.SecurityDescriptor">
            <summary>
            The security of the object  (needs to have set query access in constructor)
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtHandle.GetObject(System.Boolean)">
            <summary>
            Get handle into the current process
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The handle to the object</returns>
        </member>
        <member name="M:NtApiDotNet.NtHandle.GetObject">
            <summary>
            Get handle into the current process
            </summary>
            <returns>The handle to the object</returns>
        </member>
        <member name="T:NtApiDotNet.NtKeyUtils">
            <summary>
            Utilities for registry keys.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKeyUtils.Win32KeyNameToNt(System.String)">
            <summary>
            Convert a Win32 style keyname such as HKEY_LOCAL_MACHINE\Path into a native key path.
            </summary>
            <param name="path">The win32 style keyname to convert.</param>
            <returns>The converted keyname.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if invalid name.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKeyUtils.NtKeyNameToWin32(System.String)">
            <summary>
            Attempt to convert an NT style registry key name to Win32 form.
            If it's not possible to convert the function will return the 
            original form.
            </summary>
            <param name="nt_path">The NT path to convert.</param>
            <returns>The converted path, or original if it can't be converted.</returns>
        </member>
        <member name="T:NtApiDotNet.NtKeyValue">
            <summary>
            Class representing a single Key value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Name">
            <summary>
            Name of the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Type">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Data">
            <summary>
            Raw data for the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.TitleIndex">
            <summary>
            Title index for the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.DataObject">
            <summary>
            Get the value as an object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKeyValue.ToString">
            <summary>
            Convert the value to a string
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:NtApiDotNet.NtKeyValue.ToObject">
            <summary>
            Convert value to an object
            </summary>
            <returns>The value as an object</returns>
        </member>
        <member name="T:NtApiDotNet.NtLdr">
            <summary>
            LDR static methods.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtLdr.GetProcedureAddress(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Get address of a procedure in a mapped image.
            </summary>
            <param name="dll_handle">The handle to the mapped image.</param>
            <param name="name">The name of the procedure to find.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The procedure address.</returns>
        </member>
        <member name="M:NtApiDotNet.NtLdr.GetProcedureAddress(System.IntPtr,System.String)">
            <summary>
            Get address of a procedure in a mapped image.
            </summary>
            <param name="dll_handle">The handle to the mapped image.</param>
            <param name="name">The name of the procedure to find.</param>
            <returns>The procedure address.</returns>
        </member>
        <member name="T:NtApiDotNet.NtMappedSection">
            <summary>
            Class representing a mapped section
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.Process">
            <summary>
            The process which the section is mapped into
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.ValidLength">
            <summary>
            The valid length of the mapped section from the current position.
            </summary>
            <remarks>This doesn't take into account the possibility of fragmented commits.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.FullPath">
            <summary>
            Get full path for mapped section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.Protection">
            <summary>
            Query the memory protection setting for this mapping.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.ImageSigningLevel">
            <summary>
            Get image signing level.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.ReleaseHandle">
            <summary>
            Release the internal handle
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.IsSameMapping(System.Int64,System.Boolean)">
            <summary>
            Checks if this mapped view represents the same file.
            </summary>
            <param name="address">The address to check.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if the mapped view represents the same file.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.IsSameMapping(System.Int64)">
            <summary>
            Checks if this mapped view represents the same file.
            </summary>
            <param name="address">The address to check.</param>
            <returns>True if the mapped view represents the same file.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.Detach(System.Int32)">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <param name="length">Specify a new length for the detached buffer. Must be &lt;= Length.</param>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="T:NtApiDotNet.GenericAccessRights">
            <summary>
            Generic access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.DuplicateObjectOptions">
            <summary>
            Options for duplicating objects.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.CloseSource">
            <summary>
            Close the original handle.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.SameAccess">
            <summary>
            Duplicate with the same access.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.SameAttributes">
            <summary>
            Duplicate with the same handle attributes.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectInformationClass">
            <summary>
            Information class for NtQueryObject
            </summary>
            <see cref="M:NtApiDotNet.NtSystemCalls.NtQueryObject(System.Runtime.InteropServices.SafeHandle,NtApiDotNet.ObjectInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Int32@)"/>
        </member>
        <member name="T:NtApiDotNet.ObjectNameInformation">
            <summary>
            Structure to return Object Name
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectBasicInformation">
            <summary>
            Structure to return Object basic information
            </summary>
        </member>
        <member name="T:NtApiDotNet.PoolType">
            <summary>
            Type of kernel pool used for object allocation
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectTypeInformation">
            <summary>
            Native structure used for getting type information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObjectWithDuplicate`2">
            <summary>
            A derived class to add some useful functions such as Duplicate
            </summary>
            <typeparam name="O">The derived type to use as return values</typeparam>
            <typeparam name="A">An enum which represents the access mask values for the type</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1,NtApiDotNet.AttributeFlags,System.Boolean)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <param name="attributes">Additional attributes for open.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1,System.Boolean)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateObject(NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate(`1,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate(`1)">
            <summary>
            Duplicate the object with specific access rights
            </summary>
            <param name="access">The access rights for the new handle</param>
            <returns>The duplicated object</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate(`1,System.Boolean)">
            <summary>
            Duplicate the object with specific access rights
            </summary>
            <param name="access">The access rights for the new handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate">
            <summary>
            Duplicate the object with same access rights
            </summary>
            <returns>The duplicated object</returns>
        </member>
        <member name="P:NtApiDotNet.NtObjectWithDuplicate`2.GrantedAccess">
            <summary>
            Get granted access for handle.
            </summary>
            <returns>Granted access</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.GetMaximumAccess(NtApiDotNet.NtToken)">
            <summary>
            Get the maximum permission access for this object based on a token
            and it's security descriptor.
            </summary>
            <param name="token">The token to check against.</param>
            <returns>Returns 0 if can't read the security descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.GetMaximumAccess">
            <summary>
            Get the maximum permission access for this object based on the current token
            and its security descriptor.
            </summary>
            <returns>Returns 0 if can't read the security descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.IsAccessGranted(`1)">
            <summary>
            Check if a specific set of access rights is granted
            </summary>
            <param name="access">The access rights to check</param>
            <returns>True if all access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.FromHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Create a new instance from a kernel handle
            </summary>
            <param name="handle">The kernel handle</param>
            <returns>The new typed instance</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.FromHandle(System.IntPtr,System.Boolean)">
            <summary>
            Create a new instance from a kernel handle
            </summary>
            <param name="handle">The kernel handle</param>
            <param name="owns_handle">True to own the handle.</param>
            <returns>The new typed instance</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.FromHandle(System.IntPtr)">
            <summary>
            Create a new instance from a kernel handle.
            </summary>
            <param name="handle">The kernel handle</param>
            <remarks>The call doesn't own the handle. The returned object can't be used to close the handle.</remarks>
            <returns>The new typed instance</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="attributes">The attribute flags for the new object.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="attributes">The attribute flags for the new object.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1)">
            <summary>
            Duplicate an instance from a process with a specified access rights.
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate.</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr,`1)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr)">
            <summary>
            Duplicate an instance from a process with same access rights.
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr)">
            <summary>
            Duplicate an instance from a process with same access rights
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from current process to an other process
            </summary>
            <param name="process">The destination process (with DupHandle access)</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,NtApiDotNet.SafeKernelObjectHandle,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from current process to an other process
            </summary>
            <param name="process">The destination process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,NtApiDotNet.SafeKernelObjectHandle,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from current process to an other process
            </summary>
            <param name="pid">The destination process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,NtApiDotNet.SafeKernelObjectHandle,`1)">
            <summary>
            Duplicate an instance from current process to an other process with a specified access rights.
            </summary>
            <param name="process">The destination process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate.</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,NtApiDotNet.SafeKernelObjectHandle,`1)">
            <summary>
            Duplicate an instance from current process to an other process
            </summary>
            <param name="pid">The destination process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Duplicate an instance from current process to an other process with same access rights.
            </summary>
            <param name="process">The destination process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess)">
            <summary>
            Duplicate an instance from current process to an other process with same access rights.
            </summary>
            <param name="process">The destination process (with DupHandle access)</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Duplicate an instance from current process to an other process with same access rights
            </summary>
            <param name="pid">The destination process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32)">
            <summary>
            Duplicate an instance from current process to an other process with same access rights
            </summary>
            <param name="pid">The destination process ID</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.NtProcess,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process to an other process
            </summary>
            <param name="src_process">The source process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_process">The destination process (with DupHandle access)</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,System.IntPtr,System.Int32,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process to an other process
            </summary>
            <param name="src_pid">The source process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_pid">The destination process ID</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.NtProcess,`1)">
            <summary>
            Duplicate an instance from a process to an other process with a specified access rights.
            </summary>
            <param name="src_process">The source process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_process">The destination process (with DupHandle access)</param>
            <param name="access">The access rights to duplicate.</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,System.IntPtr,System.Int32,`1)">
            <summary>
            Duplicate an instance from a process to an other process
            </summary>
            <param name="src_pid">The source process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_pid">The destination process ID</param>
            <param name="access">The access rights to duplicate with</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.NtProcess)">
            <summary>
            Duplicate an instance from a process to an other process with same access rights.
            </summary>
            <param name="src_process">The source process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_process">The destination process (with DupHandle access)</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateTo(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Duplicate an instance from a process to an other process with same access rights
            </summary>
            <param name="src_pid">The source process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="dst_pid">The destination process ID</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="T:NtApiDotNet.NtObjectWithDuplicateAndInfo`4">
            <summary>
            A derived class to add some useful functions such as Duplicate as well as generic Query and Set information methods.
            </summary>
            <typeparam name="O">The derived type to use as return values</typeparam>
            <typeparam name="A">An enum which represents the access mask values for the type</typeparam>
            <typeparam name="Q">An enum which represents the information class for query.</typeparam>
            <typeparam name="S">An enum which represents the information class for set.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.Query``1(`2,``0,System.Boolean)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.Query``1(`2,``0)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.Query``1(`2)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryBuffer``1(`2,``0,System.Boolean)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBuffer(`2,System.Byte[],System.Boolean)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBuffer(`2,System.Byte[])">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBuffer(`2)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBytes(`2,System.Byte[],System.Boolean)">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBytes(`2,System.Byte[])">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryRawBytes(`2)">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryBuffer``1(`2,``0)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryBuffer``1(`2)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.Set``1(`3,``0,System.Boolean)">
            <summary>
            Set a value to the object.
            </summary>
            <typeparam name="T">The type of structure to set.</typeparam>
            <param name="info_class">The information class to set.</param>
            <param name="value">The value to set. If you specify a SafeBuffer then it'll be passed directly.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.Set``1(`3,``0)">
            <summary>
            Set a value to the object.
            </summary>
            <typeparam name="T">The type of structure to set.</typeparam>
            <param name="info_class">The information class to set.</param>
            <param name="value">The value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.SetBuffer(`3,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Set a value to the object from a buffer.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="buffer">The value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.SetBuffer(`3,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Set a value to the object from a buffer..
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="buffer">The value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.SetBytes(`3,System.Byte[],System.Boolean)">
            <summary>
            Set a raw value to the object.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="value">The raw value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.SetBytes(`3,System.Byte[])">
            <summary>
            Set a raw value to the object.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="value">The raw value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.QueryInformation(`2,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.SetInformation(`3,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.GetMaximumBruteForceLength(`2)">
            <summary>
            Overriddable method to determine the maximum brute force length for query.
            </summary>
            <param name="info_class">Information class to key on if needs to return different sizes.</param>
            <returns>The maximum bytes to brute force. Returning 0 will disable brute force.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicateAndInfo`4.GetTrustReturnLength(`2)">
            <summary>
            Overridable method to determine if the return length shouldn't be trusted for this info class when querying a variable buffer.
            </summary>
            <param name="info_class">Information class to key on.</param>
            <returns>True to trust the return length when querying a variable buffer.</returns>
        </member>
        <member name="T:NtApiDotNet.PartialPeb">
            <summary>
            Partial definition of the PEB
            </summary>
        </member>
        <member name="T:NtApiDotNet.PartialPeb32">
            <summary>
            Partial definition of the PEB
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtResourceManager">
            <summary>
            Class to represent a transaction resource manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid,NtApiDotNet.ResourceManagerCreateOptions,System.String,System.Boolean)">
            <summary>
            Create a new resource manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Creation options flags.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <param name="description">Optional description.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid,NtApiDotNet.ResourceManagerCreateOptions,System.String)">
            <summary>
            Create a new resource manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Creation options flags.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <param name="description">Optional description.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid,NtApiDotNet.ResourceManagerCreateOptions,System.String,System.Boolean)">
            <summary>
            Create a new resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Creation options flags.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <param name="description">Optional description.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid,NtApiDotNet.ResourceManagerCreateOptions,System.String)">
            <summary>
            Create a new resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Creation options flags.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <param name="description">Optional description.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateVolatile(System.String,NtApiDotNet.NtObject,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid)">
            <summary>
            Create a new volatile resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateVolatile(System.String,NtApiDotNet.NtObject,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager)">
            <summary>
            Create a new volatile resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateVolatile(System.String,NtApiDotNet.NtObject,NtApiDotNet.NtTransactionManager)">
            <summary>
            Create a new volatile resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateVolatile(System.String,NtApiDotNet.NtTransactionManager)">
            <summary>
            Create a new volatile resource manager object.
            </summary>
            <param name="path">The path to the resource manager.</param>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateVolatile(NtApiDotNet.NtTransactionManager)">
            <summary>
            Create a new volatile resource manager object.
            </summary>
            <param name="transaction_manager">Optional transaction manager to assign the resource manager to.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid,System.Boolean)">
            <summary>
            Opens an existing resource manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction_manager">Transaction manager which contains the resource manager.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.ResourceManagerAccessRights,NtApiDotNet.NtTransactionManager,System.Guid)">
            <summary>
            Opens an existing resource manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction_manager">Transaction manager which contains the resource manager.</param>
            <param name="resource_manager_guid">Resource manager GUID.</param>
            <returns>The object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Recover(System.Boolean)">
            <summary>
            Recover the the transaction manager.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.Recover">
            <summary>
            Recover the the transaction manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.SetIoCompletion(NtApiDotNet.NtIoCompletion,System.IntPtr,System.Boolean)">
            <summary>
            Set an IO completion port on the resource manager.
            </summary>
            <param name="io_completion">The IO completion port.</param>
            <param name="completion_key">Associated completion key.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.SetIoCompletion(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Set an IO completion port on the resource manager.
            </summary>
            <param name="io_completion">The IO completion port.</param>
            <param name="completion_key">Associated completion key.</param>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetNotification(NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Get a notification synchronously.
            </summary>
            <param name="timeout">Optional timeout for getting the notification.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The transaction notification.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetNotification(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Get a notification synchronously.
            </summary>
            <param name="timeout">Optional timeout for getting the notification.</param>
            <returns>The transaction notification.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetNotification">
            <summary>
            Get a notification synchronously waiting indefinetly.
            </summary>
            <returns>The transaction notification.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.RegisterProtocolAddressInformation(System.Guid,System.Byte[],NtApiDotNet.RegisterProtocolCreateOptions,System.Boolean)">
            <summary>
            Register protocol information.
            </summary>
            <param name="protocol_id">The ID of the protocol to register.</param>
            <param name="protocol_information">An opaque protocol buffer.</param>
            <param name="create_options">Optional create options.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.RegisterProtocolAddressInformation(System.Guid,System.Byte[],NtApiDotNet.RegisterProtocolCreateOptions)">
            <summary>
            Register protocol information.
            </summary>
            <param name="protocol_id">The ID of the protocol to register.</param>
            <param name="protocol_information">An opaque protocol buffer.</param>
            <param name="create_options">Optional create options.</param>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.PropagationComplete(System.UInt32,System.Byte[],System.Boolean)">
            <summary>
            Complete propagation request.
            </summary>
            <param name="request_cookie">The cookie to identify the request.</param>
            <param name="request_buffer">An optional buffer to pass with the request.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.PropagationComplete(System.UInt32,System.Byte[])">
            <summary>
            Complete propagation request.
            </summary>
            <param name="request_cookie">The cookie to identify the request.</param>
            <param name="request_buffer">An optional buffer to pass with the request.</param>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.PropagationFailed(System.UInt32,NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Fail propagation request.
            </summary>
            <param name="request_cookie">The cookie to identify the request.</param>
            <param name="prop_status">Optional NT status code for the failure.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetAccessibleEnlistment(NtApiDotNet.ObjectAttributes,NtApiDotNet.EnlistmentAccessRights)">
            <summary>
            Get a list of all accessible enlistment objects owned by this resource manager.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The access for the enlistment objects.</param>
            <returns>The list of all accessible enlistment objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetAccessibleEnlistment(NtApiDotNet.EnlistmentAccessRights)">
            <summary>
            Get a list of all accessible enlistment objects owned by this resource manager.
            </summary>
            <param name="desired_access">The access for the enlistment objects.</param>
            <returns>The list of all accessible enlistment objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.GetAccessibleEnlistment">
            <summary>
            Get a list of all accessible resource manager objects owned by this transaction manager.
            </summary>
            <returns>The list of all accessible resource manager objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateEnlistment(NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtTransaction,NtApiDotNet.EnlistmentCreateOptions,NtApiDotNet.TransactionNotificationMask,System.IntPtr,System.Boolean)">
            <summary>
            Create an enlistment in this resource manager.
            </summary>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction">The transaction to enlist.</param>
            <param name="create_options">Optional create options.</param>
            <param name="notification_mask">Notification mask.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The created enlistment and NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateEnlistment(NtApiDotNet.EnlistmentAccessRights,NtApiDotNet.NtTransaction,NtApiDotNet.EnlistmentCreateOptions,NtApiDotNet.TransactionNotificationMask,System.IntPtr)">
            <summary>
            Create an enlistment in this resource manager.
            </summary>
            <param name="desired_access">Desired access for the handle</param>
            <param name="transaction">The transaction to enlist.</param>
            <param name="create_options">Optional create options.</param>
            <param name="notification_mask">Notification mask.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <returns>The created enlistment.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateEnlistment(NtApiDotNet.NtTransaction,NtApiDotNet.TransactionNotificationMask,System.IntPtr)">
            <summary>
            Create an enlistment in this resource manager.
            </summary>
            <param name="transaction">The transaction to enlist.</param>
            <param name="notification_mask">Notification mask.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <returns>The created enlistment.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.CreateEnlistment(NtApiDotNet.NtTransaction,System.IntPtr)">
            <summary>
            Create an enlistment in this resource manager.
            </summary>
            <param name="transaction">The transaction to enlist.</param>
            <param name="enlistment_key">Enlistment key returned during notification.</param>
            <returns>The created enlistment.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.QueryInformation(NtApiDotNet.ResourceManagerInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResourceManager.SetInformation(NtApiDotNet.ResourceManagerInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtResourceManager.ResourceManagerId">
            <summary>
            Get the resource manager ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtResourceManager.Description">
            <summary>
            Get the description for the resource manager.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtResult`1">
            <summary>
            A structure to return the result of an NT system call with status.
            This allows a function to return both a status code and a result
            without having to resort to out parameters.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.Status">
            <summary>
            The NT status code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.Result">
            <summary>
            The result of the NT call.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.GetResultOrThrow">
            <summary>
            Get the result object or throw an exception if status code is an error.
            </summary>
            <returns>The result NT result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status code is an error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.GetResultOrDefault(`0)">
            <summary>
            Get the result object or a default value if an error occurred.
            </summary>
            <param name="default_value">The default value to return.</param>
            <returns>The result or the default if an error occurred.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.GetResultOrDefault">
            <summary>
            Get the result object or a default value if an error occurred.
            </summary>
            <returns>The result or the default if an error occurred.</returns>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.IsSuccess">
            <summary>
            Is the result successful.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map result to a different type.
            </summary>
            <typeparam name="S">The different type to map to.</typeparam>
            <param name="map_func">A function to map the result.</param>
            <returns>The mapped result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Cast``1">
            <summary>
            Cast result to a different type.
            </summary>
            <typeparam name="S">The different type to cast to.</typeparam>
            <returns>The mapped result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Dispose">
            <summary>
            Dispose result.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SecurityInformation">
            <summary>
            Security information class for security descriptors.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SidNameSource">
            <summary>
            Source for a SID name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SidName">
            <summary>
            Represents a name for a SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SidName.Name">
            <summary>
            The name of the SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SidName.Source">
            <summary>
            The source of name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SemaphoreAccessRights">
            <summary>
            Semaphore access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ApcCallback">
            <summary>
            Delegate for APC callbacks.
            </summary>
            <param name="NormalContext">Context parameter.</param>
            <param name="SystemArgument1">System argument 1.</param>
            <param name="SystemArgument2">System argument 2.</param>
        </member>
        <member name="T:NtApiDotNet.NtTransactionManager">
            <summary>
            Class to represent a kernel transaction manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionManagerAccessRights,System.String,NtApiDotNet.TransactionManagerCreateOptions,System.Int32,System.Boolean)">
            <summary>
            Create a new transaction manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="create_options">Creation options flags.</param>
            <param name="commit_strength">Commit strength, set to 0.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionManagerAccessRights,System.String,NtApiDotNet.TransactionManagerCreateOptions,System.Int32)">
            <summary>
            Create a new transaction manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="create_options">Creation options flags.</param>
            <param name="commit_strength">Commit strength, set to 0.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights,System.String,NtApiDotNet.TransactionManagerCreateOptions,System.Boolean)">
            <summary>
            Create a new transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="create_options">Creation options flags.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights,System.String,NtApiDotNet.TransactionManagerCreateOptions)">
            <summary>
            Create a new transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="create_options">Creation options flags.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateVolatile(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights)">
            <summary>
            Create a new volatile transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateVolatile(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a new volatile transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateVolatile(System.String)">
            <summary>
            Create a new volatile transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateVolatile">
            <summary>
            Create a new volatile transaction manager object.
            </summary>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionManagerAccessRights,System.String,System.Nullable{System.Guid},NtApiDotNet.TransactionManagerOpenOptions,System.Boolean)">
            <summary>
            Open a existing transaction manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="tm_identity">Identity of the transaction manager.</param>
            <param name="open_options">Open options flags.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionManagerAccessRights,System.String,System.Nullable{System.Guid},NtApiDotNet.TransactionManagerOpenOptions)">
            <summary>
            Open a existing transaction manager object.
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="tm_identity">Identity of the transaction manager.</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="open_options">Open options flags.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights,System.String,System.Nullable{System.Guid},NtApiDotNet.TransactionManagerOpenOptions,System.Boolean)">
            <summary>
            Open an existing transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="tm_identity">Identity of the transaction manager.</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="open_options">Open options flags.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights,System.String,System.Nullable{System.Guid},NtApiDotNet.TransactionManagerOpenOptions)">
            <summary>
            Open an existing transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="tm_identity">Identity of the transaction manager.</param>
            <param name="log_filename">The CLFS log file to create if not volatile.</param>
            <param name="open_options">Open options flags.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionManagerAccessRights)">
            <summary>
            Open an existing transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open an existing transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <param name="root">The root if path is relative.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Open(System.String)">
            <summary>
            Open an existing transaction manager object.
            </summary>
            <param name="path">The path to the transaction manager.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rename(System.String,System.Guid,System.Boolean)">
            <summary>
            Rename transaction manager object. The new identity can be queried with the Identity property on the object.
            </summary>
            <param name="logpath">The path to the transaction log file.</param>
            <param name="identity">The existing transaction manager identity.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleTransactionManager(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionManagerAccessRights,NtApiDotNet.TransactionManagerOpenOptions)">
            <summary>
            Get a list of all accessible transaction manager objects.
            </summary>
            <param name="object_attributes">Object attributes for opened handle.</param>
            <param name="desired_access">The access for the transaction manager objects.</param>
            <param name="options">Open options.</param>
            <returns>The list of all accessible transaction manager objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleTransactionManager(NtApiDotNet.TransactionManagerAccessRights)">
            <summary>
            Get a list of all accessible transaction manager objects.
            </summary>
            <param name="desired_access">The access for the transaction manager objects.</param>
            <returns>The list of all accessible transaction manager objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleTransactionManager">
            <summary>
            Get a list of all accessible transaction manager objects.
            </summary>
            <returns>The list of all accessible transaction manager objects.</returns>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.Identity">
            <summary>
            Get the Transaction Manager identity.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.VirtualClock">
            <summary>
            Get the Transaction Manager virtual clock.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.LogIdentity">
            <summary>
            Get the Transaction Manager log identity.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.LogPath">
            <summary>
            Get the Transaction Manager log path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.LastRecoveredLsn">
            <summary>
            Get Transaction Manager last recovered Log Sequence Number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransactionManager.Volatile">
            <summary>
            Get whether the transaction manager is volatile.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rename(System.Boolean)">
            <summary>
            Rename transaction manager object. The new identity can be queried with the Identity property on the object.
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rename">
            <summary>
            Rename transaction manager object. The new identity can be queried with the Identity property on the object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Recover(System.Boolean)">
            <summary>
            Recover the transaction manager.
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Recover">
            <summary>
            Recover the transaction manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rollforward(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Rollforward the transaction manager.
            </summary>
            <param name="virtual_clock">Optional virtual block value to rollforward to.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rollforward(System.Boolean)">
            <summary>
            Rollforward the transaction manager.
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rollforward(System.Nullable{System.Int64})">
            <summary>
            Rollforward the transaction manager.
            </summary>
            <param name="virtual_clock">Optional virtual block value to rollforward to.</param>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.Rollforward">
            <summary>
            Rollforward the transaction manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateResourceManager(System.Guid,NtApiDotNet.ResourceManagerCreateOptions,System.Boolean)">
            <summary>
            Create a resource manager for this transaction manager.
            </summary>
            <param name="resource_manager_guid">The resource manager GUID to assign.</param>
            <param name="create_options">Creation options.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The resource manager and NT status.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateResourceManager(System.Guid,NtApiDotNet.ResourceManagerCreateOptions)">
            <summary>
            Create a resource manager for this transaction manager.
            </summary>
            <param name="resource_manager_guid">The resource manager GUID to assign.</param>
            <param name="create_options">Creation options.</param>
            <returns>The resource manager .</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateResourceManagerVolatile(System.Guid)">
            <summary>
            Create a resource manager for this transaction manager.
            </summary>
            <param name="resource_manager_guid">The resource manager GUID to assign.</param>
            <returns>The resource manager.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.CreateResourceManagerVolatile">
            <summary>
            Create a volatile resource manager for this transaction manager with a auto-generated GUID.
            </summary>
            <returns>The resource manager.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.QueryInformation(NtApiDotNet.TransactionManagerInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.SetInformation(NtApiDotNet.TransactionManagerInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleTransaction(NtApiDotNet.TransactionAccessRights)">
            <summary>
            Get a list of all accessible transaction objects owned by this transaction manager.
            </summary>
            <param name="desired_access">The access for the transaction objects.</param>
            <returns>The list of all accessible transaction objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleTransaction">
            <summary>
            Get a list of all accessible transaction objects owned by this transaction manager.
            </summary>
            <returns>The list of all accessible transaction objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleResourceManager(NtApiDotNet.ObjectAttributes,NtApiDotNet.ResourceManagerAccessRights)">
            <summary>
            Get a list of all accessible resource manager objects owned by this transaction manager.
            </summary>
            <param name="object_attributes">Object attributes for opened handle.</param>
            <param name="desired_access">The access for the resource manager objects.</param>
            <returns>The list of all accessible resource manager objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleResourceManager(NtApiDotNet.ResourceManagerAccessRights)">
            <summary>
            Get a list of all accessible resource manager objects owned by this transaction manager.
            </summary>
            <param name="desired_access">The access for the resource manager objects.</param>
            <returns>The list of all accessible resource manager objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManager.GetAccessibleResourceManager">
            <summary>
            Get a list of all accessible resource manager objects owned by this transaction manager.
            </summary>
            <returns>The list of all accessible resource manager objects.</returns>
        </member>
        <member name="T:NtApiDotNet.NtTransactionManagerUtils">
            <summary>
            General utilities for the kernel transaction manager.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.EnumerateTransactionObjects(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.KtmObjectType)">
            <summary>
            Enumerate transaction objects of a specific type from a root handle.
            </summary>
            <param name="root_object_handle">The root handle to enumearate from.</param>
            <param name="query_type">The type of object to query.</param>
            <returns>The list of enumerated transaction object GUIDs.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.EnumerateTransactionObjects(NtApiDotNet.KtmObjectType)">
            <summary>
            Enumerate all transaction objects of a specific type.
            </summary>
            <param name="query_type">The type of object to query.</param>
            <returns>The list of enumerated transaction object GUIDs.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.FreezeTransactions(NtApiDotNet.NtWaitTimeout,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Freeze all transactions. Needs SeRestorePrivilege.
            </summary>
            <param name="freeze_timeout">The freeze wait timeout.</param>
            <param name="thaw_timeout">The thaw wait timeout.</param>
            <param name="throw_on_error">Throw exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.FreezeTransactions(NtApiDotNet.NtWaitTimeout,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Freeze all transactions. Needs SeRestorePrivilege.
            </summary>
            <param name="freeze_timeout">The freeze wait timeout.</param>
            <param name="thaw_timeout">The thaw wait timeout.</param>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.ThawTransactions(System.Boolean)">
            <summary>
            Thaw transactions. Needs SeRestorePrivilege.
            </summary>
            <param name="throw_on_error">Throw exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransactionManagerUtils.ThawTransactions">
            <summary>
            Thaw transactions. Needs SeRestorePrivilege.
            </summary>
            <returns>The NT status code.</returns>
        </member>
        <member name="T:NtApiDotNet.ReparseTag">
            <summary>
            Reparse Tag value.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ReparseBuffer">
            <summary>
            Base class for a reparse buffer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ReparseBuffer.Tag">
            <summary>
            The reparse tag in the buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.#ctor(NtApiDotNet.ReparseTag)">
            <summary>
            Constructor.
            </summary>
            <param name="tag">The reparse tag to assign.</param>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.FromByteArray(System.Byte[],System.Boolean)">
            <summary>
            Get a reparse buffer from a byte array.
            </summary>
            <param name="ba">The byte array to parse</param>
            <param name="opaque_buffer">True to return an opaque buffer if 
            the tag isn't known, otherwise try and parse as a generic buffer</param>
            <returns>The reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.ToByteArray">
            <summary>
            Convert reparse buffer to a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NtApiDotNet.ReparseBuffer.IsMicrosoft">
            <summary>
            Get if a reparse tag is a Microsoft defined one.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ReparseBuffer.IsNameSurrogate">
            <summary>
            Get if a reparse tag is a name surrogate.
            </summary>
            <returns>True if it's a surrogate reparse tag.</returns>
        </member>
        <member name="P:NtApiDotNet.ReparseBuffer.IsTagDirectory">
            <summary>
            Get if a reparse tag is a directory.
            </summary>
        </member>
        <member name="T:NtApiDotNet.GenericReparseBuffer">
            <summary>
            Generic GUID reparse buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.GenericReparseBuffer.#ctor(NtApiDotNet.ReparseTag,System.Guid,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="tag">The reparse tag.</param>
            <param name="guid">The reparse GUID</param>
            <param name="data">Additional reparse data.</param>
        </member>
        <member name="P:NtApiDotNet.GenericReparseBuffer.Guid">
            <summary>
            The reparse GUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.GenericReparseBuffer.Data">
            <summary>
            Additional reparse data.
            </summary>
        </member>
        <member name="M:NtApiDotNet.GenericReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="T:NtApiDotNet.OpaqueReparseBuffer">
            <summary>
            Reparse buffer with an opaque data blob.
            </summary>
        </member>
        <member name="M:NtApiDotNet.OpaqueReparseBuffer.#ctor(NtApiDotNet.ReparseTag,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="tag">The reparse tag.</param>
            <param name="data">The opaque data blob.</param>
        </member>
        <member name="P:NtApiDotNet.OpaqueReparseBuffer.Data">
            <summary>
            The opaque data blob.
            </summary>
        </member>
        <member name="M:NtApiDotNet.OpaqueReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="M:NtApiDotNet.OpaqueReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="T:NtApiDotNet.MountPointReparseBuffer">
            <summary>
            Reparse buffer for an NTFS mount point.
            </summary>
        </member>
        <member name="M:NtApiDotNet.MountPointReparseBuffer.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="substitution_name">Substitution name to reparse to when accessing mount point.</param>
            <param name="print_name">Printable name for the mount point.</param>
        </member>
        <member name="P:NtApiDotNet.MountPointReparseBuffer.SubstitutionName">
            <summary>
            Substitution name to reparse to when accessing mount point.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MountPointReparseBuffer.PrintName">
            <summary>
            Printable name for the mount point.
            </summary>
        </member>
        <member name="M:NtApiDotNet.MountPointReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:NtApiDotNet.MountPointReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="T:NtApiDotNet.SymlinkReparseBufferFlags">
            <summary>
            Symlink flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.SymlinkReparseBufferFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NtApiDotNet.SymlinkReparseBufferFlags.Relative">
            <summary>
            Substitution name is relative to the symlink.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SymlinkReparseBuffer">
            <summary>
            Reparse buffer for an NTFS symlink.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SymlinkReparseBuffer.#ctor(System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="substitution_name">Substitution name to reparse to when accessing symlink.</param>
            <param name="print_name">Printable name for the symlink.</param>
            <param name="flags">Symlink flags.</param>
        </member>
        <member name="M:NtApiDotNet.SymlinkReparseBuffer.#ctor(System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="substitution_name">Substitution name to reparse to when accessing symlink.</param>
            <param name="print_name">Printable name for the symlink.</param>
            <param name="flags">Symlink flags.</param>
            <param name="global">Create a global symlink rather than a normal symlink.</param>
        </member>
        <member name="P:NtApiDotNet.SymlinkReparseBuffer.SubstitutionName">
            <summary>
            Substitution name to reparse to when accessing symlink.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SymlinkReparseBuffer.PrintName">
            <summary>
            Printable name for the symlink.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SymlinkReparseBuffer.Flags">
            <summary>
            Symlink flags.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SymlinkReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:NtApiDotNet.SymlinkReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="T:NtApiDotNet.ExecutionAliasReparseBuffer">
            <summary>
            Reparse buffer for an execution alias.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExecutionAliasReparseBuffer.Version">
            <summary>
            The execution alias version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExecutionAliasReparseBuffer.PackageName">
            <summary>
            The name of the application package.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExecutionAliasReparseBuffer.EntryPoint">
            <summary>
            The entry point in the package.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExecutionAliasReparseBuffer.Target">
            <summary>
            The target executable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.ExecutionAliasReparseBuffer.Flags">
            <summary>
            Flags for the alias.
            </summary>
        </member>
        <member name="M:NtApiDotNet.ExecutionAliasReparseBuffer.#ctor(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="version">The execution alias version.</param>
            <param name="package_name">The name of the application package.</param>
            <param name="entry_point">The entry point in the package.</param>
            <param name="target">The target executable.</param>
            <param name="flags">Flags for the alias.</param>
        </member>
        <member name="M:NtApiDotNet.ExecutionAliasReparseBuffer.GetBuffer">
            <summary>
            Get reparse buffer data as a byte array (not including header).
            </summary>
            <returns>The reparse buffer data.</returns>
        </member>
        <member name="M:NtApiDotNet.ExecutionAliasReparseBuffer.ParseBuffer(System.Int32,System.IO.BinaryReader)">
            <summary>
            Function to initialize this class by parsing the reparse buffer data (not including header).
            </summary>
            <param name="data_length">The length of the data to read.</param>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="T:NtApiDotNet.NtAlpc">
            <summary>
            Class to represent an ALPC port.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Disconnect(NtApiDotNet.AlpcDisconnectPortFlags,System.Boolean)">
            <summary>
            Disconnect this port.
            </summary>
            <param name="flags">Disconection flags.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Disconnect(NtApiDotNet.AlpcDisconnectPortFlags)">
            <summary>
            Disconnect this port.
            </summary>
            <param name="flags">Disconection flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Disconnect">
            <summary>
            Disconnect this port.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CancelMessage(NtApiDotNet.AlpcCancelMessageFlags,NtApiDotNet.AlpcContextMessageAttribute,System.Boolean)">
            <summary>
            Cancel a message based on a context attribute.
            </summary>
            <param name="flags">Cancellation flags.</param>
            <param name="context">The context attributes.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CancelMessage(NtApiDotNet.AlpcCancelMessageFlags,NtApiDotNet.AlpcContextMessageAttribute)">
            <summary>
            Cancel a message based on a context attribute.
            </summary>
            <param name="flags">Cancellation flags.</param>
            <param name="context">The context attributes.</param>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CancelMessage(NtApiDotNet.AlpcContextMessageAttribute)">
            <summary>
            Cancel a message based on a context attribute.
            </summary>
            <param name="context">The context attributes.</param>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.SendReceive(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Send and receive messages on an ALPC port.
            </summary>
            <param name="flags">Send/Receive flags.</param>
            <param name="send_message">The message to send. Optional.</param>
            <param name="send_attributes">The attributes to send with the message. Optional.</param>
            <param name="receive_message">The message to receive. Optional.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.SendReceive(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Send and receive messages on an ALPC port.
            </summary>
            <param name="flags">Send/Receive flags.</param>
            <param name="send_message">The message to send. Optional.</param>
            <param name="send_attributes">The attributes to send with the message. Optional.</param>
            <param name="receive_message">The message to receive. Optional.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Send(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Send a message on an ALPC port.
            </summary>
            <param name="flags">Send flags.</param>
            <param name="send_message">The message to send. Optional.</param>
            <param name="send_attributes">The attributes to send with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Send(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Send a message on an ALPC port.
            </summary>
            <param name="flags">Send flags.</param>
            <param name="send_message">The message to send. Optional.</param>
            <param name="send_attributes">The attributes to send with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Send(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage)">
            <summary>
            Send a message on an ALPC port.
            </summary>
            <param name="flags">Send flags.</param>
            <param name="send_message">The message to send. Optional.</param>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive(NtApiDotNet.AlpcMessageFlags,System.Int32,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_length">The maximum length to receive.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The received message.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive(NtApiDotNet.AlpcMessageFlags,System.Int32,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_length">The maximum length to receive.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <returns>The received message.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive(NtApiDotNet.AlpcMessageFlags,System.Int32,NtApiDotNet.AlpcReceiveMessageAttributes)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_length">The maximum length to receive.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <returns>The received message.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive(NtApiDotNet.AlpcMessageFlags,System.Int32)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_length">The maximum length to receive.</param>
            <returns>The received message.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive``1(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The received message.</returns>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
            <typeparam name="T">The type of structure to receive.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive``1(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <param name="timeout">Time out for the send/receive.</param>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
            <typeparam name="T">The type of structure to receive.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive``1(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcReceiveMessageAttributes)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <param name="receive_attributes">The attributes to receive with the message. Optional.</param>
            <remarks>The attribute parameters will be repopulated with the attribute results.</remarks>
            <typeparam name="T">The type of structure to receive.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.Receive``1(NtApiDotNet.AlpcMessageFlags)">
            <summary>
            Receive a message on an ALPC port.
            </summary>
            <param name="flags">Receive flags.</param>
            <typeparam name="T">The type of structure to receive.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientOfPort(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcImpersonationClientOfPortFlags,NtApiDotNet.SecurityImpersonationLevel,System.Boolean)">
            <summary>
            Impersonate client of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <param name="flags">Impersonation flags.</param>
            <param name="required_impersonation_level">Required impersonation level. Need to set RequiredImpersonationLevel flag as well.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientOfPort(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcImpersonationClientOfPortFlags,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate client of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <param name="flags">Impersonation flags.</param>
            <param name="required_impersonation_level">Required impersonation level. Need to set RequiredImpersonationLevel flag as well.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientOfPort(NtApiDotNet.AlpcMessage)">
            <summary>
            Impersonate client of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientContainerOfPort(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcImpersonateClientContainerOfPortFlags,System.Boolean)">
            <summary>
            Impersonate client container of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <param name="flags">Impersonation flags.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientContainerOfPort(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcImpersonateClientContainerOfPortFlags)">
            <summary>
            Impersonate client container of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <param name="flags">Impersonation flags.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.ImpersonateClientContainerOfPort(NtApiDotNet.AlpcMessage)">
            <summary>
            Impersonate client container of port for a message.
            </summary>
            <param name="message">The message send by the client.</param>
            <returns>Thread impersonation context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderProcess(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcOpenSenderProcessFlags,NtApiDotNet.ProcessAccessRights,NtApiDotNet.ObjectAttributes,System.Boolean)">
            <summary>
            Open the process of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="flags">Optional flags. Currently none defined.</param>
            <param name="desired_access">The desired access for the process.</param>
            <param name="object_attributes">Optional object attributes.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened process object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderProcess(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcOpenSenderProcessFlags,NtApiDotNet.ProcessAccessRights,NtApiDotNet.ObjectAttributes)">
            <summary>
            Open the process of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="flags">Optional flags. Currently none defined.</param>
            <param name="desired_access">The desired access for the process.</param>
            <param name="object_attributes">Optional object attributes.</param>
            <returns>The opened process object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderProcess(NtApiDotNet.AlpcMessage,NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open the process of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="desired_access">The desired access for the process.</param>
            <returns>The opened process object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderProcess(NtApiDotNet.AlpcMessage)">
            <summary>
            Open the process of the message sender with maximum privileges.
            </summary>
            <param name="message">The sent message.</param>
            <returns>The opened process object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderThread(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcOpenSenderThreadFlags,NtApiDotNet.ThreadAccessRights,NtApiDotNet.ObjectAttributes,System.Boolean)">
            <summary>
            Open the thread of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="flags">Optional flags. Currently none defined.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <param name="object_attributes">Optional object attributes.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened thread object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderThread(NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcOpenSenderThreadFlags,NtApiDotNet.ThreadAccessRights,NtApiDotNet.ObjectAttributes)">
            <summary>
            Open the thread of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="flags">Optional flags. Currently none defined.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <param name="object_attributes">Optional object attributes.</param>
            <returns>The opened thread object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderThread(NtApiDotNet.AlpcMessage,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Open the thread of the message sender.
            </summary>
            <param name="message">The sent message.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The opened thread object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.OpenSenderThread(NtApiDotNet.AlpcMessage)">
            <summary>
            Open the thread of the message sender with maximum privileges.
            </summary>
            <param name="message">The sent message.</param>
            <returns>The opened thread object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.AssociateCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr,System.Boolean)">
            <summary>
            Associate an IO completion port with this ALPC port.
            </summary>
            <param name="io_completion">The IO completion object.</param>
            <param name="completion_key">Optional completion key.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.AssociateCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Associate an IO completion port with this ALPC port.
            </summary>
            <param name="io_completion">The IO completion object.</param>
            <param name="completion_key">Optional completion key.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.IsConnectedSid(NtApiDotNet.Sid,System.Boolean)">
            <summary>
            Check if the current SID matches the connected SID.
            </summary>
            <param name="sid">The SID to compare.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if the connected SID matches the specified SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.IsConnectedSid(NtApiDotNet.Sid)">
            <summary>
            Check if the current SID matches the connected SID.
            </summary>
            <param name="sid">The SID to compare.</param>
            <returns>True if the connected SID matches the specified SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreatePortSection(NtApiDotNet.AlpcCreatePortSectionFlags,NtApiDotNet.NtSection,System.Int64,System.Boolean)">
            <summary>
            Create a new port section.
            </summary>
            <param name="flags">Flags for the port section.</param>
            <param name="section">Optional backing section.</param>
            <param name="section_size">Size of the section to create.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created port section.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreatePortSection(NtApiDotNet.AlpcCreatePortSectionFlags,NtApiDotNet.NtSection,System.Int64)">
            <summary>
            Create a new port section.
            </summary>
            <param name="flags">Flags for the port section.</param>
            <param name="section">Optional backing section.</param>
            <param name="section_size">Size of the section to create.</param>
            <returns>The created port section.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreatePortSection(NtApiDotNet.AlpcCreatePortSectionFlags,System.Int64)">
            <summary>
            Create a new port section.
            </summary>
            <param name="flags">Flags for the port section.</param>
            <param name="section_size">Size of the section to create.</param>
            <returns>The created port section.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreatePortSection(System.Int64)">
            <summary>
            Create a new port section.
            </summary>
            <param name="section_size">Size of the section to create.</param>
            <returns>The created port section.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.GetHandleInformation(NtApiDotNet.AlpcMessage,System.Int32,System.Boolean)">
            <summary>
            Get a handle entry for a message.
            </summary>
            <param name="index">The handle index to get.</param>
            <param name="message">The associated message.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The ALPC handle entry.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.GetHandleInformation(NtApiDotNet.AlpcMessage,System.Int32)">
            <summary>
            Get a handle entry for a message.
            </summary>
            <param name="index">The handle index to get.</param>
            <param name="message">The associated message.</param>
            <returns>The ALPC handle entry.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreateSecurityContext(NtApiDotNet.AlpcCreateSecurityContextFlags,NtApiDotNet.SecurityQualityOfService,System.Boolean)">
            <summary>
            Create a security context.
            </summary>
            <param name="flags">Flags for the creation.</param>
            <param name="security_quality_of_service">Security quality of service.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created security context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreateSecurityContext(NtApiDotNet.AlpcCreateSecurityContextFlags,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Create a security context.
            </summary>
            <param name="flags">Flags for the creation.</param>
            <param name="security_quality_of_service">Security quality of service.</param>
            <returns>The created security context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreateSecurityContext(NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Create a security context.
            </summary>
            <param name="security_quality_of_service">Security quality of service.</param>
            <returns>The created security context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.CreateSecurityContext">
            <summary>
            Create a security context.
            </summary>
            <returns>The created security context.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.QueryInformation(NtApiDotNet.AlpcPortInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpc.SetInformation(NtApiDotNet.AlpcPortInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtAlpc.Flags">
            <summary>
            Port flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtAlpc.SequenceNumber">
            <summary>
            Port sequence number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtAlpc.PortContext">
            <summary>
            Port context.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtAlpcClient">
            <summary>
            Class to represent an ALPC client port.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(System.String,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,NtApiDotNet.AlpcMessageFlags,NtApiDotNet.Sid,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_name">The path to the port.</param>
            <param name="object_attributes">Object attributes for the handle. Optional.</param>
            <param name="port_attributes">Attributes for the port. Optional.</param>
            <param name="flags">Send flags for the initial connection message.</param>
            <param name="required_server_sid">Required SID for the server.</param>
            <param name="connection_message">Initial connection message.</param>
            <param name="out_message_attributes">Outbound message attributes.</param>
            <param name="in_message_attributes">Inbound message atributes.</param>
            <param name="timeout">Connect timeout.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The connected ALPC port.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(System.String,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,NtApiDotNet.AlpcMessageFlags,NtApiDotNet.Sid,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_name">The path to the port.</param>
            <param name="object_attributes">Object attributes for the handle. Optional.</param>
            <param name="port_attributes">Attributes for the port. Optional.</param>
            <param name="flags">Send flags for the initial connection message.</param>
            <param name="required_server_sid">Required SID for the server.</param>
            <param name="connection_message">Initial connection message.</param>
            <param name="out_message_attributes">Outbound message attributes.</param>
            <param name="in_message_attributes">Inbound message atributes.</param>
            <param name="timeout">Connect timeout.</param>
            <returns>The connected ALPC port.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(System.String,NtApiDotNet.AlpcPortAttributes)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_name">The name of the port to connect to.</param>
            <param name="port_attributes">Attributes for the port.</param>
            <returns>The connected ALPC port object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,NtApiDotNet.AlpcMessageFlags,NtApiDotNet.SecurityDescriptor,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_object_attributes">Object attribute for the port name.</param>
            <param name="object_attributes">Object attributes for the handle. Optional.</param>
            <param name="port_attributes">Attributes for the port. Optional.</param>
            <param name="flags">Send flags for the initial connection message.</param>
            <param name="server_security_requirements">Required security descriptor for the server.</param>
            <param name="connection_message">Initial connection message.</param>
            <param name="out_message_attributes">Outbound message attributes.</param>
            <param name="in_message_attributes">Inbound message atributes.</param>
            <param name="timeout">Connect timeout.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The connected ALPC port.</returns>
            <remarks>Only available on Windows 8+.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,NtApiDotNet.AlpcMessageFlags,NtApiDotNet.SecurityDescriptor,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,NtApiDotNet.AlpcReceiveMessageAttributes,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_object_attributes">Object attribute for the port name.</param>
            <param name="object_attributes">Object attributes for the handle. Optional.</param>
            <param name="port_attributes">Attributes for the port. Optional.</param>
            <param name="flags">Send flags for the initial connection message.</param>
            <param name="server_security_requirements">Required security descriptor for the server.</param>
            <param name="connection_message">Initial connection message.</param>
            <param name="out_message_attributes">Outbound message attributes.</param>
            <param name="in_message_attributes">Inbound message atributes.</param>
            <param name="timeout">Connect timeout.</param>
            <returns>The connected ALPC port.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtAlpcClient.Connect(NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes)">
            <summary>
            Connect to an ALPC port.
            </summary>
            <param name="port_object_attributes">Object attribute for the port name.</param>
            <param name="port_attributes">Attributes for the port.</param>
            <returns>The connected ALPC port object.</returns>
        </member>
        <member name="T:NtApiDotNet.NtAlpcServer">
            <summary>
            Class to represent an ALPC server port.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,System.Boolean)">
            <summary>
            Create an ALPC port.
            </summary>
            <param name="object_attributes">The object attributes for the port.</param>
            <param name="port_attributes">The attributes for the port.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes)">
            <summary>
            Create an ALPC port.
            </summary>
            <param name="object_attributes">The object attributes for the port.</param>
            <param name="port_attributes">The attributes for the port.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.Create(System.String,NtApiDotNet.AlpcPortAttributes)">
            <summary>
            Create an ALPC port.
            </summary>
            <param name="port_name">The name of the port to create.</param>
            <param name="port_attributes">The attributes for the port.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.AcceptConnectPort(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,System.IntPtr,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,System.Boolean,System.Boolean)">
            <summary>
            Accept a new connection on a port.
            </summary>
            <param name="flags">The message send flags.</param>
            <param name="object_attributes">Object attributes. Optional.</param>
            <param name="port_attributes">The attributes for the port.</param>
            <param name="port_context">Port context. Optional.</param>
            <param name="connection_request">Connect request message.</param>
            <param name="connection_message_attributes">Connect request attributes.</param>
            <param name="accept_connection">True to accept the connection.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The accepted port.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.AcceptConnectPort(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.ObjectAttributes,NtApiDotNet.AlpcPortAttributes,System.IntPtr,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,System.Boolean)">
            <summary>
            Accept a new connection on a port.
            </summary>
            <param name="flags">The message send flags.</param>
            <param name="object_attributes">Object attributes. Optional.</param>
            <param name="port_attributes">The attributes for the port.</param>
            <param name="port_context">Port context. Optional.</param>
            <param name="connection_request">Connect request message.</param>
            <param name="connection_message_attributes">Connect request attributes.</param>
            <param name="accept_connection">True to accept the connection.</param>
            <returns>The accepted port.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAlpcServer.AcceptConnectPort(NtApiDotNet.AlpcMessageFlags,NtApiDotNet.AlpcMessage,NtApiDotNet.AlpcSendMessageAttributes,System.Boolean)">
            <summary>
            Accept a new connection on a port.
            </summary>
            <param name="flags">The message send flags.</param>
            <param name="connection_request">Connect request message.</param>
            <param name="connection_message_attributes">Connect request attributes.</param>
            <param name="accept_connection">True to accept the connection.</param>
            <returns>The accepted port.</returns>
        </member>
        <member name="T:NtApiDotNet.NtAtom">
            <summary>
            Class to handle NT atoms
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Add(System.String,NtApiDotNet.AddAtomFlags,System.Boolean)">
            <summary>
            Add an atom name
            </summary>
            <param name="name">The name to add</param>
            <param name="flags">Flags for the add.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>A reference to the atom</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Add(System.String,NtApiDotNet.AddAtomFlags)">
            <summary>
            Add an atom name
            </summary>
            <param name="name">The name to add</param>
            <param name="flags">Flags for the add.</param>
            <returns>A reference to the atom</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Add(System.String,System.Boolean)">
            <summary>
            Add an atom name
            </summary>
            <param name="name">The name to add</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>A reference to the atom</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Add(System.String)">
            <summary>
            Add an atom name
            </summary>
            <param name="name">The name to add</param>
            <returns>A reference to the atom</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Find(System.String,System.Boolean)">
            <summary>
            Find an atom by name.
            </summary>
            <param name="name">The name of the atom.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The found atom.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Find(System.String)">
            <summary>
            Find an atom by name.
            </summary>
            <param name="name">The name of the atom.</param>
            <returns>The found atom.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.GetAtoms">
            <summary>
            Enumerate all atoms.
            </summary>
            <returns>An enumeration of all atoms on the system.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Delete(System.Boolean)">
            <summary>
            Delete an atom.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Delete">
            <summary>
            Delete an atom.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtAtom.Atom">
            <summary>
            The atom value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtAtom.Name">
            <summary>
            Get the name of the stom
            </summary>
            <returns>The name of the atom</returns>
        </member>
        <member name="T:NtApiDotNet.NtDebug">
            <summary>
            Class representing a NT Debug object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DebugObjectFlags)">
            <summary>
            Create a debug object
            </summary>
            <param name="name">The debug object name (can be null)</param>
            <param name="root">The root directory for relative names</param>
            <param name="flags">Debug object flags.</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,NtApiDotNet.DebugObjectFlags)">
            <summary>
            Create a debug object
            </summary>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="object_attributes">Object attributes for debug object</param>
            <param name="flags">Debug object flags.</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,NtApiDotNet.DebugObjectFlags,System.Boolean)">
            <summary>
            Create a debug object
            </summary>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="object_attributes">Object attributes for debug object</param>
            <param name="flags">Debug object flags.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create">
            <summary>
            Create a debug object
            </summary>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.DebugAccessRights)">
            <summary>
            Open a named debug object
            </summary>
            <param name="name">The debug object name </param>
            <param name="root">The root directory for relative names</param>
            <param name="desired_access">Desired access for the debug object</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights)">
            <summary>
            Open a named debug object
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access for the debug object</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,System.Boolean)">
            <summary>
            Open a named debug object
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.OpenCurrent(System.Boolean)">
            <summary>
            Open the current thread's debug object.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened debug object. Returns null if no object exists.</returns>
        </member>
        <member name="P:NtApiDotNet.NtDebug.Current">
            <summary>
            Open the current thread's debug object. Returns null if no object exists.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Attach(NtApiDotNet.NtProcess,System.Boolean)">
            <summary>
            Attach to an active process.
            </summary>
            <param name="process">The process to debug.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Attach(System.Int32,System.Boolean)">
            <summary>
            Attach to an active process.
            </summary>
            <param name="pid">The process ID to debug.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Attach(NtApiDotNet.NtProcess)">
            <summary>
            Attach to an active process.
            </summary>
            <param name="process">The process to debug.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Attach(System.Int32)">
            <summary>
            Attach to an active process.
            </summary>
            <param name="pid">The process ID to debug.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Detach(NtApiDotNet.NtProcess,System.Boolean)">
            <summary>
            Detach a process from this debug object.
            </summary>
            <param name="process">The process to remove.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Detach(NtApiDotNet.NtProcess)">
            <summary>
            Detach a process from this debug object.
            </summary>
            <param name="process">The process to remove.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Detach(System.Int32,System.Boolean)">
            <summary>
            Detach a process from this debug object.
            </summary>
            <param name="pid">The process ID to remove.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Detach(System.Int32)">
            <summary>
            Detach a process from this debug object.
            </summary>
            <param name="pid">The process ID to remove.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.SetKillOnClose(System.Boolean,System.Boolean)">
            <summary>
            Set kill process on close flag.
            </summary>
            <param name="kill_on_close">The flag state.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.SetKillOnClose(System.Boolean)">
            <summary>
            Set kill process on close flag.
            </summary>
            <param name="kill_on_close">The flag state.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Continue(NtApiDotNet.ClientId,NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="client_id">The client ID for the process and thread IDs.</param>
            <param name="continue_status">The continue status code.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Continue(System.Int32,System.Int32,NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="pid">The process ID to continue.</param>
            <param name="tid">The thread ID to continue.</param>
            <param name="continue_status">The continue status code.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Continue(NtApiDotNet.ClientId,NtApiDotNet.NtStatus)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="client_id">The client ID for the process and thread IDs.</param>
            <param name="continue_status">The continue status code.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Continue(System.Int32,System.Int32,NtApiDotNet.NtStatus)">
            <summary>
            Continue the debugged process.
            </summary>
            <param name="pid">The process ID to continue.</param>
            <param name="tid">The thread ID to continue.</param>
            <param name="continue_status">The continue status code.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Continue(System.Int32,System.Int32)">
            <summary>
            Continue the debugged process with a success code.
            </summary>
            <param name="pid">The process ID to continue.</param>
            <param name="tid">The thread ID to continue.</param>
        </member>
        <member name="M:NtApiDotNet.NtDebug.WaitForDebugEvent(System.Boolean,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Wait for a debug event.
            </summary>
            <param name="alertable">True to set the thread as alertable.</param>
            <param name="timeout">Wait timeout.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The debug event.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.WaitForDebugEvent(System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait for a debug event.
            </summary>
            <param name="alertable">True to set the thread as alertable.</param>
            <param name="timeout">Wait timeout.</param>
            <returns>The debug event.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.WaitForDebugEvent(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait for a debug event.
            </summary>
            <param name="timeout">Wait timeout.</param>
            <returns>The debug event.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.WaitForDebugEvent(System.Int64)">
            <summary>
            Wait for a debug event.
            </summary>
            <param name="timeout_ms">Wait timeout in milliseconds.</param>
            <returns>The debug event.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.WaitForDebugEvent">
            <summary>
            Wait for a debug event.
            </summary>
            <returns>The debug event.</returns>
        </member>
        <member name="T:NtApiDotNet.NtDesktop">
            <summary>
            Class which represents a desktop object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.CreateDesktopFlags,NtApiDotNet.DesktopAccessRights,System.Boolean)">
            <summary>
            Open a desktop by name.
            </summary>
            <param name="object_attributes">The object attributes for opening.</param>
            <param name="flags">Flags for opening the desktop.</param>
            <param name="desired_access">Desired access.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The instance of the desktop.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a desktop by name.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <param name="root">Optional root object</param>
            <returns>An instance of NtDesktop.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Open(System.String)">
            <summary>
            Open a desktop by name.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Create(NtApiDotNet.ObjectAttributes,System.String,System.IntPtr,NtApiDotNet.CreateDesktopFlags,NtApiDotNet.DesktopAccessRights,System.Int32,System.Boolean)">
            <summary>
            Create a new desktop.
            </summary>
            <param name="object_attributes">The object attributes for opening.</param>
            <param name="flags">Flags for opening the desktop.</param>
            <param name="desired_access">Desired access.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <param name="device">Device name.</param>
            <param name="dev_mode">Device mode.</param>
            <param name="heap_size">Heap size.</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a new desktop.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <param name="root">Optional root object</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Create(System.String)">
            <summary>
            Create a new desktop.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="T:NtApiDotNet.NtDirectory">
            <summary>
            NT Directory Object class
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,System.Boolean)">
            <summary>
            Open a directory object
            </summary>
            <param name="obj_attributes">The object attributes to use for the open call.</param>
            <param name="desired_access">Access rights for directory object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a directory object
            </summary>
            <param name="obj_attributes">The object attributes to use for the open call.</param>
            <param name="desired_access">Access rights for directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a directory object by name
            </summary>
            <param name="name">The directory object to open</param>
            <param name="root">Optional root directory to parse from</param>
            <param name="desired_access">Access rights for directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights,System.Boolean)">
            <summary>
            Open a directory object by name
            </summary>
            <param name="name">The directory object to open</param>
            <param name="root">Optional root directory to parse from</param>
            <param name="desired_access">Access rights for directory object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(System.String)">
            <summary>
            Open a directory object by full name
            </summary>
            <param name="name">The directory object to open</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory,NtApiDotNet.DirectoryCreateFlags,System.Boolean)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <param name="flags">Flags for creation.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory,System.Boolean)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory,NtApiDotNet.DirectoryCreateFlags)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <param name="flags">Flags for creation.</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Create a directory object
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="root">Root directory from where to start the creation operation</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="root">Root directory from where to start the creation operation</param>
            <param name="shadow_dir">The shadow directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String)">
            <summary>
            Create a directory object 
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory(System.Int32,System.String,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a session directory.
            </summary>
            <param name="sessionid">The session ID to open</param>
            <param name="sub_directory">Sub directory to open.</param>
            <param name="desired_access">Desired access to open directory.</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory(System.String)">
            <summary>
            Open the current session directory.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory">
            <summary>
            Open the current session directory.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenBaseNamedObjects(System.Int32)">
            <summary>
            Open basenamedobjects for a session.
            </summary>
            <param name="sessionid">The session ID to open</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenBaseNamedObjects">
            <summary>
            Open basenamedobjects for current session.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetBasedNamedObjects(System.Int32)">
            <summary>
            Get the based named object's directory for a session.
            </summary>
            <param name="session_id">The session ID</param>
            <returns>The based named object's directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetBasedNamedObjects">
            <summary>
            Get the based named object's directory for the current session.
            </summary>
            <returns>The based named object's directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindows(System.Int32)">
            <summary>
            Get the a session's Windows object directory.
            </summary>
            <param name="session_id">The session id to use.</param>
            <returns>The path to the windows object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindows">
            <summary>
            Get the current session's Windows object directory.
            </summary>
            <returns>The path to the windows object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindowStations(System.Int32)">
            <summary>
            Get the a session's Window Stations object directory.
            </summary>
            <param name="session_id">The session id to use.</param>
            <returns>The path to the window stations object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindowStations">
            <summary>
            Get the current session's Window Stations object directory.
            </summary>
            <returns>The path to the window stations object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenDosDevicesDirectory(NtApiDotNet.NtToken)">
            <summary>
            Open dos devices directory for a token.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenDosDevicesDirectory">
            <summary>
            Open dos devices directory for current effective token.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.CreatePrivateNamespace(NtApiDotNet.ObjectAttributes,NtApiDotNet.BoundaryDescriptor,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Create a private namespace directory.
            </summary>
            <param name="obj_attributes">Object attributes for the directory</param>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <param name="desired_access">Desired access for the directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.CreatePrivateNamespace(NtApiDotNet.BoundaryDescriptor)">
            <summary>
            Create a private namespace directory.
            </summary>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenPrivateNamespace(NtApiDotNet.ObjectAttributes,NtApiDotNet.BoundaryDescriptor,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a private namespace directory.
            </summary>
            <param name="obj_attributes">Object attributes for the directory</param>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <param name="desired_access">Desired access for the directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenPrivateNamespace(NtApiDotNet.BoundaryDescriptor)">
            <summary>
            Open a private namespace directory.
            </summary>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.DirectoryExists(System.String,NtApiDotNet.NtDirectory)">
            <summary>
            Returns whether a directory exists for this path.
            </summary>
            <param name="path">The path to the entry.</param>
            <param name="root">The root directory.</param>
            <returns>True if the directory exists for the specified path.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntryType(System.String,NtApiDotNet.NtObject)">
            <summary>
            Get the type of a directory entry by path.
            </summary>
            <param name="path">The path to the directory entry</param>
            <param name="root">The root object to look up if path is relative</param>
            <returns>The type name, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Query">
            <summary>
            Query the directory for a list of entries.
            </summary>
            <returns>The list of entries.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},NtApiDotNet.DirectoryAccessRights,System.Boolean,System.Int32)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the directory</param>
            <param name="recurse">True to recurse into sub directories.</param>
            <param name="max_depth">Specify max recursive depth. -1 to not set a limit.</param>
            <returns>True if all children were visited.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean})">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="recurse">True to recurse into sub directories.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},NtApiDotNet.DirectoryAccessRights,System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the directory</param>
            <param name="recurse">True to recurse into sub directories.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Delete">
            <summary>
            Deletes a private namespace. If not a private namespace this does nothing.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntry(System.String,System.String,System.Boolean)">
            <summary>
            Get a directory entry based on a name.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="typename">The typename to verify against, can be null.</param>
            <param name="case_sensitive">True if look up is case sensitive.</param>
            <returns>The directory entry, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntry(System.String)">
            <summary>
            Get a directory entry based on a name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The directory entry, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.DirectoryExists(System.String)">
            <summary>
            Check whether a directory is exists relative to the current directory.
            </summary>
            <param name="relative_path">Relative path to directory</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.SetCurrentSessionId(System.Boolean)">
            <summary>
            Set the session ID for this directory to the current session.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <remarks>Needs SeTcbPrivilege.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.SetCurrentSessionObject(System.Boolean)">
            <summary>
            Set the session object for this directory to the current session.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <remarks>Needs SeTcbPrivilege.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtDirectory.IsContainer">
            <summary>
            Returns whether this object is a container.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtEvent">
            <summary>
            Class representing a NT Event object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.EventType,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <param name="type">The type of the even</param>
            <param name="initial_state">The initial state of the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventType,System.Boolean,NtApiDotNet.EventAccessRights)">
            <summary>
            Create an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="type">The type of the event</param>
            <param name="initial_state">The initial state of the event</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventType,System.Boolean,NtApiDotNet.EventAccessRights,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="type">The type of the event</param>
            <param name="initial_state">The initial state of the event</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(System.String,NtApiDotNet.EventType,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="type">The type of the even</param>
            <param name="initial_state">The initial state of the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.EventAccessRights)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventAccessRights)">
            <summary>
            Open an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventAccessRights,System.Boolean)">
            <summary>
            Open an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Set(System.Boolean)">
            <summary>
            Set the event state
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The previous state of the event and NT status.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Set">
            <summary>
            Set the event state
            </summary>
            <returns>The previous state of the event</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Clear(System.Boolean)">
            <summary>
            Clear the event state
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Clear">
            <summary>
            Clear the event state
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Pulse(System.Boolean)">
            <summary>
            Pulse the event state.
            </summary>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The previous state of the event and NT status.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Pulse">
            <summary>
            Pulse the event state.
            </summary>
            <returns>The previous state of the event</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.QueryInformation(NtApiDotNet.EventInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="P:NtApiDotNet.NtEvent.EventType">
            <summary>
            Get event type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtEvent.EventState">
            <summary>
            Get current event state.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtException">
            <summary>
            Exception class representing an NT status error.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtException.#ctor(NtApiDotNet.NtStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">Status result</param>
        </member>
        <member name="P:NtApiDotNet.NtException.Status">
            <summary>
            Returns the contained NT status code
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtException.Message">
            <summary>
            Returns a string form of the NT status code.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtFile">
            <summary>
            Class representing a NT File object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <param name="allocation_size">Optional allocation size.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer,System.Nullable{System.Int64})">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <param name="allocation_size">Optional allocation size.</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer,System.Boolean)">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer,System.Boolean)">
            <summary>
            Create a new file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="path">The path to the file</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <returns>The file instance for the pipe.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="path">The path to the pipe file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The file instance for the pipe.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="path">The path to the pipe file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <returns>The file instance for the pipe.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreatePipePair(System.Boolean)">
            <summary>
            Create an anonymous named pipe pair.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The named pipe pair.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreatePipePair">
            <summary>
            Create an anonymous named pipe pair.
            </summary>
            <returns>The named pipe pair.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMailslot(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileOpenOptions,System.Int32,System.Int32,System.Int64)">
            <summary>
            Create a new named mailslot file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="mailslot_quota">Mailslot quota</param>
            <param name="maximum_message_size">Maximum message size (0 for any size)</param>
            <param name="default_timeout">Timeout in MS ( &lt;0 is infinite)</param>
            <returns>The file instance for the mailslot.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMailslot(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileOpenOptions,System.Int32,System.Int32,System.Int64)">
            <summary>
            Create a new named mailslot file
            </summary>
            <param name="path">The path to the mailslot file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="mailslot_quota">Mailslot quota</param>
            <param name="maximum_message_size">Maximum message size (0 for any size)</param>
            <param name="default_timeout">Timeout in MS ( &lt;0 is infinite)</param>
            <returns>The file instance for the mailslot.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Open a file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file
            </summary>
            <param name="obj_attributes">The object attributes</param>f
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Open a file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">The root directory if path is relative.</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="shared_access">The file share access</param>
            <param name="open_options">File open options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">The root directory if path is relative.</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="shared_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights)">
            <summary>
            Open a file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">The root directory if path is relative.</param>
            <param name="desired_access">The desired access for the file handle</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetFileId(System.String)">
            <summary>
            Get the object ID of a file as a string
            </summary>
            <param name="path">The path to the file</param>
            <returns>The object ID as a string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.OpenFileById(NtApiDotNet.NtFile,System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Open a file by its object ID
            </summary>
            <param name="volume">A handle to the volume on which the file resides.</param>
            <param name="id">The object ID as a binary string</param>
            <param name="desired_access">The desired access for the file</param>
            <param name="share_access">File share access</param>
            <param name="open_options">Open options.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The opened file object</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.OpenFileById(NtApiDotNet.NtFile,System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file by its object ID
            </summary>
            <param name="volume">A handle to the volume on which the file resides.</param>
            <param name="id">The object ID as a binary string</param>
            <param name="desired_access">The desired access for the file</param>
            <param name="share_access">File share access</param>
            <param name="open_options">Open options.</param>
            <returns>The opened file object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(NtApiDotNet.ObjectAttributes,System.Boolean)">
            <summary>
            Delete a file
            </summary>
            <param name="obj_attributes">The object attributes for the file.</param>
            <param name="throw_on_error">True to throw an exception on error</param>
            <returns>The status result of the delete</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(NtApiDotNet.ObjectAttributes)">
            <summary>
            Delete a file
            </summary>
            <param name="obj_attributes">The object attributes for the file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(System.String)">
            <summary>
            Delete a file
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,System.String)">
            <summary>
            Rename file.
            </summary>
            <param name="path">The file to rename.</param>
            <param name="new_name">The target NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String,System.String)">
            <summary>
            Create a hardlink to another file.
            </summary>
            <param name="path">The file to hardlink to.</param>
            <param name="linkname">The desintation hardlink path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMountPoint(System.String,System.String,System.String)">
            <summary>
            Create a mount point.
            </summary>
            <param name="path">The path to the mount point to create.</param>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display (can be null).</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateSymlink(System.String,System.Boolean,System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags)">
            <summary>
            Create a symlink.
            </summary>
            <param name="path">The path to the mount point to create.</param>
            <param name="directory">True to create a directory symlink, false for a file.</param>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display.</param>
            <param name="flags">Additional flags for the symlink.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint(System.String)">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <param name="path">The path to the reparse point.</param>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteReparsePoint(System.String)">
            <summary>
            Delete the reparse point buffer.
            </summary>
            <param name="path">The path to the reparse point.</param>
            <returns>The original reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Send an File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The length of output bytes returned.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send an File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <returns>The length of output bytes returned.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReOpen(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Re-open an existing file for different access.
            </summary>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReOpen(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Re-open an exsiting file for different access.
            </summary>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(System.Boolean)">
            <summary>
            Delete the file. Must have been opened with DELETE access.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete">
            <summary>
            Delete the file. Must have been opened with DELETE access.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteEx(NtApiDotNet.FileDispositionInformationExFlags,System.Boolean)">
            <summary>
            Delete the file (extended Windows version). Must have been opened with DELETE access.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <param name="flags">Flags for DeleteEx call.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteEx(NtApiDotNet.FileDispositionInformationExFlags)">
            <summary>
            Delete the file (extended Windows version). Must have been opened with DELETE access.
            </summary>
            <param name="flags">Flags for DeleteEx call.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String,NtApiDotNet.NtFile)">
            <summary>
            Create a new hardlink to this file.
            </summary>
            <param name="linkname">The target NT path.</param>
            <param name="root">The root directory if linkname is relative</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String)">
            <summary>
            Create a new hardlink to this file.
            </summary>
            <param name="linkname">The target absolute NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String,NtApiDotNet.NtFile,System.Boolean,System.Boolean)">
            <summary>
            Create a new hardlink to this file.
            </summary>
            <param name="linkname">The target NT path.</param>
            <param name="root">The root directory if linkname is relative</param>
            <param name="replace_if_exists">If TRUE, replaces the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,NtApiDotNet.NtFile,System.Boolean,System.Boolean)">
            <summary>
            Rename file.
            </summary>
            <param name="new_name">The target NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <param name="replace_if_exists">If TRUE, replaces the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,NtApiDotNet.NtFile,System.Boolean)">
            <summary>
            Rename file.
            </summary>
            <param name="new_name">The target NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <param name="replace_if_exists">If TRUE, replaces the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,NtApiDotNet.NtFile)">
            <summary>
            Rename file.
            </summary>
            <param name="new_name">The target NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,System.Boolean)">
            <summary>
            Rename this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="replace_if_exists">If TRUE, replace the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String)">
            <summary>
            Rename this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.RenameEx(System.String,NtApiDotNet.NtFile,NtApiDotNet.FileRenameInformationExFlags,System.Boolean)">
            <summary>
            Rename (extended Windows version) this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <param name="flags">The flags associated to FileRenameInformationEx.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.RenameEx(System.String,NtApiDotNet.NtFile,NtApiDotNet.FileRenameInformationExFlags)">
            <summary>
            Rename (extended Windows version) this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <param name="flags">The flags associated to FileRenameInformationEx.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.RenameEx(System.String,NtApiDotNet.FileRenameInformationExFlags)">
            <summary>
            Rename (extended Windows version) this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="flags">The flags associated to FileRenameInformationEx.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetReparsePoint(NtApiDotNet.ReparseBuffer)">
            <summary>
            Set an arbitrary reparse point.
            </summary>
            <param name="reparse">The reparse point data.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetMountPoint(System.String,System.String)">
            <summary>
            Set a mount point on the current file object.
            </summary>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display (can be null).</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetSymlink(System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags)">
            <summary>
            Set a symlink on the current file object.
            </summary>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display.</param>
            <param name="flags">Additional flags for the symlink.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint(System.Boolean)">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <param name="opaque_buffer">If the reparse tag isn't known 
            return an opaque buffer, otherwise a generic buffer</param>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteReparsePoint">
            <summary>
            Delete the reparse point buffer
            </summary>
            <returns>The original reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryAccessibleFiles(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.String,NtApiDotNet.FileTypeMask)">
            <summary>
            Get list of accessible files underneath a directory.
            </summary>
            <param name="share_access">Share access for file open</param>
            <param name="open_options">Options for open call.</param>
            <param name="desired_access">The desired access for each file.</param>
            <param name="file_mask">A file name mask (such as *.txt). Can be null.</param>
            <param name="type_mask">Indicate what entries to return.</param>
            <returns>The list of files which can be access.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryAccessibleFiles(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Get list of accessible files underneath a directory.
            </summary>
            <param name="share_access">Share access for file open</param>
            <param name="open_options">Options for open call.</param>
            <param name="desired_access">The desired access for each file.</param>
            <returns>The list of files which can be access.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryDirectoryInfo">
            <summary>
            Query a directory for files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryDirectoryInfo(System.String,NtApiDotNet.FileTypeMask)">
            <summary>
            Query a directory for files.
            </summary>
            <param name="file_mask">A file name mask (such as *.txt). Can be null.</param>
            <param name="type_mask">Indicate what entries to return.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Runtime.InteropServices.SafeBuffer,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="buffer">The buffer to read to.</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Runtime.InteropServices.SafeBuffer,System.Nullable{System.Int64})">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="buffer">The buffer to read to.</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Int32,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Int32)">
            <summary>
            Read data from a file with a length.
            </summary>
            <param name="length">The length of the read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatter(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Boolean)">
            <summary>
            Read data from a file with a length over a scatter set of pages.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatter(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length over a scatter set of pages.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <returns>The length of bytes read.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="buffer">The buffer to read to.</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="buffer">The buffer to read to.</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Int32,System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read. The position is optional.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Read data from a file with a length and position asynchronously..
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length and position asynchronously..
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatterAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatterAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Boolean)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatterAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadScatterAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length and position asynchronously.
            </summary>
            <param name="pages">List of pages to read into. These pages must be Page Size aligned.</param>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read.</param>
            <returns>The length of bytes read into the buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write as a buffer.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write as a buffer.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Byte[],System.Int64,System.Threading.CancellationToken)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Byte[],System.Int64)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Byte[],System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Runtime.InteropServices.SafeBuffer,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Write data to a file at a specific position.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to. Optional</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Runtime.InteropServices.SafeBuffer,System.Nullable{System.Int64})">
            <summary>
            Write data to a file at a specific position.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to. Optional</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Byte[],System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Write data to a file at a specific position.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to. Optional</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Byte[],System.Int64)">
            <summary>
            Write data to a file at a specific position.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Byte[])">
            <summary>
            Write data to a file
            </summary>
            <param name="data">The data to write</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGather(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Boolean)">
            <summary>
            Write data to a file at a specific position gathered from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGather(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64)">
            <summary>
            Write data to a file at a specific position gathered from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGatherAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Write data to a file at a specific position asynchronously from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGatherAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Boolean)">
            <summary>
            Write data to a file at a specific position asynchronously from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGatherAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Write data to a file at a specific position asynchronously from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteGatherAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int64)">
            <summary>
            Write data to a file at a specific position asynchronously from a list of pages.
            </summary>
            <param name="pages">List of pages to write. These pages must be page size aligned.</param>
            <param name="length">The length of the write.</param>
            <param name="position">The position to write to.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Lock(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Lock part of a file.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Lock(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Lock part of a file.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Lock(System.Int64,System.Int64)">
            <summary>
            Shared lock part of a file.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
            <param name="token">Cancellation token to cancel async operation.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64)">
            <summary>
            Shared lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Unlock(System.Int64,System.Int64)">
            <summary>
            Unlock part of a file previously locked with Lock
            </summary>
            <param name="offset">The offset into the file to unlock</param>
            <param name="size">The number of bytes to unlock</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Unlock(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Unlock part of a file previously locked with Lock
            </summary>
            <param name="offset">The offset into the file to unlock</param>
            <param name="size">The number of bytes to unlock</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ToStream">
            <summary>
            Convert this NtFile to a FileStream for reading/writing.
            </summary>
            <remarks>The stream must be closed separately from the NtFile.</remarks>
            <returns>The file stream.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetWin32PathName(NtApiDotNet.Win32.Win32PathNameFlags)">
            <summary>
            Get the Win32 path name for the file.
            </summary>
            <param name="flags">The flags to determine what path information to get.</param>
            <returns>The path.</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetWin32PathName(NtApiDotNet.Win32.Win32PathNameFlags,System.Boolean)">
            <summary>
            Get the Win32 path name for the file.
            </summary>
            <param name="flags">The flags to determine what path information to get.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplock(NtApiDotNet.OplockRequestLevel,System.Boolean)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplock(NtApiDotNet.OplockRequestLevel)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel,System.Boolean)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel,System.Threading.CancellationToken)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.AcknowledgeOplock(NtApiDotNet.OplockAcknowledgeLevel,System.Boolean)">
            <summary>
            Acknowledge an oplock break.
            </summary>
            <param name="level">The acknowledgment level.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <remarks>Oplock break acknowledgement returns STATUS_PENDING.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtFile.AcknowledgeOplock(NtApiDotNet.OplockAcknowledgeLevel)">
            <summary>
            Acknowledge an oplock break.
            </summary>
            <param name="level">The acknowledgment level.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplock(NtApiDotNet.OplockLevelCache,NtApiDotNet.RequestOplockInputFlag)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="flags">The flags for the oplock.</param>
            <returns>The result of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockLease(NtApiDotNet.OplockLevelCache)">
            <summary>
            Oplock the file with a specific lease level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock lease level.</param>
            <returns>The result of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockLease(NtApiDotNet.OplockLevelCache,System.Boolean)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="requested_oplock_level">The oplock cache level.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockLevelCache,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The request of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockLevelCache,NtApiDotNet.RequestOplockInputFlag,System.Threading.CancellationToken)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="flags">The flags for the oplock.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The request of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockLeaseAsync(NtApiDotNet.OplockLevelCache,System.Threading.CancellationToken)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The request of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockLeaseAsync(NtApiDotNet.OplockLevelCache,System.Boolean)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The request of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockLevelCache,NtApiDotNet.RequestOplockInputFlag)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <param name="flags">The flags for the oplock.</param>
            <returns>The response of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockLeaseAsync(NtApiDotNet.OplockLevelCache)">
            <summary>
            Oplock the file with a specific level and flags.
            </summary>
            <param name="requested_oplock_level">The oplock level.</param>
            <returns>The response of the oplock request.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.AcknowledgeOplockLease(NtApiDotNet.OplockLevelCache,System.Boolean,System.Boolean)">
            <summary>
            Acknowledge a lease oplock started with RequestOplockLease.
            </summary>
            <param name="acknowledge_oplock_level">The acknowledgement level.</param>
            <param name="complete_on_close">True to complete acknowledgement on close.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code. Acknowledging an oplock returns STATUS_PENDING on success.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.AcknowledgeOplockLease(NtApiDotNet.OplockLevelCache,System.Boolean)">
            <summary>
            Acknowledge a lease oplock started with RequestOplockLease.
            </summary>
            <param name="acknowledge_oplock_level">The acknowledgement level.</param>
            <param name="complete_on_close">True to complete acknowledgement on close.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.AcknowledgeOplockLease(NtApiDotNet.OplockLevelCache)">
            <summary>
            Acknowledge a lease oplock started with RequestOplockLease.
            </summary>
            <param name="acknowledge_oplock_level">The acknowledgement level.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusive(System.Boolean)">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusive">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusiveAsync(System.Threading.CancellationToken)">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusiveAsync">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
            <returns>The oplock response level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.NotifyOplockBreak(System.Boolean)">
            <summary>
            Wait for an oplock break to complete.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.NotifyOplockBreak">
            <summary>
            Wait for an oplock break to complete.
            </summary>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.NotifyOplockBreakAsync(System.Boolean)">
            <summary>
            Wait for an oplock break to complete.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.NotifyOplockBreakAsync">
            <summary>
            Wait for an oplock break to complete.
            </summary>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">True is disposing.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.CancelIo">
            <summary>
            Try and cancel any pending asynchronous IO.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetEa">
            <summary>
            Get the extended attributes of a file.
            </summary>
            <returns>The extended attributes, empty if no extended attributes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(NtApiDotNet.EaBuffer)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="ea">The EA buffer to set.</param>
            <remarks>This will add entries if they no longer exist, 
            remove entries if the data is empty or update existing entires.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.AddEntry(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.RemoveEa(System.String)">
            <summary>
            Remove an extended attributes entry for a file.
            </summary>
            <param name="name">The name of the entry</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Assign completion port to file.
            </summary>
            <param name="completion_port">The completion port.</param>
            <param name="key">A key to associate with this completion.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.IsAccessGranted(NtApiDotNet.FileDirectoryAccessRights)">
            <summary>
            Check if a specific set of file directory access rights is granted
            </summary>
            <param name="access">The file directory access rights to check</param>
            <returns>True if all access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetCachedSigningLevel">
            <summary>
            Get the cached signing level for a file.
            </summary>
            <returns>The cached signing level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetCachedSigningLevelFromEa">
            <summary>
            Get the cached singing level from the raw EA buffer.
            </summary>
            <returns>The cached signing level data.</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCachedSigningLevel(System.Int32,NtApiDotNet.SigningLevel)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCachedSigningLevel(System.Int32,NtApiDotNet.SigningLevel,System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="catalog_path">Optional directory path to look for catalog files.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCachedSigningLevel(System.Int32,NtApiDotNet.SigningLevel,System.Collections.Generic.IEnumerable{NtApiDotNet.NtFile},System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="files">Files for signature.</param>
            <param name="catalog_path">Optional directory path to look for catalog files.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEndOfFile(System.Int64)">
            <summary>
            Set the end of file.
            </summary>
            <param name="offset">The offset to the end of file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetValidDataLength(System.Int64)">
            <summary>
            Set the valid data length of the file without zeroing. Needs SeManageVolumePrivilege.
            </summary>
            <param name="length">The length to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetHardLinks">
            <summary>
            Get list of hard link entries for a file.
            </summary>
            <returns>The list of entries.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetStreams">
            <summary>
            Get a list of stream entries for the current file.
            </summary>
            <returns>The list of streams.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.VisitAccessibleStreams(System.Func{NtApiDotNet.NtFile,System.Boolean},NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Visit all accessible streams under this file.
            </summary>
            <param name="visitor">A function to be called on every accessible stream. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the streams.</param>
            <param name="share_access">The share access to open the streams with.</param>
            <param name="open_options">Additional options to open the s with.</param>
            <returns>True if all accessible streams were visited, false if not.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetUsingProcessIds">
            <summary>
            Get list of process ids using this file.
            </summary>
            <returns>The list of process ids.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.VisitAccessibleFiles(System.Func{NtApiDotNet.NtFile,System.Boolean},NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean,System.Int32,System.String,NtApiDotNet.FileTypeMask)">
            <summary>
            Visit all accessible files under this directory.
            </summary>
            <param name="visitor">A function to be called on every accessible file. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the files.</param>
            <param name="recurse">True to recurse into sub keys.</param>
            <param name="share_access">The share access to open the files with.</param>
            <param name="max_depth">Specify max recursive depth. -1 to not set a limit.</param>
            <param name="open_options">Additional options to open the files with.</param>
            <param name="file_mask">A file name mask (such as *.txt). Can be null.</param>
            <param name="type_mask">Indicate what entries to return.</param>
            <returns>True if all accessible files were visited, false if not.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.VisitAccessibleFiles(System.Func{NtApiDotNet.NtFile,System.Boolean},NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean,System.Int32)">
            <summary>
            Visit all accessible files under this directory.
            </summary>
            <param name="visitor">A function to be called on every accessible file. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the files.</param>
            <param name="recurse">True to recurse into sub keys.</param>
            <param name="share_access">The share access to open the files with.</param>
            <param name="max_depth">Specify max recursive depth. -1 to not set a limit.</param>
            <param name="open_options">Additional options to open the files with.</param>
            <returns>True if all accessible files were visited, false if not.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.VisitAccessibleFiles(System.Func{NtApiDotNet.NtFile,System.Boolean})">
            <summary>
            Visit all accessible files under this directory.
            </summary>
            <param name="visitor">A function to be called on every accessible file. Return true to continue enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.VisitAccessibleFiles(System.Func{NtApiDotNet.NtFile,System.Boolean},NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode)">
            <summary>
            Visit all accessible files under this directory.
            </summary>
            <param name="visitor">A function to be called on every accessible file. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the files.</param>
            <param name="share_access">The share access to open the files with.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryDynamicCodeTrust">
            <summary>
            Query whether a file is trusted for dynamic code.
            </summary>
            <returns>Returns true if the file is trusted.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetDynamicCodeTrust">
            <summary>
            Set a file is trusted for dynamic code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.FindFilesBySid(NtApiDotNet.Sid)">
            <summary>
            Find files in a directory by the owner SID.
            </summary>
            <param name="sid">The owner SID.</param>
            <returns>A list of files in the directory.</returns>
            <remarks>For this method to work you need Quota enabled on the volume.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryInformation(NtApiDotNet.FileInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetInformation(NtApiDotNet.FileInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileId">
            <summary>
            Get object ID for current file
            </summary>
            <returns>The object ID as a string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileAttributes">
            <summary>
            Get or set the attributes of a file.
            </summary>
            <returns>The file attributes</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsDirectory">
            <summary>
            Get whether this file represents a directory.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsReparsePoint">
            <summary>
            Get whether this file repsents a reparse point.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.OpenResult">
            <summary>
            The result of opening the file, whether it was created, overwritten etc.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Position">
            <summary>
            Get or set the current file position.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Length">
            <summary>
            Get or sets the file's length
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Win32PathName">
            <summary>
            Get the Win32 path name for the file.
            </summary>
            <returns>The path, string.Empty on error.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.DeviceType">
            <summary>
            Get the low-level device type of the file.
            </summary>
            <returns>The file device type.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.Characteristics">
            <summary>
            Get the low-level device characteristics of the file.
            </summary>
            <returns>The file device characteristics.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.VolumeInformation">
            <summary>
            Get filesystem and volume information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.CompressionFormat">
            <summary>
            Get or set the file's compression format.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsRemote">
            <summary>
            Gets whether the file is on a remote file system.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.CaseSensitive">
            <summary>
            Get or set whether this file/directory is case sensitive.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.CaseSensitiveFlags">
            <summary>
            Get or set whether this file/directory is case sensitive.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Mode">
            <summary>
            Get the file mode.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Access">
            <summary>
            Get file access information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileName">
            <summary>
            Get the filename with the volume path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileShortName">
            <summary>
            Get the associated short filename
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.FullPath">
            <summary>
            Get the name of the file.
            </summary>
            <returns>The name of the file.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.StorageReserveId">
            <summary>
            Get or set the storage reserve ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsContainer">
            <summary>
            Returns whether this object is a container.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.ReadOnly">
            <summary>
            Get or set the read only status of the file.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtFileUtils">
            <summary>
            Utility functions for files
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToNt(System.String)">
            <summary>
            Convert a DOS filename to an absolute NT filename
            </summary>
            <param name="filename">The filename, can be relative</param>
            <returns>The NT filename</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToObjectAttributes(System.String)">
            <summary>
            Convert a DOS filename to an NT filename and get as an ObjectAttributes structure
            </summary>
            <param name="filename">The filename</param>
            <returns>The object attributes</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToUnicodeString(System.String)">
            <summary>
            Convert a DOS filename to a UNICODE_STRING structure
            </summary>
            <param name="filename">The DOS filename</param>
            <returns>The UNICODE_STRING</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.GetDosPathType(System.String)">
            <summary>
            Get type of DOS path
            </summary>
            <param name="filename">The DOS filename</param>
            <returns>The type of DOS path</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.MapToFileAccess(NtApiDotNet.FileDirectoryAccessRights)">
            <summary>
            Map directory access rights to file access rights.
            </summary>
            <param name="access_rights">The directory access rights to map.</param>
            <returns>The mapped access rights.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.FileIdToString(System.Int64)">
            <summary>
            Convert a file ID long to a string.
            </summary>
            <param name="fileid">The file ID to convert</param>
            <returns>The string format of the file id.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.IsReparseTagMicrosoft(NtApiDotNet.ReparseTag)">
            <summary>
            Get if a reparse tag is a Microsoft defined one.
            </summary>
            <param name="tag">The reparse tag.</param>
            <returns>True if it's a Microsoft reparse tag.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.IsReparseTagNameSurrogate(NtApiDotNet.ReparseTag)">
            <summary>
            Get if a reparse tag is a name surrogate.
            </summary>
            <param name="tag">The reparse tag.</param>
            <returns>True if it's a surrogate reparse tag.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.IsReparseTagDirectory(NtApiDotNet.ReparseTag)">
            <summary>
            Get if a reparse tag is a directory.
            </summary>
            <param name="tag">The reparse tag.</param>
            <returns>True if it's a directory reparse tag.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.ToFileAccessRights(NtApiDotNet.FileDirectoryAccessRights)">
            <summary>
            Convert a directory access rights mask to a normal file access mask.
            </summary>
            <param name="access">The access to convert.</param>
            <returns>The converted access rights.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.ToDirectoryAccessRights(NtApiDotNet.FileAccessRights)">
            <summary>
            Convert a file access rights mask to a directory file access mask.
            </summary>
            <param name="access">The access to convert.</param>
            <returns>The converted access rights.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.Wow64EnableFsRedirection(System.Boolean,System.Boolean)">
            <summary>
            Enable or disable Wow64 FS redirection.
            </summary>
            <param name="enable">True to enable FS redirection.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The old enable state.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.Wow64EnableFsRedirection(System.Boolean)">
            <summary>
            Enable or disable Wow64 FS redirection.
            </summary>
            <param name="enable">True to enable FS redirection.</param>
            <returns>The old enable state.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.SplitAddressToPages(System.Int64,System.Int32)">
            <summary>
            Split an allocated address into a list of pages. This can be used to pass to
            ReadScatter or WriteGather file APIs.
            </summary>
            <param name="address">The base address to split. The address should be page aligned.</param>
            <param name="length">The length of bytes to split into pages. This will be rounded up to the next page boundary.</param>
            <returns>The list of pages.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.SplitAddressToPages(System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Split an allocated address into a list of pages. This can be used to pass to
            ReadScatter or WriteGather file APIs.
            </summary>
            <param name="buffer">The allocated buffer to split. The address should be page aligned.</param>
            <remarks>The buffer will be split up based on its length. Note that the length will be rounded up.</remarks>
            <returns>The list of pages.</returns>
        </member>
        <member name="T:NtApiDotNet.NtHeap">
            <summary>
            Class to call NT heap APIs.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtHeap.Allocate(NtApiDotNet.HeapAllocFlags,System.Int64)">
            <summary>
            Allocate a buffer from the heap.
            </summary>
            <param name="flags">Heap flags.</param>
            <param name="size">Size of the allocation.</param>
            <returns>The allocated memory address.</returns>
        </member>
        <member name="M:NtApiDotNet.NtHeap.Free(NtApiDotNet.HeapAllocFlags,System.Int64)">
            <summary>
            Free a buffer from the heap.
            </summary>
            <param name="flags">Heap flags.</param>
            <param name="address">Address of the allocation.</param>
        </member>
        <member name="P:NtApiDotNet.NtHeap.Current">
            <summary>
            Get the current process heap.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtIoCompletion">
            <summary>
            Class representing an NT IO Completion Port object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Int32,System.Boolean)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Int32)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.IoCompletionAccessRights,System.Int32)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create">
            <summary>
            Create an unnamed IO Completion Port object.
            </summary>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Boolean)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.IoCompletionAccessRights)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(System.String)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Remove a queued status from the queue.
            </summary>
            <param name="timeout">An optional timeout.</param>
            <returns>The completion result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error or timeout.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(System.Int32,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Remove multiple queued status from the queue.
            </summary>
            <param name="max_count">Maximum number of status to remove.</param>
            <param name="timeout">An optional timeout.</param>
            <param name="alertable">Indicate whether the wait is alertable.</param>
            <returns>Array of completion results. Length can be &lt;= max_count. If timeout then returns an empty array.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(System.Int32)">
            <summary>
            Remove multiple queued status from the queue.
            </summary>
            <param name="max_count">Maximum number of status to remove.</param>
            <returns>Array of completion results. Length can be &lt;= max_count</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove">
            <summary>
            Remove a queued status from the queue. Wait for an infinite time for the result.
            </summary>
            <returns>The completion result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Set(System.IntPtr,System.IntPtr,NtApiDotNet.NtStatus,System.IntPtr)">
            <summary>
            Add a queued status to the queue.
            </summary>
            <param name="key_context">The optional key context.</param>
            <param name="apc_context">The optional APC context.</param>
            <param name="status">Status code</param>
            <param name="information">The information context.</param>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.QueryInformation(NtApiDotNet.IoCompletionInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="P:NtApiDotNet.NtIoCompletion.Depth">
            <summary>
            Get current depth of IO Completion Port
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtJob">
            <summary>
            Class representing a NT Job object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights,System.Boolean)">
            <summary>
            Create a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights)">
            <summary>
            Create a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.JobAccessRights)">
            <summary>
            Create a job object
            </summary>
            <param name="path">The path to the job object (can be null)</param>
            <param name="root">The root object when path is relative</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a job object
            </summary>
            <param name="path">The path to the job object (can be null)</param>
            <param name="root">The root object when path is relative</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create">
            <summary>
            Create an unnamed job object
            </summary>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights,System.Boolean)">
            <summary>
            Open a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights)">
            <summary>
            Open a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.JobAccessRights)">
            <summary>
            Open a job object
            </summary>
            <param name="path">The path to the job object</param>
            <param name="root">The root object when path is relative</param>
            <param name="desired_access">Desired access for the job object</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a job object
            </summary>
            <param name="path">The path to the job object</param>
            <param name="root">The root object when path is relative</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.CreateSilo">
            <summary>
            Convert Job object into a Silo
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.AssignProcess(NtApiDotNet.NtProcess)">
            <summary>
            Assign a process to this job object.
            </summary>
            <param name="process">The process to assign.</param>
        </member>
        <member name="M:NtApiDotNet.NtJob.AssignProcessPseudoHandle">
            <summary>
            Assign a process to this job object using current Job on Windows 1709+.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.AssociateCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Associate a completion port with the job.
            </summary>
            <param name="port">The completion port.</param>
            <param name="key">The key associated with the port.</param>
        </member>
        <member name="M:NtApiDotNet.NtJob.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate this job object.
            </summary>
            <param name="status">The termination status.</param>
        </member>
        <member name="M:NtApiDotNet.NtJob.SetLimitFlags(NtApiDotNet.JobObjectLimitFlags)">
            <summary>
            Set the limit flags for the job.
            </summary>
            <param name="flags">The limit flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtJob.SetSiloSystemRoot(System.String)">
            <summary>
            Set the Silo system root directory.
            </summary>
            <param name="system_root">The absolute path to the system root directory.</param>
            <remarks>The system_root path must start with a capital drive letter and not end with a backslash.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtJob.QueryInformation(NtApiDotNet.JobObjectInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.SetInformation(NtApiDotNet.JobObjectInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtJob.CompletionFilter">
            <summary>
            Get or set completion filter for job object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtJob.MaxBandwidth">
            <summary>
            Get or set the Maximum Bandwith NetRate limitation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtJob.DscpTag">
            <summary>
            Get or set the DSCP Tag NetRate limitation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtKey">
            <summary>
            Class to represent an NT Key object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(System.String,System.String,NtApiDotNet.LoadKeyFlags)">
            <summary>
            Load a new hive
            </summary>
            <param name="destination">The destination path</param>
            <param name="filename">The path to the hive</param>
            <param name="flags">Load flags</param>
            <returns>The opened root key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.LoadKeyFlags,NtApiDotNet.KeyAccessRights)">
            <summary>
            Load a new hive
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="file_obj_attr">Object attributes for the path to the hive file</param>
            <param name="flags">Load flags</param>
            <param name="desired_access">Desired access for the root key</param>
            <returns>The opened root key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.LoadKeyFlags,NtApiDotNet.KeyAccessRights,System.Boolean)">
            <summary>
            Load a new hive
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="file_obj_attr">Object attributes for the path to the hive file</param>
            <param name="flags">Load flags</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.UnloadKeyFlags,System.Boolean)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="flags">Unload flags</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(System.String,NtApiDotNet.UnloadKeyFlags)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key">Path to key to unload.</param>
            <param name="flags">Unload flags</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(System.String)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key">Path to key to unload.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,NtApiDotNet.INtTransaction,System.Boolean)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <param name="transaction">Optional transaction object.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,NtApiDotNet.INtTransaction)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <param name="transaction">Optional transaction object.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <param name="root">Root key if key_name is relative</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,NtApiDotNet.INtTransaction,System.Boolean)">
            <summary>
            Try and open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <param name="transaction">Optional transaction object.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Try and open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,NtApiDotNet.INtTransaction)">
            <summary>
            Open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <param name="transaction">Optional transaction object.</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.KeyAccessRights)">
            <summary>
            Open a Key
            </summary>
            <param name="key_name">Path to the key to open</param>
            <param name="root">Root key if key_name is relative</param>
            <param name="desired_access">Desired access for the root key</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryLicenseValue(System.String,System.Boolean)">
            <summary>
            Query a license value. While technically not directly a registry key
            it has many of the same properties such as using the same registry
            value types.
            </summary>
            <param name="name">The name of the license value.</param>
            <param name="throw_on_error">True to throw an exception on error</param>
            <returns>The license value key</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryLicenseValue(System.String)">
            <summary>
            Query a license value. While technically not directly a registry key
            it has many of the same properties such as using the same registry
            value types.
            </summary>
            <param name="name">The name of the license value.</param>
            <returns>The license value key</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.CreateSymbolicLink(System.String,NtApiDotNet.NtKey,System.String)">
            <summary>
            Create a registry key symbolic link
            </summary>
            <param name="rootkey">Root key if path is relative</param>
            <param name="path">Path to the key to create</param>
            <param name="target">Target resistry path</param>
            <returns>The created symbolic link key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetMachineKey">
            <summary>
            Open the machine key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetUserKey">
            <summary>
            Open the user key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetUserKey(NtApiDotNet.Sid)">
            <summary>
            Open a specific user key
            </summary>
            <param name="sid">The SID fo the user to open</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetCurrentUserKey">
            <summary>
            Open the current user key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetRootKey">
            <summary>
            Open the root key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Delete">
            <summary>
            Delete the key
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.Byte[],System.Boolean)">
            <summary>
            Set a resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The raw value data</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.Byte[])">
            <summary>
            Set a resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The raw value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.String,System.Boolean)">
            <summary>
            Set a string resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The value data</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.String,System.Boolean)">
            <summary>
            Set a string resistry value as REG_SZ.
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.String)">
            <summary>
            Set a string resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.String)">
            <summary>
            Set a string resistry value as REG_SZ.
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Set a list of strings as a resistry value.
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The list of strings to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set a list of strings as a resistry value.
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The list of strings to set.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt32,System.Boolean)">
            <summary>
            Set a DWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt64,System.Boolean)">
            <summary>
            Set a QWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt32)">
            <summary>
            Set a DWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt64)">
            <summary>
            Set a QWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.DeleteValue(System.String,System.Boolean)">
            <summary>
            Delete a registry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.DeleteValue(System.String)">
            <summary>
            Delete a registry value
            </summary>
            <param name="value_name">The name of the value</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValue(System.String,System.Boolean)">
            <summary>
            Query a value by name
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The value information</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValue(System.String)">
            <summary>
            Query a value by name
            </summary>
            <param name="value_name">The name of the value</param>
            <returns>The value information</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValues">
            <summary>
            Query all values for this key
            </summary>
            <returns>A list of values</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryKeys">
            <summary>
            Query all subkey names
            </summary>
            <returns>The list of subkey names</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryAccessibleKeys(NtApiDotNet.KeyAccessRights,System.Boolean,System.Boolean)">
            <summary>
            Return a list of subkeys which can be accessed.
            </summary>
            <param name="desired_access">The required access rights for the subkeys</param>
            <param name="open_link">True to open link keys rather than following the link.</param>
            <param name="open_for_backup">True to open keys with backup flag set.</param>
            <returns>The disposable list of subkeys.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryAccessibleKeys(NtApiDotNet.KeyAccessRights)">
            <summary>
            Return a list of subkeys which can be accessed.
            </summary>
            <param name="desired_access">The required access rights for the subkeys</param>
            <returns>The disposable list of subkeys.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetSymbolicLinkTarget(System.String,System.Boolean)">
            <summary>
            Set a symbolic link target for this key (must have been created with
            appropriate create flags)
            </summary>
            <param name="target">The symbolic link target.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetSymbolicLinkTarget(System.String)">
            <summary>
            Set a symbolic link target for this key (must have been created with
            appropriate create flags)
            </summary>
            <param name="target">The symbolic link target.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String)">
            <summary>
            Open a key
            </summary>
            <param name="key_name">The path to the key to open</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String,NtApiDotNet.KeyAccessRights)">
            <summary>
            Open a key
            </summary>
            <param name="key_name">The path to the key to open</param>
            <param name="desired_access">Access rights for the key</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.ReOpen(NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Reopen the key with different access rights.
            </summary>
            <param name="desired_access">The access rights to reopen with.</param>
            <param name="options">Open options.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened key.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.ReOpen(NtApiDotNet.KeyAccessRights,NtApiDotNet.AttributeFlags,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Reopen the key with different access rights.
            </summary>
            <param name="desired_access">The access rights to reopen with.</param>
            <param name="attributes">The object attributes to open with.</param>
            <param name="options">Open options.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened key.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.ReOpen(NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Reopen the key with different access rights.
            </summary>
            <param name="desired_access">The access rights to reopen with.</param>
            <param name="options">Open options.</param>
            <returns>The opened key.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.ToRegistryKey">
            <summary>
            Convert object to a .NET RegistryKey object
            </summary>
            <returns>The registry key object</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Rename(System.String,System.Boolean)">
            <summary>
            Rename key.
            </summary>
            <param name="new_name">The new name for the key.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Rename(System.String)">
            <summary>
            Rename key.
            </summary>
            <param name="new_name">The new name for the key.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(NtApiDotNet.NtFile,NtApiDotNet.SaveKeyFlags,System.Boolean)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="file">The file to save to.</param>
            <param name="flags">Save key flags</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(NtApiDotNet.NtFile,NtApiDotNet.SaveKeyFlags)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="file">The file to save to.</param>
            <param name="flags">Save key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(System.String,NtApiDotNet.SaveKeyFlags,System.Boolean)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="path">The file path to save to.</param>
            <param name="flags">Save key flags</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(System.String,NtApiDotNet.SaveKeyFlags)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="path">The file path to save to.</param>
            <param name="flags">Save key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(System.String)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="path">The file path to save to.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(NtApiDotNet.NtFile,NtApiDotNet.RestoreKeyFlags,System.Boolean)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="file">The file to restore from</param>
            <param name="flags">Restore key flags</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(NtApiDotNet.NtFile,NtApiDotNet.RestoreKeyFlags)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="file">The file to restore from</param>
            <param name="flags">Restore key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(System.String,NtApiDotNet.RestoreKeyFlags,System.Boolean)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="path">The file path to restore from</param>
            <param name="flags">Restore key flags</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(System.String,NtApiDotNet.RestoreKeyFlags)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="path">The file path to restore from</param>
            <param name="flags">Restore key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(System.String)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="path">The file path to restore from</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Lock">
            <summary>
            Try and lock the registry key to prevent further modification.
            </summary>
            <remarks>Note that this almost certainly never works from usermode, there's an explicit
            check to prevent it in the kernel.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtKey.NotifyChange(NtApiDotNet.NotifyCompletionFilter,System.Boolean)">
            <summary>
            Wait for a change on the registry key.
            </summary>
            <param name="completion_filter">Specify what changes will be notified.</param>
            <param name="watch_tree">True to watch the entire tree.</param>
            <returns>The status from the change notification.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.NotifyChangeAsync(NtApiDotNet.NotifyCompletionFilter,System.Boolean)">
            <summary>
            Wait for a change on thie registry key asynchronously.
            </summary>
            <param name="completion_filter">Specify what changes will be notified.</param>
            <param name="watch_tree">True to watch the entire tree.</param>
            <returns>The status from the change notification.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.VisitAccessibleKeys(System.Func{NtApiDotNet.NtKey,System.Boolean},NtApiDotNet.KeyAccessRights,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Visit all accessible keys under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible key. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the keys.</param>
            <param name="recurse">True to recurse into sub keys.</param>
            <param name="max_depth">Specify max recursive depth. -1 to not set a limit.</param>
            <param name="open_for_backup">Open the key using backup privileges.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.VisitAccessibleKeys(System.Func{NtApiDotNet.NtKey,System.Boolean})">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.VisitAccessibleKeys(System.Func{NtApiDotNet.NtKey,System.Boolean},System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="recurse">True to recurse into sub directories.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.VisitAccessibleKeys(System.Func{NtApiDotNet.NtKey,System.Boolean},NtApiDotNet.KeyAccessRights,System.Boolean,System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the directory</param>
            <param name="recurse">True to recurse into sub directories.</param>
            <param name="open_for_backup">Open the key using backup privileges.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryInformation(NtApiDotNet.KeyInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetInformation(NtApiDotNet.KeySetInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtKey.LastWriteTime">
            <summary>
            Get key last write time
            </summary>
            <returns>The last write time</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.SubKeyCount">
            <summary>
            Get key subkey count
            </summary>
            <returns>The subkey count</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.ValueCount">
            <summary>
            Get key value count
            </summary>
            <returns>The key value count</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.TitleIndex">
            <summary>
            Get the key title index
            </summary>
            <returns>The key title index</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.ClassName">
            <summary>
            Get the key class name
            </summary>
            <returns>The key class name</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxValueNameLength">
            <summary>
            Get the maximum key value name length
            </summary>
            <returns>The maximum key value name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxValueDataLength">
            <summary>
            Get the maximum key value data length
            </summary>
            <returns>The maximum key value data length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxNameLength">
            <summary>
            Get the maximum subkey name length
            </summary>
            <returns>The maximum subkey name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxClassLength">
            <summary>
            Get the maximum class name length
            </summary>
            <returns>The maximum class name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.Win32Path">
            <summary>
            Get the key path as a Win32 style one. If not possible returns
            the original path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.Disposition">
            <summary>
            The disposition when the key was created.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.PredefinedHandle">
            <summary>
            Indicates the handle is a special pre-defined one by the kernel.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.VirtualizationFlags">
            <summary>
            Get or set virtualization flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.ControlFlags">
            <summary>
            Get or set key control flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.Wow64Flags">
            <summary>
            Get or set wow64 flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.Trusted">
            <summary>
            Indicates if this key is from a trusted hive.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.IsContainer">
            <summary>
            Returns whether this object is a container.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtLocale">
            <summary>
            Class to access NT locale information
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetNlsSectionPtr(NtApiDotNet.NlsSectionType,System.Int32,System.Boolean)">
            <summary>
            Get mapped NLS section
            </summary>
            <param name="type">The type of section</param>
            <param name="codepage">The codepage number</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The mapped section if it exists.</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetNlsSectionPtr(NtApiDotNet.NlsSectionType,System.Int32)">
            <summary>
            Get mapped NLS section
            </summary>
            <param name="type">The type of section</param>
            <param name="codepage">The codepage number</param>
            <returns>The mapped section if it exists.</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetDefaultLocal(System.Boolean,System.Boolean)">
            <summary>
            Get default locale ID
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The locale ID</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetDefaultLocal(System.Boolean)">
            <summary>
            Get default locale ID
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <returns>The locale ID</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.SetDefaultLocale(System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Set default locale
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <param name="throw_on_error">True to throw on error.</param>
            <param name="locale">The locale ID</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.SetDefaultLocale(System.Boolean,System.UInt32)">
            <summary>
            Set default locale
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <param name="locale">The locale ID</param>
        </member>
        <member name="T:NtApiDotNet.NtMutant">
            <summary>
            Class representing a NT Mutant object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(System.String,NtApiDotNet.NtObject,System.Boolean)">
            <summary>
            Create a new mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(NtApiDotNet.ObjectAttributes,System.Boolean,NtApiDotNet.MutantAccessRights)">
            <summary>
            Create a new mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(NtApiDotNet.ObjectAttributes,System.Boolean,NtApiDotNet.MutantAccessRights,System.Boolean)">
            <summary>
            Create a new mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <param name="desired_access">Desired access for mutant</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.MutantAccessRights)">
            <summary>
            Open a mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MutantAccessRights)">
            <summary>
            Open a mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MutantAccessRights,System.Boolean)">
            <summary>
            Open a mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="desired_access">Desired access for mutant</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Release(System.Boolean)">
            <summary>
            Release the mutant
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The previous release count</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Release">
            <summary>
            Release the mutant
            </summary>
            <returns>The previous release count</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.QueryInformation(NtApiDotNet.MutantInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="P:NtApiDotNet.NtMutant.Owner">
            <summary>
            Get the owner of the mutant.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMutant.CurrentCount">
            <summary>
            Get current count.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMutant.OwnedByCaller">
            <summary>
            Get wether mutant owned by current thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMutant.AbandonedState">
            <summary>
            Get whether mutant is abandoned.
            </summary>
        </member>
        <member name="T:NtApiDotNet.PipeAttributeType">
            <summary>
            Pipe attribute type.
            </summary>
        </member>
        <member name="F:NtApiDotNet.PipeAttributeType.Pipe">
            <summary>
            The pipe attributes.
            </summary>
        </member>
        <member name="F:NtApiDotNet.PipeAttributeType.Connection">
            <summary>
            The pipe connect attributes.
            </summary>
        </member>
        <member name="F:NtApiDotNet.PipeAttributeType.Handle">
            <summary>
            The pipe handle attributes.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtNamedPipeFileBase">
            <summary>
            Class to add additional methods to a file for a named pipe. This is a base class for server and client types.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.Boolean)">
            <summary>
            Get a named attribute from the pipe.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The attribute value as a byte array.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.Byte[],System.Boolean)">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status code for the attribute.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.Byte[])">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.Int32,System.Boolean)">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status code for the attribute.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.Int32)">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.String,System.Boolean)">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status code for the attribute.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.SetAttribute(NtApiDotNet.PipeAttributeType,System.String,System.String)">
            <summary>
            Set a named attribute for a pipe.
            </summary>
            <param name="attribute_type">The attribute type to set.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttribute(NtApiDotNet.PipeAttributeType,System.String)">
            <summary>
            Get a named attribute from the pipe.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value as a byte array.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttributeInt(NtApiDotNet.PipeAttributeType,System.String,System.Boolean)">
            <summary>
            Get a named attribute from the pipe as an integer.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The attribute value as an integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttributeInt(NtApiDotNet.PipeAttributeType,System.String)">
            <summary>
            Get a named attribute from the pipe as an integer.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value as an integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttributeString(NtApiDotNet.PipeAttributeType,System.String,System.Boolean)">
            <summary>
            Get a named attribute from the pipe as an integer.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The attribute value as an integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileBase.GetAttributeString(NtApiDotNet.PipeAttributeType,System.String)">
            <summary>
            Get a named attribute from the pipe as an integer.
            </summary>
            <param name="attribute_type">The attribute type to query.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute value as an integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="T:NtApiDotNet.NtNamedPipeFile">
            <summary>
            Class to add additional methods to a file for a named pipe server.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.Listen">
            <summary>
            Listen for a new connection to this named pipe server.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.ListenAsync(System.Threading.CancellationToken)">
            <summary>
            Listen for a new connection to this named pipe server asynchronously.
            </summary>
            <param name="token">An optional cancellation token.</param>
            <returns>The async task to complete.</returns>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.ListenAsync">
            <summary>
            Listen for a new connection to this named pipe server asynchronously.
            </summary>
            <returns>The async task to complete.</returns>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.Disconnect">
            <summary>
            Disconnect this named pipe server.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Disconnect this named pipe server asynchronously.
            </summary>
            <param name="token">An optional cancellation token.</param>
            <returns>The async task to complete.</returns>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.DisconnectAsync">
            <summary>
            Disconnect this named pipe server asynchronously.
            </summary>
            <returns>The async task to complete.</returns>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.Impersonate">
            <summary>
            Impersonate the client of the named pipe.
            </summary>
            <returns>The impersonation context. Dispose to revert to self.</returns>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFile.ClientProcessId">
            <summary>
            Get client process ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFile.ClientSessionId">
            <summary>
            Get client session ID. If this is 0 then the client is local, otherwise it's set by the SMB server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFile.ClientComputerName">
            <summary>
            Get client computer name.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFile.GetDefaultNamedPipeAcl">
            <summary>
            Get the default named pipe ACL for the current caller.
            </summary>
            <returns>The default named pipe ACL.</returns>
        </member>
        <member name="T:NtApiDotNet.NtNamedPipeFileClient">
            <summary>
            Class to add additional methods to a file for a named pipe client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtNamedPipeFileClient.DisableImpersonation">
            <summary>
            Disables impersonation on a named pipe.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFileClient.ServerProcessId">
            <summary>
            Get server process ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFileClient.ServerSessionId">
            <summary>
            Get client session ID.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtNamedPipeFilePair">
            <summary>
            A pair of named pipes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFilePair.ReadPipe">
            <summary>
            Read pipe for the pair.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtNamedPipeFilePair.WritePipe">
            <summary>
            Write pipe for the pair.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtPartition">
            <summary>
            Class representing a NT Partition object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtPartition.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.MemoryPartitionAccessRights,NtApiDotNet.NtPartition,System.Int32,System.Boolean)">
            <summary>
            Create a partition object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="parent_partition">Optional parent parition.</param>
            <param name="desired_access">Desired access for the partition.</param>
            <param name="preferred_node">The preferred node, -1 for any node.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtPartition.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.MemoryPartitionAccessRights,NtApiDotNet.NtPartition,System.Int32)">
            <summary>
            Create a partition object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="parent_partition">Optional parent parition.</param>
            <param name="desired_access">Desired access for the partition.</param>
            <param name="preferred_node">The preferred node, -1 for any node.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtPartition.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MemoryPartitionAccessRights,System.Boolean)">
            <summary>
            Open a partition object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the partition.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtPartition.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MemoryPartitionAccessRights)">
            <summary>
            Open a partition object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the partition.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="T:NtApiDotNet.NtRegistryTransaction">
            <summary>
            Class to represent a registry transaction object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(System.String)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create">
            <summary>
            Create a transaction
            </summary>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights,System.Boolean)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(System.String)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="path">The path to the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Enable">
            <summary>
            Enable the transaction for anything in the current thread context.
            </summary>
            <returns>The transaction context. This should be disposed to disable the transaction.</returns>
        </member>
        <member name="T:NtApiDotNet.NtSemaphore">
            <summary>
            Class to represent a NT Semaphore object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="initial_count">Initial count for semaphore</param>
            <param name="maximum_count">Maximum count for semaphore</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Int32,System.Int32)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="initial_count">Initial count for semaphore</param>
            <param name="maximum_count">Maximum count for semaphore</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(System.String,NtApiDotNet.NtObject,System.Int32,System.Int32)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="initial_count">Initial count for semaphore</param>
            /// <param name="maximum_count">Maximum count for semaphore</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Boolean)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SemaphoreAccessRights)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Release(System.Int32)">
            <summary>
            Release the semaphore
            </summary>
            <param name="count">The release count</param>
            <returns>The previous count</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Release(System.Int32,System.Boolean)">
            <summary>
            Release the semaphore
            </summary>
            <param name="count">The release count</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The previous count</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.QueryInformation(NtApiDotNet.SemaphoreInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="P:NtApiDotNet.NtSemaphore.CurrentCount">
            <summary>
            Current count of the semaphore.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSemaphore.MaximumCount">
            <summary>
            Maximum count of the semaphore.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtSession">
            <summary>
            Class to represent a Session object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SessionAccessRights,System.Boolean)">
            <summary>
            Open a session object.
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the object</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The open result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SessionAccessRights)">
            <summary>
            Open a session object.
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the object</param>
            <returns>The open result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SessionAccessRights)">
            <summary>
            Open a session object.
            </summary>
            <param name="name">Name of the object</param>
            <param name="root">Optional root directory for lookup</param>
            <param name="desired_access">Desired access for the object</param>
            <returns>The open result.</returns>
        </member>
        <member name="T:NtApiDotNet.NtSymbolicLink">
            <summary>
            Class representing a NT SymbolicLink object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.SymbolicLinkAccessRights,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.String,System.Boolean)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,NtApiDotNet.NtObject,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SymbolicLinkAccessRights)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.Boolean)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="P:NtApiDotNet.NtSymbolicLink.Target">
            <summary>
            Get the symbolic link target.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtSystemInfo">
            <summary>
            Class to access some NT system information
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetHandles(System.Int32,System.Boolean)">
            <summary>
            Get a list of handles
            </summary>
            <param name="pid">A process ID to filter on. If -1 will get all handles</param>
            <param name="allow_query">True to allow the handles returned to query for certain properties</param>
            <returns>The list of handles</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetHandles">
            <summary>
            Get a list of all handles
            </summary>
            <returns>The list of handles</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetThreadInformation(System.Int32)">
            <summary>
            Get a list of threads for a specific process.
            </summary>
            <param name="process_id">The process ID to list.</param>
            <returns>The list of thread information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetThreadInformation">
            <summary>
            Get a list of all threads.
            </summary>
            <returns>The list of thread information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetProcessInformation">
            <summary>
            Get all process information for the system.
            </summary>
            <returns>The list of process information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetPageFileNames">
            <summary>
            Get list of page filenames.
            </summary>
            <returns>The list of page file names.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.CreateKernelDump(System.String,NtApiDotNet.SystemDebugKernelDumpControlFlags,NtApiDotNet.SystemDebugKernelDumpPageControlFlags)">
            <summary>
            Create a kernel dump for current system.
            </summary>
            <param name="path">The path to the output file.</param>
            <param name="flags">Flags</param>
            <param name="page_flags">Page flags</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValueNames">
            <summary>
            Query all system environment value names.
            </summary>
            <returns>A list of names of environment values</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValueNamesAndValues">
            <summary>
            Query all system environment value names and values.
            </summary>
            <returns>A list of names of environment values</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValue(System.String,System.Guid,System.Boolean)">
            <summary>
            Query a single system environment value.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="vendor_guid">The associated vendor guid</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The system environment value.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValue(System.String,System.Guid)">
            <summary>
            Query a single system environment value.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="vendor_guid">The associated vendor guid</param>
            <returns>The system environment value.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.Byte[],NtApiDotNet.SystemEnvironmentValueAttribute)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.String,NtApiDotNet.SystemEnvironmentValueAttribute)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.AllocateLocallyUniqueId">
            <summary>
            Allocate a LUID.
            </summary>
            <returns>The allocated LUID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.ResolveObjectAddress(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject})">
            <summary>
            Get the addresses of a list of objects from the handle table and initialize the Address property.
            </summary>
            <param name="objects">The list of objects to initialize.</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.ResolveObjectAddress(NtApiDotNet.NtObject)">
            <summary>
            Get the address of an object in kernel memory from the handle table and initialize the Address property.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryDynamicCodeTrust(NtApiDotNet.SafeKernelObjectHandle,System.IntPtr,System.Int32)">
            <summary>
            Query whether a file is trusted for dynamic code.
            </summary>
            <param name="handle">The handle to a file to query.</param>
            <param name="image">Pointer to a memory buffer containing the image.</param>
            <param name="image_size">The size of the in-memory buffer.</param>
            <returns>True if the file is trusted.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryDynamicCodeTrust(System.Byte[])">
            <summary>
            Query whether a file is trusted for dynamic code.
            </summary>
            <param name="image">Pointer to a memory buffer containing the image.</param>
            <returns>The status code from the operation. Returns STATUS_SUCCESS is valid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryDynamicCodeTrust(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Query whether a file is trusted for dynamic code.
            </summary>
            <param name="handle">The handle to a file to query.</param>
            <returns>The status code from the operation. Returns STATUS_SUCCESS is valid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetDynamicCodeTrust(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Set a file is trusted for dynamic code.
            </summary>
            <param name="handle">The handle to a file to set.</param>
            <returns>The status code from the operation.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetRootSilos">
            <summary>
            Get list of root silos.
            </summary>
            <returns>The list of root silos.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetElamCertificate(NtApiDotNet.NtFile)">
            <summary>
            Set the ELAM certificate information.
            </summary>
            <param name="image_file">The signed file containing an ELAM certificate resource.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryCodeIntegrityCertificateInfo(NtApiDotNet.NtFile,System.Int32)">
            <summary>
            Query code integrity certificate information.
            </summary>
            <param name="image_file">The image file.</param>
            <param name="type">The type of check to make.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetProcessIdImagePath(System.Int32,System.Boolean)">
            <summary>
            Query the image path from a process ID.
            </summary>
            <param name="pid">The ID of the process.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The image path.</returns>
            <remarks>This method can be called without any permissions on the process.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetProcessIdImagePath(System.Int32)">
            <summary>
            Query the image path from a process ID.
            </summary>
            <param name="pid">The ID of the process.</param>
            <returns>The image path.</returns>
            <remarks>This method can be called without any permissions on the process.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.Query``1(NtApiDotNet.SystemInformationClass,``0,System.Boolean)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.Query``1(NtApiDotNet.SystemInformationClass,``0)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.Query``1(NtApiDotNet.SystemInformationClass)">
            <summary>
            Query a fixed structure from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryBuffer``1(NtApiDotNet.SystemInformationClass,``0,System.Boolean)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBuffer(NtApiDotNet.SystemInformationClass,System.Byte[],System.Boolean)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBuffer(NtApiDotNet.SystemInformationClass,System.Byte[])">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBuffer(NtApiDotNet.SystemInformationClass)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBytes(NtApiDotNet.SystemInformationClass,System.Byte[],System.Boolean)">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBytes(NtApiDotNet.SystemInformationClass,System.Byte[])">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <param name="init_buffer">A buffer to initialize the initial query. Can be null.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryRawBytes(NtApiDotNet.SystemInformationClass)">
            <summary>
            Query a variable buffer from the object and return as bytes.
            </summary>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryBuffer``1(NtApiDotNet.SystemInformationClass,``0)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <param name="default_value">A default value for the query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QueryBuffer``1(NtApiDotNet.SystemInformationClass)">
            <summary>
            Query a variable buffer from the object.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="info_class">The information class to query.</param>
            <returns>The result of the query.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.Set``1(NtApiDotNet.SystemInformationClass,``0,System.Boolean)">
            <summary>
            Set a value to the object.
            </summary>
            <typeparam name="T">The type of structure to set.</typeparam>
            <param name="info_class">The information class to set.</param>
            <param name="value">The value to set. If you specify a SafeBuffer then it'll be passed directly.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.Set``1(NtApiDotNet.SystemInformationClass,``0)">
            <summary>
            Set a value to the object.
            </summary>
            <typeparam name="T">The type of structure to set.</typeparam>
            <param name="info_class">The information class to set.</param>
            <param name="value">The value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetBuffer(NtApiDotNet.SystemInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Boolean)">
            <summary>
            Set a value to the object from a buffer.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="buffer">The value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetBuffer(NtApiDotNet.SystemInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Set a value to the object from a buffer..
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="buffer">The value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetBytes(NtApiDotNet.SystemInformationClass,System.Byte[],System.Boolean)">
            <summary>
            Set a raw value to the object.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="value">The raw value to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetBytes(NtApiDotNet.SystemInformationClass,System.Byte[])">
            <summary>
            Set a raw value to the object.
            </summary>
            <param name="info_class">The information class to set.</param>
            <param name="value">The raw value to set.</param>
            <returns>The NT status code of the set.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.KernelDebuggerEnabled">
            <summary>
            Get whether the kernel debugger is enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.KernelDebuggerNotPresent">
            <summary>
            Get whether the kernel debugger is not present.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityOptions">
            <summary>
            Get current code integrity option settings.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityPolicy">
            <summary>
            Get code integrity policy.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityUnlock">
            <summary>
            Get code integrity unlock information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityFullPolicy">
            <summary>
            Get all code integrity policies.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootEnabled">
            <summary>
            Get whether secure boot is enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootCapable">
            <summary>
            Get whether system supports secure boot.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootPolicy">
            <summary>
            Extract the secure boot policy.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.TimerResolution">
            <summary>
            Get system timer resolution.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.PageSize">
            <summary>
            Get system page size.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.NumberOfPhysicalPages">
            <summary>
            Get number of physical pages.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.LowestPhysicalPageNumber">
            <summary>
            Get lowest page number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.HighestPhysicalPageNumber">
            <summary>
            Get highest page number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.AllocationGranularity">
            <summary>
            Get allocation granularity.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.MinimumUserModeAddress">
            <summary>
            Get minimum user mode address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.MaximumUserModeAddress">
            <summary>
            Get maximum user mode address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.ActiveProcessorsAffinityMask">
            <summary>
            Get active processor affinity mask.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.NumberOfProcessors">
            <summary>
            Get number of processors.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.DeviceInformation">
            <summary>
            Get system device information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.ProcessorInformation">
            <summary>
            Get the system processor information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.EmulationProcessorInformation">
            <summary>
            Get the system emulation processor information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObject">
            <summary>
            Base class for all NtObject types we handle
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.QueryBasicInformation(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get the basic information for the object.
            </summary>
            <returns>The basic information</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.#ctor(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Base constructor
            </summary>
            <param name="handle">Handle to the object</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.NtProcess,NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate the internal handle to a new handle.
            </summary>
            <param name="flags">Attribute flags for new handle</param>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="src_process">The source process to duplicate from</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.DuplicateObjectOptions)">
            <summary>
            Duplicate the internal handle to a new handle.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess)">
            <summary>
            Duplicate a handle from the current process to a new handle with the same access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="dest_process">The desination process for the handle</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Duplicate a handle from and to the current process to a new handle with the same access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,System.Boolean)">
            <summary>
            Duplicate a handle from and to the current process to a new handle with the same access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.AccessMask)">
            <summary>
            Duplicate a handle from and to the current process to a new handle with new access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="access_rights">The access for the new handle.</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.CanOpenType(System.String)">
            <summary>
            Indicates whether a specific type of kernel object can be opened.
            </summary>
            <param name="typename">The kernel typename to check.</param>
            <returns>True if this type of object can be opened.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.OpenWithType(System.String,System.String,NtApiDotNet.NtObject,NtApiDotNet.AttributeFlags,NtApiDotNet.AccessMask,NtApiDotNet.SecurityQualityOfService,System.Boolean)">
            <summary>
            Open an NT object with a specified type.
            </summary>
            <param name="typename">The name of the type to open (e.g. Event). If null the method will try and lookup the appropriate type.</param>
            <param name="path">The path to the object to open.</param>
            <param name="root">A root directory to open from.</param>
            <param name="access">Generic access rights to the object.</param>
            <param name="attributes">Attributes to open the object.</param>
            <param name="security_quality_of_service">Security quality of service.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.OpenWithType(System.String,System.String,NtApiDotNet.NtObject,NtApiDotNet.AttributeFlags,NtApiDotNet.AccessMask,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Open an NT object with a specified type.
            </summary>
            <param name="typename">The name of the type to open (e.g. Event). If null the method will try and lookup the appropriate type.</param>
            <param name="path">The path to the object to open.</param>
            <param name="root">A root directory to open from.</param>
            <param name="access">Generic access rights to the object.</param>
            <param name="attributes">Attributes to open the object.</param>
            <param name="security_quality_of_service">Security quality of service.</param>
            <returns>The opened object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.OpenWithType(System.String,System.String,NtApiDotNet.NtObject,NtApiDotNet.AccessMask)">
            <summary>
            Open an NT object with a specified type.
            </summary>
            <param name="typename">The name of the type to open (e.g. Event). If null the method will try and lookup the appropriate type.</param>
            <param name="path">The path to the object to open.</param>
            <param name="root">A root directory to open from.</param>
            <param name="access">Generic access rights to the object.</param>
            <returns>The opened object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
            <exception cref="T:System.ArgumentException">Thrown if type of resource couldn't be found.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate a handle to a new handle, potentially in a different process.
            </summary>
            <param name="flags">Attribute flags for new handle</param>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="src_process">The source process to duplicate from</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions)">
            <summary>
            Duplicate a handle to a new handle, potentially in a different process.
            </summary>
            <param name="flags">Attribute flags for new handle</param>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="src_process">The source process to duplicate from</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject(NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject(NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject(NtApiDotNet.AccessMask)">
            <summary>
            Duplicate object with specific access rights.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject">
            <summary>
            Duplicate object with same access rights.
            </summary>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateAsWaitHandle">
            <summary>
            Duplicate the object handle as a WaitHandle.
            </summary>
            <returns>The wait handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.IsAccessMaskGranted(NtApiDotNet.AccessMask)">
            <summary>
            Check if access is granted to a set of rights
            </summary>
            <param name="access">The access rights to check</param>
            <returns>True if all the access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes(NtApiDotNet.SecurityInformation)">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes(NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <param name="throw_on_error">True to throw on error.</param>
            <return>The NT status result and security descriptor.</return>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <returns>Returns an array of bytes for the security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(System.Byte[],NtApiDotNet.SecurityInformation)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(System.Byte[],NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <return>The NT status result.</return>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,NtApiDotNet.SecurityInformation)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptor(NtApiDotNet.SecurityInformation)">
            <summary>
            Get the security descriptor specifying which parts to retrieve
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptor(NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Get the security descriptor specifying which parts to retrieve
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSddl">
            <summary>
            Get the security descriptor as an SDDL string
            </summary>
            <returns>The security descriptor as an SDDL string</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.MakeTemporary">
            <summary>
            Make the object a temporary object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.MakePermanent">
            <summary>
            Make the object a permanent object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="alertable">True to make the wait alertable</param>
            <param name="timeout">The time out</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="timeout">The time out</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Boolean,System.Int32)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="alertable">True to make the wait alertable</param>
            <param name="timeout_sec">The time out in seconds</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Int32)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="timeout_sec">The time out in seconds</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait">
            <summary>
            Wait on the object to become signalled for an infinite time.
            </summary>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.GrantedAccessAsString(System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GrantedAccessAsString">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.SameObject(NtApiDotNet.NtObject)">
            <summary>
            Check if this object is exactly the same as another.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if this is the same object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.ToString">
            <summary>
            Convert to a string
            </summary>
            <returns>The string form of the object</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.FullPath">
            <summary>
            Get full path to the object
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.GrantedAccessMask">
            <summary>
            Get the granted access as an unsigned integer
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.SecurityDescriptor">
            <summary>
            Get the security descriptor, with Dacl, Owner, Group and Label
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.Sddl">
            <summary>
            Get the security descriptor as an SDDL string
            </summary>
            <returns>The security descriptor as an SDDL string</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.Handle">
            <summary>
            The low-level handle to the object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.NtTypeName">
            <summary>
            Get the NT type name for this object.
            </summary>
            <returns>The NT type name.</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.NtType">
            <summary>
            Get the NtType for this object.
            </summary>
            <returns>The NtType for the type name</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.Name">
            <summary>
            Get the name of the object
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.CanSynchronize">
            <summary>
            Indicates if the handle can be used for synchronization.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.CreationTime">
            <summary>
            Get object creation time.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.AttributesFlags">
            <summary>
            Get the attribute flags for the object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.HandleReferenceCount">
            <summary>
            Get number of handles for this object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.PointerReferenceCount">
            <summary>
            Get reference count for this object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.Inherit">
            <summary>
            Get or set whether the handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.ProtectFromClose">
            <summary>
            Get or set whether the handle is protected from closing.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.Address">
            <summary>
            Get the object's address is kernel memory.
            </summary>
            <remarks>As getting the address is expensive you need to pass the object to NtSystemInfo::ResolveObjectAddress to intialize.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtObject.IsContainer">
            <summary>
            Returns whether this object is a container.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Dispose(System.Boolean)">
            <summary>
            Virtual Dispose method.
            </summary>
            <param name="disposing">True if disposing, false if finalizing</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Close">
            <summary>
            Close handle
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtProcess">
            <summary>
            Class representing a NT Process object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcesses(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcesses(NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Gets all accessible processes on the system.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <param name="from_system_info">True to get processes from system information rather than NtGetNextProcess</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetSessionProcesses(System.Int32,NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system in a particular session.
            </summary>
            <param name="session_id">The session ID.</param>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetSessionProcesses(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system in the current session session.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstProcess(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Get first accessible process (used in combination with GetNextProcess)
            </summary>
            <param name="desired_access">The access required for the process.</param>
            <returns>The accessible process, or null if one couldn't be opened.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Open(System.Int32,NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Open a process
            </summary>
            <param name="pid">The process ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Open(System.Int32,NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open a process
            </summary>
            <param name="pid">The process ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <returns>The opened process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.NtProcess,NtApiDotNet.ProcessCreateFlags,NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="ParentProcess">The parent process</param>
            <param name="Flags">Creation flags</param>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenCurrent">
            <summary>
            Open an actual handle to the current process rather than the pseudo one used for Current
            </summary>
            <returns>The process object</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetNextProcess(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Get next accessible process (used in combination with GetFirstProcess)
            </summary>
            <param name="desired_access">The access required for the process.</param>
            <returns>The accessible process, or null if one couldn't be opened.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstThread(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get first accessible thread for process.
            </summary>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The first thread object, or null if not accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstThread">
            <summary>
            Get first accessible thread for process.
            </summary>
            <returns>The first thread object, or null if not accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetThreads(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get accessible threads for a process.
            </summary>
            <param name="desired_access">The desired access for the threads</param>
            <returns>The list of threads</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetThreads">
            <summary>
            Get accessible threads for a process.
            </summary>
            <returns>The list of threads</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetPeb">
            <summary>
            Read a partial PEB from the process.
            </summary>
            <returns>The read PEB structure.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.ProcessCreateFlags,NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="Flags">Creation flags</param>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the process
            </summary>
            <param name="exitcode">The exit code for the termination</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Terminate(NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Terminate the process
            </summary>
            <param name="exitcode">The exit code for the termination</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetImageFilePath(System.Boolean,System.Boolean)">
            <summary>
            Get process image file path
            </summary>
            <param name="native">True to return the native image path, false for a Win32 style path</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The process image file path</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetImageFilePath(System.Boolean)">
            <summary>
            Get process image file path
            </summary>
            <param name="native">True to return the native image path, false for a Win32 style path</param>
            <returns>The process image file path</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetRawMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Boolean)">
            <summary>
            Get a mitigation policy raw value
            </summary>
            <param name="policy">The policy to get</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The raw policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetRawMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy)">
            <summary>
            Get a mitigation policy raw value
            </summary>
            <param name="policy">The policy to get</param>
            <returns>The raw policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Boolean)">
            <summary>
            Get a mitigation policy as an enumeration.
            </summary>
            <param name="policy">The policy to get.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The mitigation policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy)">
            <summary>
            Get a mitigation policy as an enumeration.
            </summary>
            <param name="policy">The policy to get.</param>
            <returns>The mitigation policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Boolean)">
            <summary>
            Get a mitigation policy raw value
            </summary>
            <param name="policy">The policy to get</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The raw policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy)">
            <summary>
            Get a mitigation policy raw value
            </summary>
            <param name="policy">The policy to get</param>
            <returns>The raw policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetRawMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Int32,System.Boolean)">
            <summary>
            Set a mitigation policy raw value
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetRawMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Int32)">
            <summary>
            Set a mitigation policy raw value
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Enum,System.Boolean)">
            <summary>
            Set a mitigation policy value from an enum.
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Enum)">
            <summary>
            Set a mitigation policy value from an enum.
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Int32,System.Boolean)">
            <summary>
            Set a mitigation policy raw value
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Int32)">
            <summary>
            Set a mitigation policy raw value
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.DisableDynamicCodePolicy">
            <summary>
            Disable dynamic code policy on another process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Suspend(System.Boolean)">
            <summary>
            Suspend the entire process.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Resume(System.Boolean)">
            <summary>
            Resume the entire process.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Suspend">
            <summary>
            Suspend the entire process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Resume">
            <summary>
            Resume the entire process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenToken">
            <summary>
            Open the process' token
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetToken(NtApiDotNet.NtToken,System.Boolean)">
            <summary>
            Set process access token. Process must be have not been started.
            </summary>
            <param name="token">The token to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetToken(NtApiDotNet.NtToken)">
            <summary>
            Set process access token. Process must be have not been started.
            </summary>
            <param name="token">The token to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ReadMemory(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="length">The length to read.</param>
            <param name="read_all">If true ensure we read all bytes, otherwise throw on exception.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ReadMemory(System.Int64,System.Int32)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="length">The length to read.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.WriteMemory(System.Int64,System.Byte[])">
            <summary>
            Write memory to a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <returns>The number of bytes written to the location</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ReadMemory``1(System.Int64)">
            <summary>
            Read structured memory from a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <returns>The read structure.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to read.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtProcess.WriteMemory``1(System.Int64,``0)">
            <summary>
            Write structured memory to a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to write.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ReadMemoryArray``1(System.Int64,System.Int32)">
            <summary>
            Read structured memory array from a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="count">The number of elements in the array to read.</param>
            <returns>The read structure.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to read.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtProcess.WriteMemoryArray``1(System.Int64,``0[])">
            <summary>
            Write structured memory array to a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data array to write.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to write.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMemoryInformation(System.Int64)">
            <summary>
            Query memory information for a process.
            </summary>
            <param name="base_address">The base address.</param>
            <returns>The queries memory information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMemoryInformation(System.Boolean)">
            <summary>
            Query all memory information regions in process memory.
            </summary>
            <returns>The list of memory regions.</returns>
            <param name="include_free_regions">True to include free regions of memory.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMemoryInformation">
            <summary>
            Query all memory information regions in process memory excluding free regions.
            </summary>
            <returns>The list of memory regions.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMappedImages">
            <summary>
            Query a list of mapped images in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMappedFiles">
            <summary>
            Query a list of mapped files in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMappedFiles">
            <summary>
            Query a list of all mapped files and images in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.AllocateMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect,System.Boolean)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.AllocateMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.AllocateMemory(System.Int64)">
            <summary>
            Allocate read/write virtual memory in a process.
            </summary>
            <param name="region_size">The region size to allocate.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.FreeMemory(System.Int64,System.Int64,NtApiDotNet.MemoryFreeType)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.FreeMemory(System.Int64,System.Int64,NtApiDotNet.MemoryFreeType,System.Boolean)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ProtectMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ProtectMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect,System.Boolean)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryWorkingSetEx(System.Int64,System.Boolean)">
            <summary>
            Query working set information for an address in a process.
            </summary>
            <param name="base_address">The base address to query.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The working set information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryWorkingSetEx(System.Int64)">
            <summary>
            Query working set information for an address in a process.
            </summary>
            <param name="base_address">The base address to query.</param>
            <returns>The working set information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetDeviceMap(NtApiDotNet.NtDirectory)">
            <summary>
            Set the process device map.
            </summary>
            <param name="device_map">The device map directory to set.</param>
            <remarks>Note that due to a bug in the Wow64 layer this won't work in a 32 bit process on a 64 bit system.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetDeviceMap(NtApiDotNet.NtDirectory,System.Boolean)">
            <summary>
            Set the process device map.
            </summary>
            <param name="device_map">The device map directory to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <remarks>Note that due to a bug in the Wow64 layer this won't work in a 32 bit process on a 64 bit system.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessDeviceMap(NtApiDotNet.NtDirectory)">
            <summary>
            Set the process device map.
            </summary>
            <param name="device_map">The device map directory to set.</param>
            <remarks>Note that due to a bug in the Wow64 layer this won't work in a 32 bit process on a 64 bit system.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessDeviceMap(NtApiDotNet.NtDirectory,System.Boolean)">
            <summary>
            Set the process device map.
            </summary>
            <param name="device_map">The device map directory to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <remarks>Note that due to a bug in the Wow64 layer this won't work in a 32 bit process on a 64 bit system.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenDebugObject(System.Boolean)">
            <summary>
            Open a process' debug object.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The process' debug object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenDebugObject">
            <summary>
            Open a process' debug object.
            </summary>
            <returns>The process' debug object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsImageFile(NtApiDotNet.NtFile)">
            <summary>
            Queries whether process is backed by a specific file.
            </summary>
            <param name="file">File object opened with Synchronize and Execute access to test against.</param>
            <returns>True if the process is created from the image file.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenParent(NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Open parent process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenParent(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open parent process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenParent">
            <summary>
            Open parent process by ID.
            </summary>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenOwner(NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Open owner process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenOwner(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open owner process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenOwner">
            <summary>
            Open owner process by ID.
            </summary>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsInJob(NtApiDotNet.NtJob)">
            <summary>
            Get if process is in a job.
            </summary>
            <param name="job">A specific job to check</param>
            <returns>True if in specific job.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsInJob">
            <summary>
            Get if process is in a job.
            </summary>
            <returns>True if in a job.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTable">
            <summary>
            Get process handle table.
            </summary>
            <returns>The list of process handles.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTableAsObjects(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <param name="named_only">True to only return named objects</param>
            <param name="type_names">A list of typenames to filter on (if empty then return all)</param>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTableAsObjects">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenImageSection(System.Boolean)">
            <summary>
            Open image section for process.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The opened image section.</returns>
            <remarks>Should only work on the pseudo process handle.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenImageSection">
            <summary>
            Open image section for process.
            </summary>
            <returns>The opened image section.</returns>
            <remarks>Should only work on the pseudo process handle.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Unmap(System.IntPtr,NtApiDotNet.MemUnmapFlags,System.Boolean)">
            <summary>
            Unmap a section.
            </summary>
            <param name="base_address">The base address to unmap.</param>
            <param name="flags">Flags for unmapping memory.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Unmap(System.IntPtr,System.Boolean)">
            <summary>
            Unmap a section.
            </summary>
            <param name="base_address">The base address to unmap.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Unmap(System.IntPtr,NtApiDotNet.MemUnmapFlags)">
            <summary>
            Unmap a section.
            </summary>
            <param name="base_address">The base address to unmap.</param>
            <param name="flags">Flags for unmapping memory.</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Unmap(System.IntPtr)">
            <summary>
            Unmap a section.
            </summary>
            <param name="base_address">The base address to unmap.</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryInformation(NtApiDotNet.ProcessInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetInformation(NtApiDotNet.ProcessInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.SessionId">
            <summary>
            Get the process' session ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ProcessId">
            <summary>
            Get the process' ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ParentProcessId">
            <summary>
            Get the process' parent process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.PebAddress">
            <summary>
            Get the memory address of the PEB
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.PebAddress32">
            <summary>
            Get the memory address of the PEB for a 32 bit process.
            </summary>
            <remarks>If the process is 64 bit, or the OS is 32 bit this returns the same value as PebAddress.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ImageBaseAddress">
            <summary>
            Get the base address of the process from the PEB.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.PebFlags">
            <summary>
            Read flags from PEB.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExitStatus">
            <summary>
            Get the process' exit status.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.CommandLine">
            <summary>
            Get the process' command line
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.DepStatus">
            <summary>
            Get process DEP status
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.HasDebugPort">
            <summary>
            Get whether process has a debug port.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.HandleCount">
            <summary>
            Get handle count.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.BreakOnTermination">
            <summary>
            Get break on termination flag.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.DebugFlags">
            <summary>
            Get debug flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExecuteFlags">
            <summary>
            Get execute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IoPriority">
            <summary>
            Get IO priority.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Cookie">
            <summary>
            Get secure cookie.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.User">
            <summary>
            Get the process user.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Mitigations">
            <summary>
            Get process mitigations
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExtendedFlags">
            <summary>
            Get extended process flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.WindowTitle">
            <summary>
            Get process window title (from Process Parameters).
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.WindowFlags">
            <summary>
            Get process window flags (from Process Parameters).
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.SubsystemType">
            <summary>
            Get the process subsystem type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Wow64">
            <summary>
            Get if the process is Wow64
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Is64Bit">
            <summary>
            Get whether the process is 64bit.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.LUIDDeviceMapsEnabled">
            <summary>
            Get whether LUID device maps are enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IsSandboxToken">
            <summary>
            Return whether this process is sandboxed.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.HardErrorMode">
            <summary>
            Get or set the hard error mode.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IsChildProcessRestricted">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IsDeleting">
            <summary>
            Gets whether the process is currently deleting.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Protection">
            <summary>
            Get process protection information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ImageInformation">
            <summary>
            Query process section image information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.FullPath">
            <summary>
            Get full image path name in native format
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.OwnerProcessId">
            <summary>
            Get owner process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.PackageFullName">
            <summary>
            Query the process token's full package name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Current">
            <summary>
            Get the current process.
            </summary>
            <remarks>This only uses the pseudo handle, for the process. If you need a proper handle use OpenCurrent.</remarks>
        </member>
        <member name="T:NtApiDotNet.NtSection">
            <summary>
            Class to represent a NT Section object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateImageSection(System.String,NtApiDotNet.NtFile)">
            <summary>
            Create an Image section object
            </summary>
            <param name="object_name">The object name to use for the image section.</param>
            <param name="file">The file to create the image section from</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateImageSection(NtApiDotNet.NtFile)">
            <summary>
            Create an Image section object
            </summary>
            <param name="file">The file to create the image section from</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateReadOnlyDataSection(NtApiDotNet.NtFile)">
            <summary>
            Create a data section from a file.
            </summary>
            <param name="file">The file to create from.</param>
            <returns>The created section object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile,System.Boolean)">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes. The lower 5 bits can be used to specify the NUMA node.</param>
            <param name="file">Optional backing file</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile)">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.SectionAccessRights,System.Nullable{System.Int64},NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile)">
            <summary>
            Create a section object
            </summary>
            <param name="path">The path to the section</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes. The lower 5 bits can be used to specify the NUMA node.</param>
            <param name="file">Optional backing file</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(System.Int64)">
            <summary>
            Create a section object
            </summary>
            <param name="size">Size of the section</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateEx(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile,NtApiDotNet.MemSectionExtendedParameter[],System.Boolean)">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <param name="extended_parameters">Extended parameters for section create.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateEx(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile,NtApiDotNet.MemSectionExtendedParameter[])">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <param name="extended_parameters">Extended parameters for section create.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,System.Boolean)">
            <summary>
            Open a section object
            </summary>
            <param name="object_attributes">The object attributes for the section</param>
            <param name="desired_access">The desired access for the sections</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights)">
            <summary>
            Open a section object
            </summary>
            <param name="object_attributes">The object attributes for the section</param>
            <param name="desired_access">The desired access for the sections</param>
            <returns>The opened section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SectionAccessRights)">
            <summary>
            Open a section object
            </summary>
            <param name="path">The path to the section</param>
            <param name="root">Root object if the path is relative</param>
            <param name="desired_access">The desired access for the sections</param>
            <returns>The opened section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.MemUnmapFlags,System.Boolean)">
            <summary>
            Unmap a section in a specified process.
            </summary>
            <param name="process">The process to unmap the section.</param>
            <param name="base_address">The base address to unmap.</param>
            <param name="flags">Flags for unmapping memory.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(NtApiDotNet.NtProcess,System.IntPtr,System.Boolean)">
            <summary>
            Unmap a section in a specified process.
            </summary>
            <param name="process">The process to unmap the section.</param>
            <param name="base_address">The base address to unmap.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(System.IntPtr,System.Boolean)">
            <summary>
            Unmap a section in the current process.
            </summary>
            <param name="base_address">The base address to unmap.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(NtApiDotNet.NtProcess,System.IntPtr,NtApiDotNet.MemUnmapFlags)">
            <summary>
            Unmap a section in a specified process.
            </summary>
            <param name="process">The process to unmap the section.</param>
            <param name="base_address">The base address to unmap.</param>
            <param name="flags">Flags for unmapping memory.</param>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(NtApiDotNet.NtProcess,System.IntPtr)">
            <summary>
            Unmap a section in a specified process.
            </summary>
            <param name="process">The process to unmap the section.</param>
            <param name="base_address">The base address to unmap.</param>
        </member>
        <member name="M:NtApiDotNet.NtSection.Unmap(System.IntPtr)">
            <summary>
            Unmap a section in the current process.
            </summary>
            <param name="base_address">The base address to unmap.</param>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapReadWrite(NtApiDotNet.NtProcess)">
            <summary>
            Map section Read/Write into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapRead(NtApiDotNet.NtProcess)">
            <summary>
            Map section Read Only into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapRead">
            <summary>
            Map section Read Only into a current process
            </summary>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapReadWrite">
            <summary>
            Map section Read/Write into a current process
            </summary>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,NtApiDotNet.LargeInteger,NtApiDotNet.SectionInherit,NtApiDotNet.AllocationType,System.Boolean)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <param name="base_address">Optional base address</param>
            <param name="zero_bits">Number of zero bits.</param>
            <param name="commit_size">Size of pages to commit.</param>
            <param name="section_offset">Offset into the section.</param>
            <param name="view_size">Optional view size</param>
            <param name="allocation_type">Allocation type.</param>
            <param name="section_inherit">Section inheritance type.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,NtApiDotNet.LargeInteger,NtApiDotNet.SectionInherit,NtApiDotNet.AllocationType)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <param name="base_address">Optional base address</param>
            <param name="zero_bits">Number of zero bits.</param>
            <param name="commit_size">Size of pages to commit.</param>
            <param name="section_offset">Offset into the section.</param>
            <param name="view_size">Optional view size</param>
            <param name="allocation_type">Allocation type.</param>
            <param name="section_inherit">Section inheritance type.</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect,System.IntPtr,System.IntPtr)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <param name="base_address">Optional base address</param>
            <param name="view_size">Optional view size</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Map section into the current process
            </summary>
            <param name="type">The protection of the mapping</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Extend(System.Int64,System.Boolean)">
            <summary>
            Extend the section to a new size.
            </summary>
            <param name="new_size">The new size to extend to.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The new size.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Extend(System.Int64)">
            <summary>
            Extend the section to a new size.
            </summary>
            <param name="new_size">The new size to extend to.</param>
            <returns>The new size.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.QueryInformation(NtApiDotNet.SectionInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="P:NtApiDotNet.NtSection.Size">
            <summary>
            Get the size of the section
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSection.Attributes">
            <summary>
            Get the attributes of the section
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSection.ImageInformation">
            <summary>
            Get section image information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSection.OriginalBaseAddress">
            <summary>
            Get original section base address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSection.RelocationAddress">
            <summary>
            Get relocation address.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtStatus">
            <summary>
            NT status values
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtThread">
            <summary>
            Class to represent a NT Thread object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.ThreadAccessRights,NtApiDotNet.NtProcess,System.Int64,System.Int64,NtApiDotNet.ThreadCreateFlags,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{NtApiDotNet.ProcessAttribute},System.Boolean)">
            <summary>
            Create a new thread in a process.
            </summary>
            <param name="object_attributes">The object attributes for the thread object.</param>
            <param name="desired_acccess">Desired access for the handle.</param>
            <param name="process">Process to create the thread in.</param>
            <param name="start_routine">Address of the start routine.</param>
            <param name="argument">Argument to pass to the thread.</param>
            <param name="create_flags">Creation flags.</param>
            <param name="zero_bits">Zero bits for the stack address.</param>
            <param name="stack_size">Size of the committed stack.</param>
            <param name="maximum_stack_size">Maximum reserved stack size.</param>
            <param name="attribute_list">Optional attribute list.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The created thread object.</returns>
            <remarks>This creates a native thread, not a Win32 thread. This might cause unexpected things to fail as they're not initialized.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.ThreadAccessRights,NtApiDotNet.NtProcess,System.Int64,System.Int64,NtApiDotNet.ThreadCreateFlags,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{NtApiDotNet.ProcessAttribute})">
            <summary>
            Create a new thread in a process.
            </summary>
            <param name="object_attributes">The object attributes for the thread object.</param>
            <param name="desired_acccess">Desired access for the handle.</param>
            <param name="process">Process to create the thread in.</param>
            <param name="start_routine">Address of the start routine.</param>
            <param name="argument">Argument to pass to the thread.</param>
            <param name="create_flags">Creation flags.</param>
            <param name="zero_bits">Zero bits for the stack address.</param>
            <param name="stack_size">Size of the committed stack.</param>
            <param name="maximum_stack_size">Maximum reserved stack size.</param>
            <param name="attribute_list">Optional attribute list.</param>
            <returns>The created thread object.</returns>
            <remarks>This creates a native thread, not a Win32 thread. This might cause unexpected things to fail as they're not initialized.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.Create(NtApiDotNet.NtProcess,System.Int64,System.Int64,NtApiDotNet.ThreadCreateFlags,System.Int64,System.Boolean)">
            <summary>
            Create a new thread in a process.
            </summary>
            <param name="process">Process to create the thread in.</param>
            <param name="start_routine">Address of the start routine.</param>
            <param name="argument">Argument to pass to the thread.</param>
            <param name="create_flags">Creation flags.</param>
            <param name="stack_size">Size of the committed stack.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The created thread object.</returns>
            <remarks>This creates a native thread, not a Win32 thread. This might cause unexpected things to fail as they're not initialized.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.Create(NtApiDotNet.NtProcess,System.Int64,System.Int64,NtApiDotNet.ThreadCreateFlags,System.Int64)">
            <summary>
            Create a new thread in a process.
            </summary>
            <param name="process">Process to create the thread in.</param>
            <param name="start_routine">Address of the start routine.</param>
            <param name="argument">Argument to pass to the thread.</param>
            <param name="create_flags">Creation flags.</param>
            <param name="stack_size">Size of the committed stack.</param>
            <returns>The created thread object.</returns>
            <remarks>This creates a native thread, not a Win32 thread. This might cause unexpected things to fail as they're not initialized.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.Open(System.Int32,NtApiDotNet.ThreadAccessRights,System.Boolean)">
            <summary>
            Open a thread
            </summary>
            <param name="thread_id">The thread ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Open(System.Int32,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Open a thread
            </summary>
            <param name="thread_id">The thread ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetThreads(NtApiDotNet.ThreadAccessRights,System.Boolean)">
            <summary>
            Gets all accessible threads on the system.
            </summary>
            <param name="desired_access">The desired access for each thread.</param>
            <param name="from_system_info">Get the thread list from system information.</param>
            <returns>The list of accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetThreads(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Gets all accessible threads on the system.
            </summary>
            <param name="desired_access">The desired access for each thread.</param>
            <returns>The list of accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetFirstThread(NtApiDotNet.NtProcess,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get first thread for process.
            </summary>
            <param name="process">The process handle to get the threads.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The first thread, or null if no more available.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Sleep(System.Boolean,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Sleep the current thread
            </summary>
            <param name="alertable">Set if the thread should be alertable</param>
            <param name="delay">The delay, negative values indicate relative times.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>STATUS_ALERTED if the thread was alerted, other success or error code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Sleep(System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Sleep the current thread
            </summary>
            <param name="alertable">Set if the thread should be alertable</param>
            <param name="delay">The delay, negative values indicate relative times.</param>
            <returns>True if the thread was alerted before the delay expired.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Sleep(System.Boolean,System.Int64)">
            <summary>
            Sleep the current thread
            </summary>
            <param name="alertable">Set if the thread should be alertable</param>
            <param name="delay">The delay, negative values indicate relative times.</param>
            <returns>True if the thread was alerted before the delay expired.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SleepMs(System.Int64)">
            <summary>
            Sleep the current thread for a specified number of milliseconds.
            </summary>
            <param name="delay_ms">The delay in milliseconds.</param>
            <returns>True if the thread was alerted before the delay expired.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.OpenCurrent">
            <summary>
            Open an actual handle to the current thread rather than the pseudo one used for Current
            </summary>
            <returns>The thread object</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetWorkOnBehalfThread(System.UInt64,System.Boolean)">
            <summary>
            Set the work on behalf ticket.
            </summary>
            <param name="ticket">The ticket to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status code from the set.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetWorkOnBehalfThread(System.UInt64)">
            <summary>
            Set the work on behalf ticket.
            </summary>
            <param name="ticket">The ticket to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetWorkOnBehalfThread(NtApiDotNet.WorkOnBehalfTicket,System.Boolean)">
            <summary>
            Set the work on behalf ticket.
            </summary>
            <param name="ticket">The ticket to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status code from the set.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetWorkOnBehalfThread(NtApiDotNet.WorkOnBehalfTicket)">
            <summary>
            Set the work on behalf ticket.
            </summary>
            <param name="ticket">The ticket to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.TestAlert(System.Boolean)">
            <summary>
            Test alert status for the current thread.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.TestAlert">
            <summary>
            Test alert status for the current thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Current">
            <summary>
            Get the current thread.
            </summary>
            <remarks>This only uses the pseudo handle, for the thread. You can't use it in different threads. If you need to do that use OpenCurrent.</remarks>
            <see cref="M:NtApiDotNet.NtThread.OpenCurrent"/>
        </member>
        <member name="P:NtApiDotNet.NtThread.WorkOnBehalfTicket">
            <summary>
            Get or set the work on behalf ticket for the current thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.WorkOnBehalfTicketXor">
            <summary>
            Get the work on behalf ticket xor key.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.Resume(System.Boolean)">
            <summary>
            Resume the thread.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Resume">
            <summary>
            Resume the thread.
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Suspend(System.Boolean)">
            <summary>
            Suspend the thread.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Suspend">
            <summary>
            Suspend the thread
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Terminate(NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Terminate the thread
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <param name="status">The thread status exit code</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the thread
            </summary>
            <param name="status">The thread status exit code</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.Alert(System.Boolean)">
            <summary>
            Wake the thread from an alertable state.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Alert">
            <summary>
            Wake the thread from an alertable state.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.AlertResume(System.Boolean)">
            <summary>
            Wake the thread from an alertable state and resume the thread.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The previous suspend count for the thread.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.AlertResume">
            <summary>
            Wake the thread from an alertable state and resume the thread.
            </summary>
            <returns>The previous suspend count for the thread.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.HideFromDebugger(System.Boolean)">
            <summary>
            Hide the thread from debug events.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.HideFromDebugger">
            <summary>
            Hide the thread from debug events.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetImpersonationToken(NtApiDotNet.NtToken,System.Boolean)">
            <summary>
            The set the thread's impersonation token
            </summary>
            <param name="token">The impersonation token to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetImpersonationToken(NtApiDotNet.NtToken)">
            <summary>
            The set the thread's impersonation token
            </summary>
            <param name="token">The impersonation token to set</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateAnonymousToken(System.Boolean)">
            <summary>
            Impersonate the anonymous token
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateAnonymousToken">
            <summary>
            Impersonate the anonymous token
            </summary>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Impersonate(NtApiDotNet.NtToken,System.Boolean)">
            <summary>
            Impersonate a token
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <param name="token">The token to impersonate.</param>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Impersonate(NtApiDotNet.NtToken)">
            <summary>
            Impersonate a token
            </summary>
            <param name="token">The token to impersonate.</param>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread,NtApiDotNet.SecurityQualityOfService,System.Boolean)">
            <summary>
            Impersonate another thread.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <param name="security_quality_of_service">The impersonation security quality of service.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread,NtApiDotNet.SecurityImpersonationLevel,System.Boolean)">
            <summary>
            Impersonate another thread's security context.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <param name="impersonation_level">The impersonation level for the token.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate another thread's security context.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <param name="impersonation_level">The impersonation level for the token.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread,System.Boolean)">
            <summary>
            Impersonate another thread's security context at impersonation level.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread)">
            <summary>
            Impersonate another thread's security context at impersonation level.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.OpenToken">
            <summary>
            Open the thread's token
            </summary>
            <returns>The token, null if no token available</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueueUserApc(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Queue a user APC to the thread.
            </summary>
            <param name="apc_routine">The APC callback pointer.</param>
            <param name="normal_context">Context parameter.</param>
            <param name="system_argument1">System argument 1.</param>
            <param name="system_argument2">System argument 2.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueueUserApc(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Queue a user APC to the thread.
            </summary>
            <param name="apc_routine">The APC callback pointer.</param>
            <param name="normal_context">Context parameter.</param>
            <param name="system_argument1">System argument 1.</param>
            <param name="system_argument2">System argument 2.</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueueUserApc(NtApiDotNet.ApcCallback,System.IntPtr,System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Queue a user APC to the thread.
            </summary>
            <param name="apc_routine">The APC callback delegate.</param>
            <param name="normal_context">Context parameter.</param>
            <param name="system_argument1">System argument 1.</param>
            <param name="system_argument2">System argument 2.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
            <remarks>This is only for APCs in the current process. You also must ensure the delegate is
            valid at all times as this method doesn't take a reference to the delegate to prevent it being
            garbage collected.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueueUserApc(NtApiDotNet.ApcCallback,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Queue a user APC to the thread.
            </summary>
            <param name="apc_routine">The APC callback delegate.</param>
            <param name="normal_context">Context parameter.</param>
            <param name="system_argument1">System argument 1.</param>
            <param name="system_argument2">System argument 2.</param>
            <remarks>This is only for APCs in the current process. You also must ensure the delegate is
            valid at all times as this method doesn't take a reference to the delegate to prevent it being
            garbage collected.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetNextThread(NtApiDotNet.NtProcess,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get next thread for process relative to current thread.
            </summary>
            <param name="process">The process handle to get the threads.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The next thread, or null if no more available.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetContext(NtApiDotNet.ContextFlags,System.Boolean)">
            <summary>
            Get the thread context.
            </summary>
            <param name="flags">Flags for context parts to get.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>An instance of an IContext object. Needs to be cast to correct type to access.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetContext(NtApiDotNet.ContextFlags)">
            <summary>
            Get the thread context.
            </summary>
            <param name="flags">Flags for context parts to get.</param>
            <returns>An instance of an IContext object. Needs to be cast to correct type to access.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetAlpcServerInformation(System.Boolean)">
            <summary>
            Get current waiting server information.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The thread ALPC server information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetAlpcServerInformation">
            <summary>
            Get current waiting server information.
            </summary>
            <returns>The thread ALPC server information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueryInformation(NtApiDotNet.ThreadInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetInformation(NtApiDotNet.ThreadInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtThread.ThreadId">
            <summary>
            Get thread ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ProcessId">
            <summary>
            Get process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ProcessName">
            <summary>
            Get name of process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Priority">
            <summary>
            Get thread's current priority
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.BasePriority">
            <summary>
            Get thread's base priority
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.TebBaseAddress">
            <summary>
            Get the thread's TEB base address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.AllowDynamicCode">
            <summary>
            Get whether thread is allowed to create dynamic code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Impersonating">
            <summary>
            Get whether thread is impersonating another token.
            </summary>
            <remarks>Note that this tries to open the thread's token and return true if it could open. A return of false
            might just indicate that the caller doesn't have permission to open the token, not that it's not impersonating.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtThread.FullPath">
            <summary>
            Get name of the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Description">
            <summary>
            Get or set a thread's description.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Win32StartAddress">
            <summary>
            Get the Win32 start address for the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.LastSystemCall">
            <summary>
            Get last system call on the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.SuspendCount">
            <summary>
            Get the thread's suspend count.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.IoPending">
            <summary>
            Get whether the thread has pending IO.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.CreateTime">
            <summary>
            Get the creation time of the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ExitTime">
            <summary>
            Get the exit time of the thread (0 if not exited)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.KernelTime">
            <summary>
            Get the time spent in the kernel.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.UserTime">
            <summary>
            Get the time spent in user mode.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ThreadInformation">
            <summary>
            Get thread information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtToken">
            <summary>
            Class representing a Token object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights,NtApiDotNet.AttributeFlags,NtApiDotNet.SecurityDescriptor,System.Boolean)">
            <summary>
            Duplicate token as specific type.
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <param name="attributes">The object attributes for the token.</param>
            <param name="security_descriptor">The security descriptor for the token.</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights,NtApiDotNet.AttributeFlags,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Duplicate token as specific type.
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <param name="attributes">The object attributes for the token.</param>
            <param name="security_descriptor">The security descriptor for the token.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Duplicate token as specific type.
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights)">
            <summary>
            Duplicate token as specific type
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken">
            <summary>
            Duplicate the token as a primary token
            </summary>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Duplicate token as an impersonation token with a specific level
            </summary>
            <param name="level">The token impersonation level</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(System.String,System.Boolean,System.Boolean)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The name of the privilege (e.g. SeDebugPrivilege)</param>
            <param name="enable">True to enable the privilege, false to disable</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(System.String,System.Boolean)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The name of the privilege (e.g. SeDebugPrivilege)</param>
            <param name="enable">True to enable the privilege, false to disable</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.Luid,NtApiDotNet.PrivilegeAttributes,System.Boolean)">
            <summary>
            Set a privilege state
            </summary>
            <param name="luid">The luid of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.Luid,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Set a privilege state
            </summary>
            <param name="luid">The luid of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.TokenPrivilegeValue,NtApiDotNet.PrivilegeAttributes,System.Boolean)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The value of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.TokenPrivilegeValue,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The value of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.RemovePrivilege(NtApiDotNet.TokenPrivilegeValue)">
            <summary>
            Remove a privilege.
            </summary>
            <param name="privilege">The value of the privilege to remove.</param>
            <returns>True if successfully removed the privilege.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.RemovePrivilege(NtApiDotNet.Luid)">
            <summary>
            Remove a privilege.
            </summary>
            <param name="luid">The LUID of the privilege to remove.</param>
            <returns>True if successfully removed the privilege.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid)">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid,NtApiDotNet.NtObject[])">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <param name="handles">List of handles to capture with the token</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject},NtApiDotNet.TokenAccessRights)">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <param name="handles">List of handles to capture with the token</param>
            <param name="capability_sids">List of capability sids to add.</param>
            <param name="desired_access">Desired token access.</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilegeValue},System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Filter a token to remove groups/privileges and add restricted SIDs
            </summary>
            <param name="flags">Filter token flags</param>
            <param name="sids_to_disable">List of SIDs to disable</param>
            <param name="privileges_to_delete">List of privileges to delete</param>
            <param name="restricted_sids">List of restricted SIDs to add</param>
            <returns>The new token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.Luid},System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Filter a token to remove groups/privileges and add restricted SIDs
            </summary>
            <param name="flags">Filter token flags</param>
            <param name="sids_to_disable">List of SIDs to disable</param>
            <param name="privileges_to_delete">List of privileges to delete</param>
            <param name="restricted_sids">List of restricted SIDs to add</param>
            <returns>The new token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags)">
            <summary>
            Filter a token to remove privileges and groups.
            </summary>
            <param name="flags">Filter token flags</param>
            <returns>The new filtered token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetGroup(NtApiDotNet.Sid,NtApiDotNet.GroupAttributes)">
            <summary>
            Set the state of a group
            </summary>
            <param name="group">The group SID to set</param>
            <param name="attributes">The attributes to set</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetSessionId(System.Int32)">
            <summary>
            Set the session ID of a token
            </summary>
            <param name="session_id">The session ID</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetDefaultDacl(NtApiDotNet.Acl)">
            <summary>
            Set a token's default DACL
            </summary>
            <param name="dacl">The DACL to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetOrigin(NtApiDotNet.Luid)">
            <summary>
            Set the origin logon session ID.
            </summary>
            <param name="origin">The origin logon session ID.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetVirtualizationEnabled(System.Boolean)">
            <summary>
            Set virtualization enabled
            </summary>
            <param name="enable">True to enable virtualization</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetUIAccess(System.Boolean)">
            <summary>
            Set UI Access flag.
            </summary>
            <param name="enable">True to enable UI Access.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetLinkedToken">
            <summary>
            Get the linked token 
            </summary>
            <returns>The linked token</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetLinkedToken(NtApiDotNet.NtToken)">
            <summary>
            Set the linked token.
            </summary>
            <param name="token">The token to set.</param>
            <remarks>Requires SeCreateTokenPrivilege.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtToken.Impersonate">
            <summary>
            Impersonate the token.
            </summary>
            <returns>An impersonation context, dispose to revert to process token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Impersonate(NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate the token.
            </summary>
            <param name="impersonation_level">Impersonation level for token.</param>
            <returns>An impersonation context, dispose to revert to process token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate``1(System.Func{``0})">
            <summary>
            Run a function under impersonation.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="callback">The callback to run.</param>
            <returns>The return value from the callback.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate(System.Action)">
            <summary>
            Run an action under impersonation.
            </summary>
            <param name="callback">The callback to run.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate``1(System.Func{``0},NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Run a function under impersonation.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="callback">The callback to run.</param>
            <param name="impersonation_level">Impersonation level for token.</param>
            <returns>The return value from the callback.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate(System.Action,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Run an action under impersonation.
            </summary>
            <param name="callback">The callback to run.</param>
            <param name="impersonation_level">Impersonation level for token.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetSecurityAttributeByName(System.String,NtApiDotNet.ClaimSecurityValueType)">
            <summary>
            Get a security attribute by name.
            </summary>
            <param name="name">The name of the security attribute, such as WIN://PKG</param>
            <param name="type">The expected type of the security attribute. If None return ignore type check.</param>
            <returns>The security attribute or null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetSecurityAttributeByName(System.String)">
            <summary>
            Get a security attribute by name.
            </summary>
            <param name="name">The name of the security attribute, such as WIN://PKG</param>
            <returns>The security attribute or null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetIntegrityLevelRaw(System.Int32)">
            <summary>
            Set the token's integrity level.
            </summary>
            <param name="level">The level to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetIntegrityLevel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Set the token's integrity level.
            </summary>
            <param name="level">The level to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetPrivilege(NtApiDotNet.TokenPrivilegeValue)">
            <summary>
            Get the state of a privilege.
            </summary>
            <param name="privilege">The privilege to get the state of.</param>
            <returns>The privilege, or null if it can't be found</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if can't query privileges</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Compare(NtApiDotNet.NtToken)">
            <summary>
            Compare two tokens.
            </summary>
            <param name="token">The other token to compare.</param>
            <returns>True if tokens are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetAppModelPolicy(NtApiDotNet.AppModelPolicy_Type)">
            <summary>
            Get the App Policy for this token.
            </summary>
            <param name="policy_type">The type of app policy.</param>
            <returns>The policy value.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.DisableNoChildProcess">
            <summary>
            Disable No Child process policy on the token.
            </summary>
            <remarks>Needs SeTcbPrivilege.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtToken.QueryInformation(NtApiDotNet.TokenInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetInformation(NtApiDotNet.TokenInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtToken.User">
            <summary>
            Get token user
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Groups">
            <summary>
            Get token groups
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.EnabledGroups">
            <summary>
            Get list of enabled groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DenyOnlyGroups">
            <summary>
            Get list of deny only groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.GroupCount">
            <summary>
            Get count of groups in this token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AuthenticationId">
            <summary>
            Get the authentication ID for the token
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.TokenType">
            <summary>
            Get the token's type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ExpirationTime">
            <summary>
            Get the token's expiration time.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Id">
            <summary>
            Get the Token's Id
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ModifiedId">
            <summary>
            Get the Toen's modified Id.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Owner">
            <summary>
            Get/set the token's owner.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PrimaryGroup">
            <summary>
            Get/set the token's primary group
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DefaultDacl">
            <summary>
            Get/set the token's default DACL
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Source">
            <summary>
            Get the token's source
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedSids">
            <summary>
            Get token's restricted sids
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedSidsCount">
            <summary>
            Get count of restricted sids
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ImpersonationLevel">
            <summary>
            Get token's impersonation level
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SessionId">
            <summary>
            Get/set token's session ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SandboxInert">
            <summary>
            Get whether token has sandbox inert flag set.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Origin">
            <summary>
            Get/set token's origin
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ElevationType">
            <summary>
            Get token's elevation type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Elevated">
            <summary>
            Get whether token is elevated
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.HasRestrictions">
            <summary>
            Get whether token has restrictions
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.UIAccess">
            <summary>
            Get/set token UI access flag
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.VirtualizationAllowed">
            <summary>
            Get or set whether virtualization is allowed
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.VirtualizationEnabled">
            <summary>
            Get/set whether virtualization is enabled
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Restricted">
            <summary>
            Get whether token is restricted
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Capabilities">
            <summary>
            Get token capabilities.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.MandatoryPolicy">
            <summary>
            Get or set the token mandatory policy
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LogonSid">
            <summary>
            Get token logon sid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IntegrityLevelSid">
            <summary>
            Get token's integrity level sid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainerNumber">
            <summary>
            Get token's App Container number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IntegrityLevel">
            <summary>
            Get or set token's integrity level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SecurityAttributes">
            <summary>
            Get token's security attributes
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainer">
            <summary>
            Get whether a token is an AppContainer token
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LowPrivilegeAppContainer">
            <summary>
            Get whether the token is configured for low privilege.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainerSid">
            <summary>
            Get token's AppContainer sid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PackageName">
            <summary>
            Get token's AppContainer package name (if available). 
            Returns an empty string if not an AppContainer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DeviceGroups">
            <summary>
            Get token's device groups
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedDeviceGroups">
            <summary>
            Get token's restricted device groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Privileges">
            <summary>
            Get list of privileges for token
            </summary>
            <returns>The list of privileges</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if can't query privileges</exception>
        </member>
        <member name="P:NtApiDotNet.NtToken.FullPath">
            <summary>
            Get full path to token
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.TrustLevel">
            <summary>
            Get the token's trust level. Will be null if no trust level present.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IsPseudoToken">
            <summary>
            Returns true if this is a pseudo token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IsSandbox">
            <summary>
            Get whether this token is a sandboxed token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PackageFullName">
            <summary>
            Query the token's full package name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppId">
            <summary>
            Query the token's appid.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppModelPolicies">
            <summary>
            Get the list of policies for this App.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.BnoIsolationPrefix">
            <summary>
            Get the BaseNamedObjects isolation prefix if enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AuditPolicy">
            <summary>
            Get or set the token audit policy.
            </summary>
            <remarks>Needs SeSecurityPrivilege to query and SeTcbPrivilege to set.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtToken.PrivateNamespace">
            <summary>
            Get or set if token is in a private namespace.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IsRestricted">
            <summary>
            Get if the token is restricted.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.EnableDebugPrivilege">
            <summary>
            Enable debug privilege for the current process token.
            </summary>
            <returns>True if set the debug privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.EnableEffectivePrivilege(NtApiDotNet.TokenPrivilegeValue)">
            <summary>
            Enable a privilege of the effective token.
            </summary>
            <param name="privilege">The privilege to enable.</param>
            <returns>True if set the privilege.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,NtApiDotNet.TokenAccessRights,NtApiDotNet.AttributeFlags,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="attributes">Attribute flags for the handle.</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,NtApiDotNet.TokenAccessRights,NtApiDotNet.AttributeFlags)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="attributes">Attribute flags for the handle.</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken">
            <summary>
            Open the process token of the current process
            </summary>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Boolean)">
            <summary>
            Open the process token of the current process
            </summary>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of the current process
            </summary>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The opened token result</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(System.Int32,System.Boolean,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the thread token
            </summary>
            <param name="tid">The ID of the thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,System.Boolean)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(System.Boolean)">
            <summary>
            Open the current thread token
            </summary>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken">
            <summary>
            Open the current thread token
            </summary>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenEffectiveToken(NtApiDotNet.NtThread,System.Boolean)">
            <summary>
            Open the effective token, thread if available or process
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenEffectiveToken">
            <summary>
            Open the current effective token, thread if available or process
            </summary>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.TokenAccessRights,NtApiDotNet.ObjectAttributes,NtApiDotNet.TokenType,NtApiDotNet.Luid,System.Int64,NtApiDotNet.UserGroup,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilege},NtApiDotNet.Sid,NtApiDotNet.Sid,NtApiDotNet.Acl,System.String,System.Boolean)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="desired_access">The desired access for the token.</param>
            <param name="object_attributes">Object attributes, used to pass SecurityDescriptor or SQOS for impersonation token.</param>
            <param name="token_type">The type of token.</param>
            <param name="authentication_id">The authentication ID for the token.</param>
            <param name="expiration_time">The expiration time for the token.</param>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <param name="token_owner">The owner of the token.</param>
            <param name="token_primary_group">The primary group for the token.</param>
            <param name="token_default_dacl">The default dacl for the token.</param>
            <param name="token_source">The source for the token.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.TokenAccessRights,NtApiDotNet.ObjectAttributes,NtApiDotNet.TokenType,NtApiDotNet.Luid,System.Int64,NtApiDotNet.UserGroup,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilege},NtApiDotNet.Sid,NtApiDotNet.Sid,NtApiDotNet.Acl,System.String)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="desired_access">The desired access for the token.</param>
            <param name="object_attributes">Object attributes, used to pass SecurityDescriptor or SQOS for impersonation token.</param>
            <param name="token_type">The type of token.</param>
            <param name="authentication_id">The authentication ID for the token.</param>
            <param name="expiration_time">The expiration time for the token.</param>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <param name="token_owner">The owner of the token.</param>
            <param name="token_primary_group">The primary group for the token.</param>
            <param name="token_default_dacl">The default dacl for the token.</param>
            <param name="token_source">The source for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.Sid,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilegeValue})">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.Sid)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="token_user">The user for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Impersonate(System.Int32,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate another process' token
            </summary>
            <param name="impersonation_level">The impersonation level</param>
            <param name="pid">Process ID of the other process</param>
            <returns>An impersonation context, dispose to revert to process token</returns>
        </member>
        <member name="P:NtApiDotNet.NtToken.CurrentUser">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LocalSystemAuthId">
            <summary>
            Get authentication ID for LOCAL SYSTEM
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LocalServiceAuthId">
            <summary>
            Get authentication ID for LOCAL SERVICE
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.NetworkServiceAuthId">
            <summary>
            Get authentication ID for NETWORK SERVICE
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AnonymousAuthId">
            <summary>
            Get authentication ID for ANONYMOUS
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PseudoPrimaryToken">
            <summary>
            Get a pseudo handle to the primary token.
            </summary>
            <remarks>Only useful for querying information.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtToken.PseudoImpersonationToken">
            <summary>
            Get a pseudo handle to the impersonation token.
            </summary>
            <remarks>Only useful for querying information.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtToken.PseudoEffectiveToken">
            <summary>
            Get a pseudo handle to the effective token.
            </summary>
            <remarks>Only useful for querying information.</remarks>
        </member>
        <member name="T:NtApiDotNet.NtTransaction">
            <summary>
            Class to represent a kernel transaction.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,System.Nullable{System.Guid},NtApiDotNet.NtTransactionManager,NtApiDotNet.TransactionCreateFlags,System.Int32,NtApiDotNet.TransactionIsolationFlags,NtApiDotNet.NtWaitTimeout,System.String,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <param name="create_options">Transaction creation options.</param>
            <param name="description">Optional description of the transaction.</param>
            <param name="isolation_flags">Isolation flags.</param>
            <param name="isolation_level">Isolation level.</param>
            <param name="timeout">Optional transaction timeout.</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">Optional UOW.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,System.Nullable{System.Guid},NtApiDotNet.NtTransactionManager,NtApiDotNet.TransactionCreateFlags,System.Int32,NtApiDotNet.TransactionIsolationFlags,NtApiDotNet.NtWaitTimeout,System.String)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Transaction creation options.</param>
            <param name="description">Optional description of the transaction.</param>
            <param name="isolation_flags">Isolation flags.</param>
            <param name="isolation_level">Isolation level.</param>
            <param name="timeout">Optional transaction timeout.</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">Optional UOW.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionAccessRights,System.Nullable{System.Guid},NtApiDotNet.NtTransactionManager,NtApiDotNet.TransactionCreateFlags,System.Int32,NtApiDotNet.TransactionIsolationFlags,NtApiDotNet.NtWaitTimeout,System.String,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Transaction creation options.</param>
            <param name="description">Optional description of the transaction.</param>
            <param name="isolation_flags">Isolation flags.</param>
            <param name="isolation_level">Isolation level.</param>
            <param name="timeout">Optional transaction timeout.</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">Optional UOW.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionAccessRights,System.Nullable{System.Guid},NtApiDotNet.NtTransactionManager,NtApiDotNet.TransactionCreateFlags,System.Int32,NtApiDotNet.TransactionIsolationFlags,NtApiDotNet.NtWaitTimeout,System.String)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="create_options">Transaction creation options.</param>
            <param name="description">Optional description of the transaction.</param>
            <param name="isolation_flags">Isolation flags.</param>
            <param name="isolation_level">Isolation level.</param>
            <param name="timeout">Optional transaction timeout.</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">Optional UOW.</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionAccessRights,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.TransactionAccessRights)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create(System.String)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Create">
            <summary>
            Create a transaction
            </summary>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,System.Guid,NtApiDotNet.NtTransactionManager,System.Boolean)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">UOW Guid.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,System.Guid,NtApiDotNet.NtTransactionManager)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">UOW Guid.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Open(NtApiDotNet.TransactionAccessRights,System.Guid,NtApiDotNet.NtTransactionManager)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="desired_access">The desired access for the object</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">UOW Guid.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Open(System.Guid,NtApiDotNet.NtTransactionManager)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="uow">UOW Guid.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Open(System.Guid)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="uow">UOW Guid.</param>
            <returns>The object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.GetAccessibleTransaction(NtApiDotNet.ObjectAttributes,NtApiDotNet.TransactionAccessRights,NtApiDotNet.NtTransactionManager)">
            <summary>
            Get a list of all accessible transaction objects.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="transaction_manager">Optional transaction manager.</param>
            <param name="desired_access">The access for the transaction objects.</param>
            <returns>The list of all accessible transaction objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.GetAccessibleTransaction(NtApiDotNet.TransactionAccessRights)">
            <summary>
            Get a list of all accessible transaction objects.
            </summary>
            <param name="desired_access">The access for the transaction objects.</param>
            <returns>The list of all accessible transaction objects.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.GetAccessibleTransaction">
            <summary>
            Get a list of all accessible transaction objects.
            </summary>
            <returns>The list of all accessible transaction objects.</returns>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.Current">
            <summary>
            Get the current thread's transaction.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Commit(System.Boolean,System.Boolean)">
            <summary>
            Commit the transaction
            </summary>
            <param name="wait">Wait for transaction to commit.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Commit(System.Boolean)">
            <summary>
            Commit the transaction
            </summary>
            <param name="wait">Wait for transaction to commit.</param>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Rollback(System.Boolean,System.Boolean)">
            <summary>
            Rollback the transaction
            </summary>
            <param name="wait">Wait for transaction to rollback.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Rollback(System.Boolean)">
            <summary>
            Rollback the transaction
            </summary>
            <param name="wait">Wait for transaction to rollback.</param>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.Enable">
            <summary>
            Enable the transaction for anything in the current thread context.
            </summary>
            <returns>The transaction context. This should be disposed to disable the transaction.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.QueryInformation(NtApiDotNet.TransactionInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32@)">
            <summary>
            Method to query information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to return data in.</param>
            <param name="return_length">Return length from the query.</param>
            <returns>The NT status code for the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtTransaction.SetInformation(NtApiDotNet.TransactionInformationClass,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Method to set information for this object type.
            </summary>
            <param name="info_class">The information class.</param>
            <param name="buffer">The buffer to set data from.</param>
            <returns>The NT status code for the set.</returns>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.TransactionId">
            <summary>
            Get the ID of the transaction.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.UnitOfWork">
            <summary>
            Get the Unit of Work ID of the transaction. Same as transaction ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.State">
            <summary>
            Get the state of the transaction.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.Outcome">
            <summary>
            Get the outcome of the transaction.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.Description">
            <summary>
            Get or set the transaction description.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.IsolationLevel">
            <summary>
            Get or set the transaction isolation level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.IsolationFlags">
            <summary>
            Get or set the transaction isolation flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.Timeout">
            <summary>
            Get or set transaction timeout.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.Enlistments">
            <summary>
            Query list of enlistments for this transaction.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtTransaction.SuperiorEnlistment">
            <summary>
            Query the superior enlistment for this transaction.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtVirtualMemory">
            <summary>
            Static class to access virtual memory functions of NT.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QuerySectionName(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Boolean)">
            <summary>
            Query section name,
            </summary>
            <param name="process">The process to query from.</param>
            <param name="base_address">The base address to query.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QuerySectionName(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query section name,
            </summary>
            <param name="process">The process to query from.</param>
            <param name="base_address">The base address to query.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMemoryInformation(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query memory information for a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address.</param>
            <returns>The memory information for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMemoryInformation(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Query all memory information regions in process memory.
            </summary>
            <returns>The list of memory regions.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMappedFiles(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Query a list of mapped files in a process.
            </summary>
            <param name="process">The process to query.</param>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ReadMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int32)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="length">The length to read.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.WriteMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Byte[])">
            <summary>
            Write memory to a process.
            </summary>
            <param name="process">The process to write to.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <returns>The number of bytes written to the location</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ReadMemory``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Read structured memory from a process.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="base_address">The base address in the process.</param>
            <returns>The read structure.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to read.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.WriteMemory``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64,``0)">
            <summary>
            Write structured memory to a process.
            </summary>
            <param name="process">The process to write to.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to write.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ReadMemoryArray``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int32)">
            <summary>
            Read structured memory array from a process.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="count">The number of elements in the array to read.</param>
            <returns>The read structure.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to read.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.WriteMemoryArray``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64,``0[])">
            <summary>
            Write structured memory array to a process.
            </summary>
            <param name="process">The process to write to.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data array to write.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to write.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.AllocateMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect,System.Boolean)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="process">The process to allocate in.</param>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.AllocateMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="process">The process to allocate in.</param>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.FreeMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryFreeType)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="process">The process to free in.</param>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.FreeMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryFreeType,System.Boolean)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="process">The process to free in.</param>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ProtectMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="process">The process to change memory protection</param>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ProtectMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect,System.Boolean)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="process">The process to change memory protection</param>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryWorkingSetEx(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Boolean)">
            <summary>
            Query working set information for an address in a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address to query.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The working set information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryWorkingSetEx(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query working set information for an address in a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address to query.</param>
            <returns>The working set information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryImageInformation(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Boolean)">
            <summary>
            Query image information for an address in a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address to query.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The image information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryImageInformation(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query image information for an address in a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address to query.</param>
            <returns>The image information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.AreMappedFilesTheSame(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Determine if two addresses are the same mapped file.
            </summary>
            <param name="address_1">The first address.</param>
            <param name="address_2">The second address.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>True if the mapped memory is the same file.</returns>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.AreMappedFilesTheSame(System.Int64,System.Int64)">
            <summary>
            Determine if two addresses are the same mapped file.
            </summary>
            <param name="address_1">The first address.</param>
            <param name="address_2">The second address.</param>
            <returns>True if the mapped memory is the same file.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWaitTimeout">
            <summary>
            Class to represent an NT timeout
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWaitTimeout.Infinite">
            <summary>
            Get a timeout which will wait indefinitely.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromSeconds(System.Int32)">
            <summary>
            Get a relative timeout in seconds.
            </summary>
            <param name="seconds">The number of seconds to wait.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromMilliseconds(System.Int64)">
            <summary>
            Get a relative timeout in milliseconds.
            </summary>
            <param name="ms">The number of milliseconds to wait.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromAbsolute(System.Int64)">
            <summary>
            Get an absolute time out from system start.
            </summary>
            <param name="absolute">The absolute time to wait until.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromRelative(System.Int64)">
            <summary>
            Get a relative time out from the current time.
            </summary>
            <param name="relative">The relative time to wait in units of 100ns.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="P:NtApiDotNet.NtWaitTimeout.Timeout">
            <summary>
            The timeout as a long.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The timeout as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWaitHandle">
            <summary>
            A .NET wait handle to use for interop.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.#ctor(NtApiDotNet.NtObject)">
            <summary>
            Create a .NET wait handle from an object.
            </summary>
            <param name="obj">The object to create the wait handle on</param>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait asynchronously for the handle to be signaled.
            </summary>
            <param name="timeout_ms">Timeout in milliseconds.</param>
            <param name="cancellation_token">Cancellation token for wait.</param>
            <returns>A task to wait on. If result is true then event was signaled.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync(System.Int32)">
            <summary>
            Wait asynchronously for the handle to be signaled.
            </summary>
            <param name="timeout_ms">Timeout in milliseconds.</param>
            <returns>A task to wait on. If result is true then event was signaled.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync">
            <summary>
            Wait asynchronously for the handle to be signaled.
            Will wait an infinite time.
            </summary>
            <returns>A task to wait on.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWait">
            <summary>
            Native Wait methods.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWait.Wait(NtApiDotNet.NtObject,System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on a single object to become signaled
            </summary>
            <param name="obj">The object to wait on</param>
            <param name="alertable">Whether the thread should be alertable</param>
            <param name="timeout">The timeout to wait for</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
        </member>
        <member name="M:NtApiDotNet.NtWait.Wait(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject},System.Boolean,System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on multiple objects to become signaled
            </summary>
            <param name="objs">The objects to wait on</param>
            <param name="alertable">Whether the thread should be alerable</param>
            <param name="wait_all">True to wait for all objects to be signaled</param>
            <param name="timeout">The timeout to wait for</param>
            <returns>The success status of the wait, such as STATUS_WAIT_OBJECT_0 or STATUS_TIMEOUT</returns>
        </member>
        <member name="M:NtApiDotNet.NtWait.SignalAndWait(NtApiDotNet.NtObject,NtApiDotNet.NtObject,System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Signal an object then wait for another to become signaled.
            </summary>
            <param name="object_to_signal">The object to signal</param>
            <param name="object_to_wait">The object to wait on.</param>
            <param name="alertable">Whether the thread should be alertable</param>
            <param name="timeout">The timeout to wait for</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
        </member>
        <member name="T:NtApiDotNet.NtWindowStation">
            <summary>
            Class which represents a window station object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.WindowStationAccessRights,System.Boolean)">
            <summary>
            Open a window station by name.
            </summary>
            <param name="object_attributes">The object attributes for opening.</param>
            <param name="desired_access">Desired access.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The instance of the window station</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a window station by name.
            </summary>
            <param name="winsta_name">The name of the window station</param>
            <param name="root">Optional root object</param>
            <returns>The instance of the window station</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.Open(System.String)">
            <summary>
            Open a window station by name.
            </summary>
            <param name="winsta_name"></param>
            <returns>The instance of the window station</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtWindowStation.Desktops">
            <summary>
            Get a list of desktops for this Window Station.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.GetAccessibleDesktops(NtApiDotNet.DesktopAccessRights)">
            <summary>
            Get a list of accessible desktop objects.
            </summary>
            <param name="desired_access">The desired access for the desktops.</param>
            <returns>The list of desktops.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.GetAccessibleDesktops">
            <summary>
            Get a list of accessible desktop objects.
            </summary>
            <returns>The list of desktops.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWnf">
            <summary>
            NT WNF object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWnf.GenericMapping">
            <summary>
            Get the generic mapping for a 
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWnf.Create(NtApiDotNet.WnfStateNameLifetime,NtApiDotNet.WnfDataScope,System.Boolean,NtApiDotNet.WnfTypeId,System.Int32,NtApiDotNet.SecurityDescriptor,System.Boolean)">
            <summary>
            Create a new WNF state name.
            </summary>
            <param name="name_lifetime">The lifetime of the name.</param>
            <param name="data_scope">The scope of the data.</param>
            <param name="persist_data">Whether to persist data.</param>
            <param name="type_id">Optional type ID.</param>
            <param name="maximum_state_size">Maximum state size.</param>
            <param name="security_descriptor">Mandatory security descriptor.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created object.</returns>
        </member>
        <member name="F:NtApiDotNet.NtWnf.StateNameKey">
            <summary>
            Kernel derived key which is used to mask the state name.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWnf.Create(NtApiDotNet.WnfStateNameLifetime,NtApiDotNet.WnfDataScope,System.Boolean,NtApiDotNet.WnfTypeId,System.Int32,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Create a new WNF state name.
            </summary>
            <param name="name_lifetime">The lifetime of the name.</param>
            <param name="data_scope">The scope of the data.</param>
            <param name="persist_data">Whether to persist data.</param>
            <param name="type_id">Optional type ID.</param>
            <param name="maximum_state_size">Maximum state size.</param>
            <param name="security_descriptor">Mandatory security descriptor.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.Open(System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Open a state name. Doesn't check if it exists.
            </summary>
            <param name="state_name">The statename to open.</param>
            <param name="check_exists">True to check state name exists.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.Open(System.UInt64,System.Boolean)">
            <summary>
            Open a state name. Doesn't check if it exists.
            </summary>
            <param name="state_name">The statename to open.</param>
            <param name="check_exists">True to check state name exists.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.Open(System.UInt64)">
            <summary>
            Open a state name. Doesn't check if it exists.
            </summary>
            <param name="state_name">The statename to open.</param>
            <returns>The created object.</returns>
        </member>
        <member name="P:NtApiDotNet.NtWnf.StateName">
            <summary>
            Get the state name for this WNF entry.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWnf.Lifetime">
            <summary>
            Get the associated lifetime for the state name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWnf.SubscribersPresent">
            <summary>
            Get if the state has subscribers.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWnf.SecurityDescriptor">
            <summary>
            Get the security descriptor for this object, if known.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWnf.QueryStateData(NtApiDotNet.WnfTypeId,System.IntPtr,System.Boolean)">
            <summary>
            Query state data for the WNF object.
            </summary>
            <param name="type_id">Optional Type ID.</param>
            <param name="explicit_scope">Optional explicit scope.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The state data.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.QueryStateData(NtApiDotNet.WnfTypeId,System.IntPtr)">
            <summary>
            Query state data for the WNF object.
            </summary>
            <param name="type_id">Optional Type ID.</param>
            <param name="explicit_scope">Optional explicit scope.</param>
            <returns>The state data.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.QueryStateData">
            <summary>
            Query state data for the WNF object.
            </summary>
            <returns>The state data.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.UpdateStateData(System.Byte[],NtApiDotNet.WnfTypeId,System.IntPtr,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Update state data for the WNF object.
            </summary>
            <param name="data">The data to set.</param>
            <param name="type_id">Optional Type ID.</param>
            <param name="explicit_scope">Optional explicit scope.</param>
            <param name="matching_changestamp">Optional matching changestamp.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The status from the update.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWnf.UpdateStateData(System.Byte[])">
            <summary>
            Update state data for the WNF object.
            </summary>
            <param name="data">The data to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtWnf.GetRegisteredNotifications">
            <summary>
            Get registered notifications.
            </summary>
            <returns>The list of registered notifications.</returns>
        </member>
        <member name="T:NtApiDotNet.AttributeFlags">
            <summary>
            Flags for OBJECT_ATTRIBUTES
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Inherit">
            <summary>
            The handle created can be inherited
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Permanent">
            <summary>
            The object created is marked as permanent
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Exclusive">
            <summary>
            The object must be created exclusively
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.CaseInsensitive">
            <summary>
            The object name lookup should be done case insensitive
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.OpenIf">
            <summary>
            Open the object if it already exists
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.OpenLink">
            <summary>
            Open the object as a link
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.KernelHandle">
            <summary>
            Create as a kernel handle (not used in user-mode)
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.ForceAccessCheck">
            <summary>
            Force an access check to occur (not used in user-mode)
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.IgnoreImpersonatedDevicemap">
            <summary>
            Ignore impersonated device map when looking up object
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.DontReparse">
            <summary>
            Fail if a reparse is encountered
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectAttributes">
            <summary>
            A class which represents OBJECT_ATTRIBUTES
            </summary>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor">
            <summary>
            Constructor. Sets flags to None
            </summary>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
            <param name="attributes">Attribute flags</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.NtObject)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
            <param name="attributes">Attribute flags</param>
            <param name="root">A root object to lookup a relative path</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(NtApiDotNet.AttributeFlags)">
            <summary>
            Constructor
            </summary>
            <param name="attributes">Attribute flags</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.SecurityQualityOfService,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The object name, can be null.</param>
            <param name="attributes">The object attribute flags.</param>
            <param name="root">An optional root handle, can be SafeKernelObjectHandle.Null. Will duplicate the handle.</param>
            <param name="sqos">An optional security quality of service.</param>
            <param name="security_descriptor">An optional security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.NtObject,NtApiDotNet.SecurityQualityOfService,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The object name, can be null.</param>
            <param name="attributes">The object attribute flags.</param>
            <param name="root">An optional root handle, can be SafeKernelObjectHandle.Null. Will duplicate the handle.</param>
            <param name="sqos">An optional security quality of service.</param>
            <param name="security_descriptor">An optional security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtType">
            <summary>
            Class representing an NT object type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.Name">
            <summary>
            The name of the type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericMapping">
            <summary>
            The mapping from generic to specific object rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.ValidAccess">
            <summary>
            The valid access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.SecurityRequired">
            <summary>
            True if the object needs security even if unnamed
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNumberOfObjects">
            <summary>
            Total number of objects (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNumberOfHandles">
            <summary>
            Total number of handles (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalPagedPoolUsage">
            <summary>
            Total paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNonPagedPoolUsage">
            <summary>
            Total non-paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNamePoolUsage">
            <summary>
            Total name pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalHandleTableUsage">
            <summary>
            Total handle table usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNumberOfObjects">
            <summary>
            Maximum number of objects (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNumberOfHandles">
            <summary>
            Maximum number of handles (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterPagedPoolUsage">
            <summary>
            Maximum paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNonPagedPoolUsage">
            <summary>
            Maximum non-paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNamePoolUsage">
            <summary>
            Maximum name pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterHandleTableUsage">
            <summary>
            Maximum handle table usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.InvalidAttributes">
            <summary>
            The attributes flags which are invalid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.MaintainHandleCount">
            <summary>
            Indicates whether handle count is mainted
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.MaintainTypeList">
            <summary>
            Indicates the type list maintained
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.PoolType">
            <summary>
            Indicates the type of pool used in allocations
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.PagedPoolUsage">
            <summary>
            Current paged pool usage
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.NonPagedPoolUsage">
            <summary>
            Current non-pages pool usage
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.Index">
            <summary>
            Type Index
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericRead">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericWrite">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericExecute">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericAll">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.ObjectType">
            <summary>
            Get implemented object type for this NT type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.AccessRightsType">
            <summary>
            Get the access rights enumerated type for this NT type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.ContainerAccessRightsType">
            <summary>
            Get the access rights enumerated type for this NT type if it's a container.
            </summary>
            <remarks>There's only one known type at the moment which uses this, File.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtType.CanOpen">
            <summary>
            Can this type of open be opened by name
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access when opening.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.AccessMask)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <param name="root">The root object for opening, if name is relative</param>
            <param name="desired_access">Desired access when opening.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <param name="root">The root object for opening, if name is relative</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.FromHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get object from an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.FromHandle(System.IntPtr,System.Boolean)">
            <summary>
            Get object from an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <param name="owns_handle">True to own the handle.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.FromHandle(System.IntPtr)">
            <summary>
            Get object from an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <remarks>The call doesn't own the handle. The returned object can't be used to close the handle.</remarks>
            <returns>The new object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.AccessMaskToString(NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.AccessMaskToString(NtApiDotNet.AccessMask)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasReadPermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a read permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has read permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasWritePermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a write permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has write permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasExecutePermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a execute permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has execute permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasFullPermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a full permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has full permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.MapGenericRights(NtApiDotNet.AccessMask)">
            <summary>
            Map generic access rights to specific access rights for this type
            </summary>
            <param name="access_mask">The access mask to map</param>
            <returns>The mapped access mask</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.UnmapGenericRights(NtApiDotNet.AccessMask)">
            <summary>
            Unmap specific access rights to generic access rights for this type
            </summary>
            <param name="access_mask">The access mask to unmap</param>
            <returns>The unmapped access mask</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.IsValidAccess(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask is valid for access of this object type.
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it valid access</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByIndex(System.Int32)">
            <summary>
            Get a type object by index
            </summary>
            <param name="index">The index</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByIndex(System.Int32,System.Boolean)">
            <summary>
            Get a type object by index
            </summary>
            <param name="index">The index</param>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a type object by name
            </summary>
            <param name="name">The name of the type</param>
            <param name="create_fake_type">True to create a fake type if needed.</param>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByName(System.String,System.Boolean)">
            <summary>
            Get a type object by name
            </summary>
            <param name="name">The name of the type</param>
            <param name="create_fake_type">True to create a fake type if needed.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeForHandle(NtApiDotNet.SafeKernelObjectHandle,System.Boolean)">
            <summary>
            Get a type object by a kernel handle.
            </summary>
            <param name="handle">The kernel handle.</param>
            <param name="create_fake_type">True to create a fake type if needed.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByType``1(System.Boolean)">
            <summary>
            Get an NT type based on the implemented .NET type.
            </summary>
            <typeparam name="T">A type derived from NtObject</typeparam>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The NtType represented by this .NET type. Note if a type is represented with multiple
            names only return the first one we find.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there exists no .NET type which maps to this type.</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByType``1">
            <summary>
            Get an NT type based on the implemented .NET type.
            </summary>
            <typeparam name="T">A type derived from NtObject</typeparam>
            <returns>The NtType represented by this .NET type. Note if a type is represented with multiple
            names only return the first one we find.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there exists no .NET type which maps to this type.</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.GetFakeType(System.String,NtApiDotNet.GenericMapping,System.Type,System.Type)">
            <summary>
            Get a fake type object. This can be used in access checking for operations which need an NtType object
            but there's no real NT object.
            </summary>
            <param name="name">The name of the fake type. Informational only.</param>
            <param name="generic_mapping">The GENERIC_MAPPING for security checking.</param>
            <param name="access_rights_type">The access rights enumeration type.</param>
            <param name="container_access_rights_type">The access rights enumeration type of the object is a container.</param>
            <returns>The fake NT type object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetFakeType(System.String,NtApiDotNet.GenericMapping,System.Type)">
            <summary>
            Get a fake type object. This can be used in access checking for operations which need an NtType object
            but there's no real NT object.
            </summary>
            <param name="name">The name of the fake type. Informational only.</param>
            <param name="generic_mapping">The GENERIC_MAPPING for security checking.</param>
            <param name="access_rights_type">The access rights enumeration type.</param>
            <returns>The fake NT type object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetFakeType(System.String,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,System.Type,System.Type)">
            <summary>
            Get a fake type object. This can be used in access checking for operations which need an NtType object
            but there's no real NT object.
            </summary>
            <param name="name">The name of the fake type. Informational only.</param>
            <param name="generic_read">The GENERIC_READ for security checking.</param>
            <param name="generic_write">The GENERIC_WRITE for security checking.</param>
            <param name="generic_exec">The GENERIC_EXECUTE for security checking.</param>
            <param name="generic_all">The GENERIC_ALL for security checking.</param>
            <param name="access_rights_type">The access rights enumeration type.</param>
            <param name="container_access_rights_type">The access rights enumeration type of the object is a container.</param>
            <returns>The fake NT type object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetFakeType(System.String,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,NtApiDotNet.AccessMask,System.Type)">
            <summary>
            Get a fake type object. This can be used in access checking for operations which need an NtType object
            but there's no real NT object.
            </summary>
            <param name="name">The name of the fake type. Informational only.</param>
            <param name="generic_read">The GENERIC_READ for security checking.</param>
            <param name="generic_write">The GENERIC_WRITE for security checking.</param>
            <param name="generic_exec">The GENERIC_EXECUTE for security checking.</param>
            <param name="generic_all">The GENERIC_ALL for security checking.</param>
            <param name="access_rights_type">The access rights enumeration type.</param>
            <returns>The fake NT type object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>Returns the type as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypes">
            <summary>
            Get a list of all types.
            </summary>
            <returns>The list of types.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypes(System.Boolean)">
            <summary>
            Get a list of all types.
            </summary>
            <param name="cached">True to get the cached list of types, false to return a live list of all types.</param>
            <returns>The list of types.</returns>
        </member>
        <member name="T:NtApiDotNet.OptionalGuid">
            <summary>
            This class allows a function to specify an optional Guid
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalGuid.Value">
            <summary>
            Optional Guid
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="guid">The GUID to initialize</param>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.op_Implicit(System.Guid)~NtApiDotNet.OptionalGuid">
            <summary>
            Implicit conversion
            </summary>
            <param name="guid">The value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalInt32">
            <summary>
            This class allows a function to specify an optional int32.
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalInt32.Value">
            <summary>
            Optional value
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.op_Implicit(System.Int32)~NtApiDotNet.OptionalInt32">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalInt64">
            <summary>
            This class allows a function to specify an optional int64.
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalInt64.Value">
            <summary>
            Optional value
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt64.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalInt64.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt64.op_Implicit(System.Int64)~NtApiDotNet.OptionalInt64">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalLength">
            <summary>
            This class allows a function to specify an optional length as a SizeT
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalLength.Length">
            <summary>
            Optional length
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.op_Implicit(System.Int32)~NtApiDotNet.OptionalLength">
            <summary>
            Implicit conversion
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalPointer">
            <summary>
            This class allows a function to specify an optional pointer.
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalPointer.Value">
            <summary>
            Optional length
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.op_Implicit(System.IntPtr)~NtApiDotNet.OptionalPointer">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:NtApiDotNet.NtProcessMitigations">
            <summary>
            Class representing various process mitigations
            </summary>
        </member>
        <member name="T:NtApiDotNet.SupportedVersion">
            <summary>
            Supported windows verion
            </summary>
        </member>
        <member name="T:NtApiDotNet.SupportedVersionAttribute">
            <summary>
            Attribute to indicate the required version for a function.
            Applied if the function needs a version greater than 7.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SupportedVersionAttribute.Version">
            <summary>
            The supported version.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SupportedVersionAttribute.#ctor(NtApiDotNet.SupportedVersion)">
            <summary>
            Constructor
            </summary>
            <param name="version">The supported version</param>
        </member>
        <member name="T:NtApiDotNet.DataStartAttribute">
            <summary>
            Attribute used for managed structures to indicate the start of data.
            This is used in situations where the data immediately trail 
            </summary>
        </member>
        <member name="M:NtApiDotNet.DataStartAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="field_name">The field name which indicates the first address of data.</param>
        </member>
        <member name="P:NtApiDotNet.DataStartAttribute.FieldName">
            <summary>
            The field name which indicates the first address of data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.DataStartAttribute.IncludeDataField">
            <summary>
            When allocating this structure always include the field in the total length calculation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeAlpcDataViewBuffer">
            <summary>
            Safe buffer for an ALPC data view.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcDataViewBuffer.Flags">
            <summary>
            Flags for the data view.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcDataViewBuffer.SectionHandle">
            <summary>
            Get the port section handle.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcDataViewBuffer.ToMessageAttribute">
            <summary>
            Convert the section view to a message attribute.
            </summary>
            <returns>The message attribute.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcDataViewBuffer.ReleaseHandle">
            <summary>
            Release the data view handle.
            </summary>
            <returns>True if successfully released.</returns>
        </member>
        <member name="T:NtApiDotNet.SafeAlpcPortSectionHandle">
            <summary>
            Safe handle for a port section.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcPortSectionHandle.ReleaseHandle">
            <summary>
            Release handle.
            </summary>
            <returns>True if handle released successfully.</returns>
        </member>
        <member name="T:NtApiDotNet.SafeAlpcSecurityContextHandle">
            <summary>
            Safe handle for an ALPC security context.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcSecurityContextHandle.Flags">
            <summary>
            Attribute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcSecurityContextHandle.SecurityQualityOfService">
            <summary>
            Security quality of service.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcSecurityContextHandle.ToMessageAttribute">
            <summary>
            Get the security context as a message attribute.
            </summary>
            <returns>The message attribute.</returns>
        </member>
        <member name="P:NtApiDotNet.SafeAlpcSecurityContextHandle.IsInvalid">
            <summary>
            Get whether handle is invalid.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcSecurityContextHandle.ReleaseHandle">
            <summary>
            Release handle.
            </summary>
            <returns>True if handle released successfully.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcSecurityContextHandle.Revoke(System.Boolean)">
            <summary>
            Revoke the security context attribute.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeAlpcSecurityContextHandle.Revoke">
            <summary>
            Revoke the security context attribute.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeBufferGeneric">
            <summary>
            Safe buffer which acts as a base class for all other SafeBuffer types in the library.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer.</param>
            <param name="buffer">An existing pointer to a buffer.</param>
            <param name="owns_handle">Specify whether safe handle owns the buffer.</param>
            <param name="writable">Inidicates if the underlying buffer is writable.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.#ctor(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer.</param>
            <param name="buffer">An existing pointer to a buffer.</param>
            <param name="owns_handle">Specify whether safe handle owns the buffer.</param>
        </member>
        <member name="P:NtApiDotNet.SafeBufferGeneric.Length">
            <summary>
            Length of the allocation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeBufferGeneric.LongLength">
            <summary>
            Length of the allocation as a long.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeBufferGeneric.LengthIntPtr">
            <summary>
            Get the length as an IntPtr
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ToArray">
            <summary>
            Convert the safe handle to an array of bytes.
            </summary>
            <returns>The data contained in the allocaiton.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadNulTerminatedUnicodeString(System.UInt64)">
            <summary>
            Read a NUL terminated string for the byte offset.
            </summary>
            <param name="byte_offset">The byte offset to read from.</param>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadNulTerminatedUnicodeString">
            <summary>
            Read a NUL terminated string
            </summary>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadUnicodeString(System.UInt64,System.Int32)">
            <summary>
            Read a unicode string from the buffer.
            </summary>
            <param name="byte_offset">The offset into the buffer to read.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The read unicode string.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadUnicodeString(System.Int32)">
            <summary>
            Read a unicode string from the buffer.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>The read unicode string.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.WriteUnicodeString(System.UInt64,System.String)">
            <summary>
            Write a unicode string to the buffer.
            </summary>
            <param name="byte_offset">The offset into the buffer to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.WriteUnicodeString(System.String)">
            <summary>
            Write a unicode string to the buffer.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadBytes(System.UInt64,System.Int32)">
            <summary>
            Read an array of bytes from the buffer.
            </summary>
            <param name="byte_offset">The offset into the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The read bytes.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ReadBytes(System.Int32)">
            <summary>
            Read an array of bytes from the buffer.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The read bytes.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.WriteBytes(System.UInt64,System.Byte[])">
            <summary>
            Write an array of bytes to the buffer.
            </summary>
            <param name="byte_offset">The offset into the buffer.</param>
            <param name="data">The bytes to write.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.WriteBytes(System.Byte[])">
            <summary>
            Write an array of bytes to the buffer.
            </summary>
            <param name="data">The bytes to write.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.ZeroBuffer">
            <summary>
            Zero an entire buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.FillBuffer(System.Byte)">
            <summary>
            Fill an entire buffer with a specific byte value.
            </summary>
            <param name="fill">The fill value.</param>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.GetStructAtOffset``1(System.Int32)">
            <summary>
            Get a structured buffer object at a specified offset.
            </summary>
            <typeparam name="T">The type of structure.</typeparam>
            <param name="offset">The offset into the buffer.</param>
            <returns>The structured buffer object.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeBufferGeneric.GetStream">
            <summary>
            Get the buffer as a memory stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.SafeSecurityObjectBuffer">
            <summary>
            Safe buffer to hold a security object which be deleted by RtlDeleteSecurityObject.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeSecurityObjectBuffer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeSecurityObjectBuffer.ReleaseHandle">
            <summary>
            Overridden ReleaseHandle method.
            </summary>
            <returns>True if successfully released the memory.</returns>
        </member>
        <member name="T:NtApiDotNet.SafeIoStatusBuffer">
            <summary>
            Non-generic buffer to hold an IO_STATUS_BLOCK.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeArrayBuffer`1">
            <summary>
            Safe buffer to contain a list of structures.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeArrayBuffer`1.Count">
            <summary>
            The count of elements of the array.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeArrayBuffer`1.#ctor(`0[])">
            <summary>
            Constructor.
            </summary>
            <param name="array">Array of elements.</param>
        </member>
        <member name="M:NtApiDotNet.SafeArrayBuffer`1.Dispose(System.Boolean)">
            <summary>
            Dispose buffer.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="T:NtApiDotNet.SafeHGlobalBuffer">
            <summary>
            A safe handle to an allocated global buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer to allocate.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="allocation_length">The length of data to allocate.</param>
            <param name="total_length">The total length to reflect in the Length property.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer.</param>
            <param name="buffer">An existing pointer to an existing HGLOBAL allocated buffer.</param>
            <param name="owns_handle">Specify whether safe handle owns the buffer.</param>
        </member>
        <member name="P:NtApiDotNet.SafeHGlobalBuffer.Null">
            <summary>
            Get a buffer which represents NULL.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.Resize(System.Int32)">
            <summary>
            Resize the SafeBuffer.
            </summary>
            <param name="new_length"></param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Initialization data for the buffer.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.ReleaseHandle">
            <summary>
            Overridden ReleaseHandle method.
            </summary>
            <returns>True if successfully released the memory.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.Detach">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.Detach(System.Int32)">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <param name="length">Specify a new length for the detached buffer. Must be &lt;= Length.</param>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="T:NtApiDotNet.SafeSidBufferHandle">
            <summary>
            Safe SID buffer.
            </summary>
            <remarks>This is used to return values from the RTL apis which need to be freed using RtlFreeSid</remarks>
        </member>
        <member name="T:NtApiDotNet.NtSecurity">
            <summary>
            Static class to access NT security manager routines.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupAccountSid(NtApiDotNet.Sid)">
            <summary>
            Looks up the account name of a SID. 
            </summary>
            <param name="sid">The SID to lookup</param>
            <returns>The name, or null if the lookup failed</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupKnownCapabilityName(NtApiDotNet.Sid)">
            <summary>
            Looks up a capability SID to see if it's already known.
            </summary>
            <param name="sid">The capability SID to lookup</param>
            <returns>The name of the capability, null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupAccountName(System.String)">
            <summary>
            Lookup a SID from a username.
            </summary>
            <param name="username">The username, can be in the form domain\account.</param>
            <returns>The Security Identifier</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if account cannot be found.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupProcessTrustName(NtApiDotNet.Sid)">
            <summary>
            Lookup the name of a process trust SID.
            </summary>
            <param name="trust_sid">The trust sid to lookup.</param>
            <returns>The name of the trust sid. null if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown if trust_sid is not a trust sid.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupPackageName(NtApiDotNet.Sid)">
            <summary>
            Try and lookup the moniker associated with a package sid.
            </summary>
            <param name="sid">The package sid.</param>
            <returns>Returns the moniker name. If not found returns null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if SID is not a package sid.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupDeviceCapabilityName(NtApiDotNet.Sid)">
            <summary>
            Lookup a device capability SID name if known.
            </summary>
            <param name="sid">The SID to lookup.</param>
            <returns>Returns the device capability name. If not found returns null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if SID is not a package sid.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SecurityDescriptorToSddl(System.Byte[],NtApiDotNet.SecurityInformation)">
            <summary>
            Convert a security descriptor to SDDL string
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="security_information">Indicates what parts of the security descriptor to include</param>
            <returns>The SDDL string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert to a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SddlToSecurityDescriptor(System.String)">
            <summary>
            Convert an SDDL string to a binary security descriptor
            </summary>
            <param name="sddl">The SDDL string</param>
            <returns>The binary security descriptor</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert from a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SidFromSddl(System.String)">
            <summary>
            Convert an SDDL SID string to a Sid
            </summary>
            <param name="sddl">The SDDL SID string</param>
            <returns>The converted Sid</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert from a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.AccessMask,NtApiDotNet.Sid,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="principal">An optional principal SID used to replace the SELF SID in a security descriptor.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.AccessMask,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The maximum allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.Sid,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="principal">An optional principal SID used to replace the SELF SID in a security descriptor.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The maximum allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.NtToken,NtApiDotNet.NtType,NtApiDotNet.AccessMask,System.Byte[])">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="type">The type used to determine generic access mapping..</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.NtToken,NtApiDotNet.NtType,System.Byte[])">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="type">The type used to determine generic access mapping..</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.FromNamedObject(System.String,System.String)">
            <summary>
            Get a security descriptor from a named object.
            </summary>
            <param name="name">The path to the resource (such as \BaseNamedObejct\ABC)</param>
            <param name="type">The type of resource, can be null to get the method to try and discover the correct type.</param>
            <returns>The named resource security descriptor.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
            <exception cref="T:System.ArgumentException">Thrown if type of resource couldn't be found.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegritySidRaw(System.Int32)">
            <summary>
            Get a SID for a specific mandatory integrity level.
            </summary>
            <param name="level">The mandatory integrity level.</param>
            <returns>The integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegritySid(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Get a SID for a specific mandatory integrity level.
            </summary>
            <param name="level">The mandatory integrity level.</param>
            <returns>The integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsIntegritySid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is an integrity level SID
            </summary>
            <param name="sid">The SID to check</param>
            <returns>True if an integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegrityLevel(NtApiDotNet.Sid)">
            <summary>
            Get the integrity level from an integrity SID
            </summary>
            <param name="sid">The integrity SID</param>
            <returns>The token integrity level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetServiceSid(System.String)">
            <summary>
            Gets the SID for a service name.
            </summary>
            <param name="service_name">The service name.</param>
            <returns>The service SID.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsServiceSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a service SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a service sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsProcessTrustSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a process trust SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a process trust sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsCapabilitySid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a capability SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a capability sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsCapabilityGroupSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a capbility group SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a capability group sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCapabilitySid(System.String)">
            <summary>
            Get a capability sid by name.
            </summary>
            <param name="capability_name">The name of the capability.</param>
            <returns>The capability SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCapabilityGroupSid(System.String)">
            <summary>
            Get a capability group sid by name.
            </summary>
            <param name="capability_name">The name of the capability.</param>
            <returns>The capability SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetPackageSidType(NtApiDotNet.Sid)">
            <summary>
            Get the type of package sid.
            </summary>
            <param name="sid">The sid to get type.</param>
            <returns>The package sid type, Unknown if invalid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsPackageSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a valid package SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a capability sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetPackageSidParent(NtApiDotNet.Sid)">
            <summary>
            Get the parent package SID for a child package SID.
            </summary>
            <param name="sid">The child package SID.</param>
            <returns>The parent package SID.</returns>
            <exception cref="T:System.ArgumentException">Thrown if sid not a child package SID.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.ConditionalAceToString(System.Byte[])">
            <summary>
            Converts conditional ACE data to an SDDL string
            </summary>
            <param name="conditional_data">The conditional application data.</param>
            <returns>The conditional ACE string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.StringToConditionalAce(System.String)">
            <summary>
            Converts a condition in SDDL format to an ACE application data.
            </summary>
            <param name="condition_sddl">The condition in SDDL format.</param>
            <returns>The condition in ACE application data format.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCachedSigningLevel(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get the cached signing level for a file.
            </summary>
            <param name="handle">The handle to the file to query.</param>
            <returns>The cached signing level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCachedSigningLevelFromEa(NtApiDotNet.EaBuffer)">
            <summary>
            Get the cached singing level from the raw EA buffer.
            </summary>
            <param name="ea">The EA buffer to read the cached signing level from.</param>
            <returns>The cached signing level.</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SetCachedSigningLevel(NtApiDotNet.SafeKernelObjectHandle,System.Int32,NtApiDotNet.SigningLevel,System.Collections.Generic.IEnumerable{NtApiDotNet.SafeKernelObjectHandle},System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="handle">The handle to the file to set the cache on.</param>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="source_files">A list of source file for the cache.</param>
            <param name="catalog_path">Optional directory path to look for catalog files.</param>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetNameForSid(NtApiDotNet.Sid,System.Boolean)">
            <summary>
            Get readable name for a SID, if known. This covers sources of names such as LSASS lookup, capability names and package names.
            </summary>
            <param name="sid">The SID to lookup.</param>
            <param name="bypass_cache">True to bypass the internal cache and get the current name.</param>
            <returns>The name for the SID. Returns the SDDL form if no other name is known.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetNameForSid(NtApiDotNet.Sid)">
            <summary>
            Get readable name for a SID, if known. This covers sources of names such as LSASS lookup, capability names and package names.
            </summary>
            <param name="sid">The SID to lookup.</param>
            <returns>The name for the SID. Returns the SDDL form if no other name is known.</returns>
            <remarks>This function will cache name lookups, this means the name might not reflect what's currently in LSASS if it's been changed.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.ClearSidNameCache">
            <summary>
            Clear the SID name cache.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeKernelObjectHandle">
            <summary>
            Safe handle which represents a kernel handle.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeKernelObjectHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">An existing kernel handle.</param>
            <param name="owns_handle">True to own the kernel handle.</param>
        </member>
        <member name="M:NtApiDotNet.SafeKernelObjectHandle.ReleaseHandle">
            <summary>
            Overridden ReleaseHandle method.
            </summary>
            <returns>True if successfully released the handle.</returns>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.IsInvalid">
            <summary>
            Overridden IsInvalid method.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.Null">
            <summary>
            Get a handle which represents NULL.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.Inherit">
            <summary>
            Get or set whether the handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.ProtectFromClose">
            <summary>
            Get or set whether the handle is protected from closing.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.NtTypeName">
            <summary>
            Get the NT type name for this handle.
            </summary>
            <returns>The NT type name.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeKernelObjectHandle.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The handle as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.SafeStructureInOutBuffer`1">
            <summary>
            Safe handle for an in/out structure buffer.
            </summary>
            <typeparam name="T">The type of structure as the base of the memory allocation.</typeparam>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="value">Structure value to initialize the buffer.</param>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor">
            <summary>
            Constructor, initializes buffer with a default structure.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer.</param>
            <param name="buffer">An existing pointer to an existing HGLOBAL allocated buffer.</param>
            <param name="owns_handle">Specify whether safe handle owns the buffer.</param>
        </member>
        <member name="P:NtApiDotNet.SafeStructureInOutBuffer`1.Null">
            <summary>
            Get a buffer which represents NULL.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor, initializes buffer with a default structure.
            </summary>
            <param name="additional_size">Additional data to add to structure buffer.</param>
            <param name="add_struct_size">If true additional_size is added to structure size, otherwise reflects the total size.</param>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(`0,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Structure value to initialize the buffer.</param>
            <param name="additional_size">Additional data to add to structure buffer.</param>
            <param name="add_struct_size">If true additional_size is added to structure size, otherwise reflects the total size.</param>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.ReleaseHandle">
            <summary>
            Overridden ReleaseHandle method.
            </summary>
            <returns>True if successfully released the memory.</returns>
        </member>
        <member name="P:NtApiDotNet.SafeStructureInOutBuffer`1.Result">
            <summary>
            Get or set the result structure in the memory buffer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeStructureInOutBuffer`1.Data">
            <summary>
            Get a reference to the additional data.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.Detach">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.Detach(System.Int32)">
            <summary>
            Detaches the current buffer and allocates a new one.
            </summary>
            <param name="length">Specify a new length for the detached buffer. Must be &lt;= Length.</param>
            <returns>The detached buffer.</returns>
            <remarks>The original buffer will become invalid after this call.</remarks>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptorControl">
            <summary>
            Security descriptor control flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptorSid">
            <summary>
            A security descriptor SID which maintains defaulted state.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptorSid.Sid">
            <summary>
            The SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptorSid.Defaulted">
            <summary>
            Indicates whether the SID was defaulted or not.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptorSid.#ctor(NtApiDotNet.Sid,System.Boolean)">
            <summary>
            Constructor from existing SID.
            </summary>
            <param name="sid">The SID.</param>
            <param name="defaulted">Whether the SID was defaulted or not.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptorSid.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns>The string form of the SID</returns>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptor">
            <summary>
            Security descriptor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Dacl">
            <summary>
            Discretionary access control list (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Sacl">
            <summary>
            System access control list (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Owner">
            <summary>
            Owner (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Group">
            <summary>
            Group (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Control">
            <summary>
            Control flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Revision">
            <summary>
            Revision value
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.MandatoryLabel">
            <summary>
            Get or set mandatory label. Returns a medium label if it doesn't exist.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.ProcessTrustLabel">
            <summary>
            Get the process trust label.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.IntegrityLevel">
            <summary>
            Get or set the integrity level
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.DaclProtected">
            <summary>
            Get or set the DACL protected flag.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.SaclProtected">
            <summary>
            Get or set the SACL protected flag.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.GetMandatoryLabel">
            <summary>
            Get the mandatory label. Returns null if it doesn't exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToByteArray">
            <summary>
            Convert security descriptor to a byte array
            </summary>
            <returns>The binary security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSddl(NtApiDotNet.SecurityInformation)">
            <summary>
            Convert security descriptor to SDDL string
            </summary>
            <param name="security_information">The parts of the security descriptor to return</param>
            <returns>The SDDL string</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSddl">
            <summary>
            Convert security descriptor to SDDL string
            </summary>
            <returns>The SDDL string</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSafeBuffer(System.Boolean)">
            <summary>
            Convert security descriptor to a safe buffer.
            </summary>
            <param name="absolute">True to return an absolute security descriptor, false for self-relative.</param>
            <returns>A safe buffer for the security descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSafeBuffer">
            <summary>
            Convert security descriptor to a safe buffer.
            </summary>
            <returns>A safe buffer for the security descriptor.</returns>
            <remarks>This returns a self-relative security descriptor.</remarks>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAce(NtApiDotNet.Ace)">
            <summary>
            Add an ACE to the DACL, creating the DACL if needed.
            </summary>
            <param name="ace">The ACE to add to the DACL.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel,NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
            <param name="flags">The ACE flags.</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.Sid,NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="label">The integrity label SID</param>
            <param name="flags">The ACE flags.</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.MapGenericAccess(NtApiDotNet.NtType)">
            <summary>
            Map all generic access in this security descriptor to a specific type.
            </summary>
            <param name="type">The type to get the generic mapping from.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.MapGenericAccess(NtApiDotNet.GenericMapping)">
            <summary>
            Map all generic access in this security descriptor to a specific type.
            </summary>
            <param name="generic_mapping">The generic mapping.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The security descriptor as an SDDL string.</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="ptr">Native pointer to security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(NtApiDotNet.NtProcess,System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="process">The process containing the security descriptor.</param>
            <param name="ptr">Native pointer to security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="security_descriptor">Binary form of security descriptor</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(NtApiDotNet.NtToken)">
            <summary>
            Constructor from a token default DACL and ownership values.
            </summary>
            <param name="token">The token to use for its default DACL</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(NtApiDotNet.NtObject,NtApiDotNet.NtToken,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="base_object">Base object for security descriptor</param>
            <param name="token">Token for determining user rights</param>
            <param name="is_directory">True if a directory security descriptor</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.String)">
            <summary>
            Constructor from an SDDL string
            </summary>
            <param name="sddl">The SDDL string</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if invalid SDDL</exception>
        </member>
        <member name="T:NtApiDotNet.SecurityAuthority">
            <summary>
            Predefined security authorities
            </summary>
        </member>
        <member name="T:NtApiDotNet.SidIdentifierAuthority">
            <summary>
            Represents an identifier authority for a SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SidIdentifierAuthority.Value">
            <summary>
            Get a reference to the identifier authority. This can be used to modify the value
            </summary>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor(System.Byte[])">
            <summary>
            Construct from an existing authority array.
            </summary>
            <param name="authority">The authority, must be 6 bytes in length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if authority is not the correct length.</exception>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor(NtApiDotNet.SecurityAuthority)">
            <summary>
            Constructor from a simple predefined authority.
            </summary>
            <param name="authority">The predefined authority.</param>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.Equals(System.Object)">
            <summary>
            Compares authority to another.
            </summary>
            <param name="obj">The other authority to compare against.</param>
            <returns>True if authority is equal.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The authority hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.IsAuthority(NtApiDotNet.SecurityAuthority)">
            <summary>
            Determines if this is a specific security authority.
            </summary>
            <param name="authority">The security authority.</param>
            <returns>True if the security authority.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The security authority as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Sid">
            <summary>
            Class to represent a Security Identifier.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Sid.Authority">
            <summary>
            The SIDs authority.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Sid.SubAuthorities">
            <summary>
            List of the SIDs sub authorities.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SidIdentifierAuthority,System.UInt32[])">
            <summary>
            Constructor for authority and sub authorities.
            </summary>
            <param name="authority">The identifier authority.</param>
            <param name="sub_authorities">The sub authorities.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SecurityAuthority,System.UInt32[])">
            <summary>
            Constructor for authority and sub authorities.
            </summary>
            <param name="authority">The identifier authority.</param>
            <param name="sub_authorities">The sub authorities.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.IntPtr)">
            <summary>
            Constructor from an unmanged buffer.
            </summary>
            <param name="sid">A pointer to a buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Constructor from an unmanged buffer.
            </summary>
            <param name="sid">A safe buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SafeSidBufferHandle)">
            <summary>
            Constructor from a safe SID handle.
            </summary>
            <param name="sid">A safe SID handle containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.Byte[])">
            <summary>
            Constructor from an manged buffer.
            </summary>
            <param name="sid">A buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.Sid)">
            <summary>
            Constructor from existing Sid.
            </summary>
            <param name="sid">The existing Sid.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.String)">
            <summary>
            Constructor from an SDDL string.
            </summary>
            <param name="sid">The SID in SDDL format.</param>
            <example>
            new Sid("S-1-0-0");
            new Sid("WD");
            </example>
            <seealso cref="M:NtApiDotNet.NtSecurity.LookupAccountName(System.String)"/>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.IO.BinaryReader)">
            <summary>
            Construct a SID from a binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.ToSafeBuffer">
            <summary>
            Convert the SID to a safe buffer.
            </summary>
            <returns>The safe buffer containing the SID.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.ToArray">
            <summary>
            Convert to a managed byte array.
            </summary>
            <returns>The managed byte array.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.EqualPrefix(NtApiDotNet.Sid)">
            <summary>
            Compares two sids to see if their prefixes are the same. The sids must have the same number of subauthorities.
            </summary>
            <param name="sid">The sid to compare against</param>
            <returns>True if the sids share a prefix.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.Equals(System.Object)">
            <summary>
            Compare two Sids.
            </summary>
            <param name="obj">The other Sid to compare.</param>
            <returns>True if the Sids are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.op_Equality(NtApiDotNet.Sid,NtApiDotNet.Sid)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">Sid 1</param>
            <param name="b">Sid 2</param>
            <returns>True if the Sids are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.op_Inequality(NtApiDotNet.Sid,NtApiDotNet.Sid)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">Sid 1</param>
            <param name="b">Sid 2</param>
            <returns>True if the Sids are not equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.ToString">
            <summary>
            Convert to an SDDL format string.
            </summary>
            <returns>The SDDL format string (e.g. S-1-1-0)</returns>
        </member>
        <member name="P:NtApiDotNet.Sid.Name">
            <summary>
            Get the account name of the SID or the SDDL form is no corresponding name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.KnownSidValue">
            <summary>
            An enumeration to reference a known SID.
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Null">
            <summary>
            NULL SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.World">
            <summary>
            Everyone SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Local">
            <summary>
            Local user SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CreatorOwner">
            <summary>
            CREATOR OWNER SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CreatorGroup">
            <summary>
            CREATOR GROUP SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Service">
            <summary>
            Service SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Anonymous">
            <summary>
            ANONYMOUS LOGON SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AuthenticatedUsers">
            <summary>
            Authenticated Users SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Restricted">
            <summary>
            RESTRICTED SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.LocalSystem">
            <summary>
            LOCAL SYSTEM SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.LocalService">
            <summary>
            LOCAL SERVICE SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.NetworkService">
            <summary>
            NETWORK SERVICE SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AllApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AllRestrictedApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.TrustedInstaller">
            <summary>
            NT SERVICE\TrustedInstaller
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.BuiltinUsers">
            <summary>
            BUILTIN\Users
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.BuiltinAdministrators">
            <summary>
            BUILTIN\Administrators
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetClient">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection, including incoming connections from the Internet
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityPrivateNetworkClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your home or work networks
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityPicturesLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your pictures library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityVideosLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your videos library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityMusicLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your music library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityDocumentsLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your documents library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityEnterpriseAuthentication">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Windows credentials
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilitySharedUserCertificates">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Software and hardware certificates or a smart card
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityRemovableStorage">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Removable storage
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityAppointments">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Appointments
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityContacts">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Contacts
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetExplorer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Internet Explorer
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityConstrainedImpersonation">
            <summary>
            Constrained Impersonation Capability
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.OwnerRights">
            <summary>
            OWNER RIGHTS
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Self">
            <summary>
            NT AUTHORITY\SELF
            </summary>
        </member>
        <member name="T:NtApiDotNet.KnownSids">
            <summary>
            Static methods to get some known SIDs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Null">
            <summary>
            NULL SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.World">
            <summary>
            Everyone SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Local">
            <summary>
            Local user SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CreatorOwner">
            <summary>
            CREATOR OWNER SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CreatorGroup">
            <summary>
            CREATOR GROUP SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Service">
            <summary>
            Service SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Anonymous">
            <summary>
            ANONYMOUS LOGON SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AuthenticatedUsers">
            <summary>
            Authenticated Users SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Restricted">
            <summary>
            RESTRICTED SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.LocalSystem">
            <summary>
            LOCAL SYSTEM SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.LocalService">
            <summary>
            LOCAL SERVICE SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.NetworkService">
            <summary>
            NETWORK SERVICE SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AllApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AllRestrictedApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.TrustedInstaller">
            <summary>
            NT SERVICE\TrustedInstaller
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.BuiltinUsers">
            <summary>
            BUILTIN\Users
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.BuiltinAdministrators">
            <summary>
            BUILTIN\Administrators
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetClient">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection, including incoming connections from the Internet
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityPrivateNetworkClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your home or work networks
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityPicturesLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your pictures library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityVideosLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your videos library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityMusicLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your music library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityDocumentsLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your documents library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityEnterpriseAuthentication">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Windows credentials
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilitySharedUserCertificates">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Software and hardware certificates or a smart card
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityRemovableStorage">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Removable storage
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityAppointments">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Appointments
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityContacts">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Contacts
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetExplorer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Internet Explorer
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityConstrainedImpersonation">
            <summary>
            Constrained Impersonation Capability
            </summary>
        </member>
        <member name="M:NtApiDotNet.KnownSids.GetKnownSid(NtApiDotNet.KnownSidValue)">
            <summary>
            Get a known SID based on a specific enumeration.
            </summary>
            <param name="sid">The enumerated sid value.</param>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.ThreadImpersonationContext">
            <summary>
            Disposable class to scope an impersonation context.
            </summary>
        </member>
        <member name="M:NtApiDotNet.ThreadImpersonationContext.Revert">
            <summary>
            Revert impersonation back to the current user.
            </summary>
        </member>
        <member name="T:NtApiDotNet.TokenPrivilege">
            <summary>
            Class to represent the state of a token privilege
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Attributes">
            <summary>
            Privilege attributes
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Luid">
            <summary>
            Privilege LUID
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Name">
            <summary>
            Get the name of the privilege
            </summary>
            <returns>The privilege name</returns>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.DisplayName">
            <summary>
            Get the display name/description of the privilege
            </summary>
            <returns>The display name</returns>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Enabled">
            <summary>
            Get whether privilege is enabled
            </summary>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(NtApiDotNet.Luid,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="luid">The privilege LUID</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(NtApiDotNet.TokenPrivilegeValue,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="value">The privilege value</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(System.String,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">The privilege name.</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The privilege name.</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.ToString">
            <summary>
            Conver to a string
            </summary>
            <returns>The privilege name.</returns>
        </member>
        <member name="T:NtApiDotNet.UnicodeString">
            <summary>
            Standard UNICODE_STRING class
            </summary>
        </member>
        <member name="T:NtApiDotNet.AnsiString">
            <summary>
            Standard ANSI_STRING class
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringOut">
            <summary>
            This class is used when the UNICODE_STRING is an output parameter.
            The allocatation of the buffer is handled elsewhere.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringIn">
            <summary>
            Structure to use when passing in a unicode string as a sub-structure.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringAllocated">
            <summary>
            This class is used when the UNICODE_STRING needs to be preallocated
            and then returned back from a caller.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObjectUtils">
            <summary>
            Static utility methods.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.SafeHandleToArray(System.Runtime.InteropServices.SafeHandle,System.Int32)">
            <summary>
            Convert the safe handle to an array of bytes.
            </summary>
            <returns>The data contained in the allocaiton.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToNtException(NtApiDotNet.NtStatus)">
            <summary>
            Convert an NtStatus to an exception if the status is an error
            </summary>
            <param name="status">The NtStatus</param>
            <returns>The original NtStatus if not an error</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status is an error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToNtException(NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Convert an NtStatus to an exception if the status is an error and throw_on_error is true.
            </summary>
            <param name="status">The NtStatus</param>
            <param name="throw_on_error">True to throw an exception onerror.</param>
            <returns>The original NtStatus if not thrown</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status is an error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.IsSuccess(NtApiDotNet.NtStatus)">
            <summary>
            Checks if the NtStatus value is a success
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>True if a success</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GetSeverity(NtApiDotNet.NtStatus)">
            <summary>
            Get the severity of the NTSTATUS.
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>The severity.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GetFacility(NtApiDotNet.NtStatus)">
            <summary>
            Get the facility of the NTSTATUS.
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>The facility.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GetStatusCode(NtApiDotNet.NtStatus)">
            <summary>
            Get the status code of the NTSTATUS.
            </summary>
            <param name="status">The NtStatus value.</param>
            <returns>The static code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.IsCustomerCode(NtApiDotNet.NtStatus)">
            <summary>
            Is an NTSTATUS a customer code.
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>True if is a customer code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.IsReserved(NtApiDotNet.NtStatus)">
            <summary>
            Is an NTSTATUS reserved.
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>True if reserved.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.BuildStatus(NtApiDotNet.NtStatusSeverity,System.Boolean,System.Boolean,NtApiDotNet.NtStatusFacility,System.Int32)">
            <summary>
            Build a status from it's component parts.
            </summary>
            <param name="severity">The severity of the status code.</param>
            <param name="is_customer_code">Is this a customer code?</param>
            <param name="is_reserved">Is this a reserved code?</param>
            <param name="facility">The facility.</param>
            <param name="code">The status code.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GetNtStatusMessage(NtApiDotNet.NtStatus)">
            <summary>
            Convert an NTSTATUS to a message description.
            </summary>
            <param name="status">The status to convert.</param>
            <returns>The message description, or an empty string if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ConvertIntToNtStatus(System.Int32)">
            <summary>
            Convert an integer to an NtStatus code.
            </summary>
            <param name="status">The integer status.</param>
            <returns>The converted code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.AccessRightsToString(System.Type,NtApiDotNet.AccessMask)">
            <summary>
            Convert an access rights type to a string.
            </summary>
            <param name="t">The enumeration type for the string conversion</param>
            <param name="access">The access mask to convert</param>
            <returns>The string version of the access</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.AccessRightsToString(System.Enum)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="access">The access rights</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GrantedAccessAsString(NtApiDotNet.AccessMask,NtApiDotNet.GenericMapping,System.Type,System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <param name="generic_mapping">Generic mapping for object type.</param>
            <param name="enum_type">Enum type to convert to string.</param>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToDisposableList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert an IEnumerable to a Disposable List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.RunAndDispose``2(NtApiDotNet.NtResult{``0},System.Func{``0,``1},``1)">
            <summary>
            Run a function on an NtResult and dispose the result afterwards.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <typeparam name="S">The result of the function.</typeparam>
            <param name="result">The result.</param>
            <param name="func">The function to call.</param>
            <param name="default_value">The default value to return if an error occurred.</param>
            <returns>The result of func.</returns>
            <remarks>If result is not a success then the function is not called.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.RunAndDispose``2(NtApiDotNet.NtResult{``0},System.Func{``0,``1})">
            <summary>
            Run a function on an NtResult and dispose the result afterwards.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <typeparam name="S">The result of the function.</typeparam>
            <param name="result">The result.</param>
            <param name="func">The function to call.</param>
            <returns>The result of func.</returns>
            <remarks>If result is not a success then the function is not called.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.RunAndDispose``1(NtApiDotNet.NtResult{``0},System.Action{``0})">
            <summary>
            Run an action on an NtResult and dispose the result afterwards.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <param name="result">The result.</param>
            <param name="action">The action to call.</param>
            <remarks>If result is not a success then the action is not called.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.RunAndDispose``2(``0,System.Func{``0,``1})">
            <summary>
            Run a function on an NtResult and dispose the result afterwards.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <typeparam name="S">The result of the function.</typeparam>
            <param name="result">The result.</param>
            <param name="func">The function to call.</param>
            <returns>The result of func.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.RunAndDispose``1(``0,System.Action{``0})">
            <summary>
            Run an action on an NtResult and dispose the result afterwards.
            </summary>
            <typeparam name="T">The underlying result type.</typeparam>
            <param name="result">The result.</param>
            <param name="action">The action to call.</param>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.FromHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Convert a handle to a known object type.
            </summary>
            <param name="handle">The handle.</param>
            <returns>The object type.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.FromHandle(System.IntPtr,System.Boolean)">
            <summary>
            Convert a handle to a known object type.
            </summary>
            <param name="handle">The handle.</param>
            <param name="owns_handle">True to own the handle.</param>
            <returns>The object type.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.FromHandle(System.Int32,System.Boolean)">
            <summary>
            Convert a handle to a known object type.
            </summary>
            <param name="handle">The handle.</param>
            <param name="owns_handle">True to own the handle.</param>
            <returns>The object type.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.MapNtStatusToDosError(NtApiDotNet.NtStatus)">
            <summary>
            Map a status to a DOS error code. Takes into account NTWIN32
            status codes.
            </summary>
            <param name="status">The status code.</param>
            <returns>The mapped DOS error.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.CreateResult``1(NtApiDotNet.NtStatus,System.Boolean,System.Func{``0})">
            <summary>
            Create an NT result object. If status is successful then call function otherwise use default value.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="status">The associated status code.</param>
            <param name="throw_on_error">Throw an exception on error.</param>
            <param name="create_func">Function to call to create an instance of the result</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.CreateResult``1(``0)">
            <summary>
            Create a successful NT result object.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="result">The result value.</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.CreateResult``1(NtApiDotNet.NtStatus,System.Boolean,System.Func{NtApiDotNet.NtStatus,``0},System.Action{NtApiDotNet.NtStatus})">
            <summary>
            Create an NT result object. If status is successful then call function otherwise use default value.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="status">The associated status code.</param>
            <param name="throw_on_error">Throw an exception on error.</param>
            <param name="create_func">Function to call to create an instance of the result</param>
            <param name="error_func">Function to call on error.</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.CreateResult``1(NtApiDotNet.NtStatus,System.Boolean,System.Func{NtApiDotNet.NtStatus,``0})">
            <summary>
            Create an NT result object. If status is successful then call function otherwise use default value.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="status">The associated status code.</param>
            <param name="throw_on_error">Throw an exception on error.</param>
            <param name="create_func">Function to call to create an instance of the result</param>
            <returns>The created result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWellKnownIoControlCodes.KnownControlCodeToName(NtApiDotNet.NtIoControlCode)">
            <summary>
            Convert a control code to a known name.
            </summary>
            <param name="control_code">The control code.</param>
            <returns>The known name, or an empty string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWellKnownIoControlCodes.GetKnownControlCodes">
            <summary>
            Get a list of known control codes.
            </summary>
            <returns>The list of known control codes.</returns>
        </member>
        <member name="T:NtApiDotNet.NtIoControlCode">
            <summary>
            Represents a NT file IO control code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.DeviceType">
            <summary>
            Type of device
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Function">
            <summary>
            Function number
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Method">
            <summary>
            Buffering method
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Access">
            <summary>
            Access of file handle
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Name">
            <summary>
            Get a known name associated with this IO control code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.#ctor(NtApiDotNet.FileDeviceType,System.Int32,NtApiDotNet.FileControlMethod,NtApiDotNet.FileControlAccess)">
            <summary>
            Constructor
            </summary>
            <param name="device_type">Type of device</param>
            <param name="function">Function number</param>
            <param name="method">Buffering method</param>
            <param name="access">Access of file handle</param>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="code">Raw IO control code to convert.</param>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToControlCode(System.Int32)">
            <summary>
            Static method to create an NtIoControlCode 
            </summary>
            <param name="code">The conde as an integer.</param>
            <returns>The io control code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToInt32">
            <summary>
            Convert the io control code to an Int32
            </summary>
            <returns>The int32 version of the code</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.GetHashCode">
            <summary>
            Overriden hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.Equals(System.Object)">
            <summary>
            Overridden equals.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The IO control code as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToString(System.String)">
            <summary>
            Format IO control code with an format specifier.
            </summary>
            <param name="format">The format specified. For example use X to format as a hexadecimal number.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToString(System.String,System.IFormatProvider)">
            <summary>
            Format the underlying IO control code with an format specifier.
            </summary>
            <param name="format">The format specified. For example use X to format as a hexadecimal number.</param>
            <param name="formatProvider">Format provider.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:NtApiDotNet.UserGroup">
            <summary>
            Class to represent a user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Sid">
            <summary>
            The SID of the user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Attributes">
            <summary>
            The attributes of the user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Enabled">
            <summary>
            Get whether the user group is enabled
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Mandatory">
            <summary>
            Get whether the user group is mandatory
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.DenyOnly">
            <summary>
            Get whether the user group is used for deny only
            </summary>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(NtApiDotNet.Sid,NtApiDotNet.GroupAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="sid">The SID</param>
            <param name="attributes">The attributes</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(NtApiDotNet.Sid)">
            <summary>
            Constructor from a SID.
            </summary>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(System.String)">
            <summary>
            Constructor from a SID or account name.
            </summary>
            <param name="name">The SID or account name.</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.ToString">
            <summary>
            Convert to a string
            </summary>
            <returns>The account name if available or the SDDL SID</returns>
        </member>
        <member name="T:NtApiDotNet.Utilities.Text.BinaryEncoding">
            <summary>
            Encoding object which converts 1 to 1 with bytes.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Utilities.Text.BinaryEncoding.Instance">
            <summary>
            Default instance of the encoding.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Utilities.Text.BinaryEncoding.EncodingName">
            <summary>
            Get the encoding name.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Get byte count for characters.
            </summary>
            <param name="chars">The character array.</param>
            <param name="index">Index into the array.</param>
            <param name="count">Number of characters in the array to use.</param>
            <returns>The number of bytes this character array requires.</returns>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Get bytes for characters.
            </summary>
            <param name="chars">The character array.</param>
            <param name="charIndex">Index into the array.</param>
            <param name="charCount">Number of characters in the array to use.</param>
            <param name="byteIndex">The index into the byte array.</param>
            <param name="bytes">The byte array to copy into.</param>
            <returns>The number of bytes generated.</returns>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get the character count for bytes.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">Index into the array.</param>
            <param name="count">Number of bytes in the array to use.</param>
            <returns>The number of characters this byte array requires.</returns>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Get byte count for characters.
            </summary>
            <param name="chars">The character array.</param>
            <param name="charIndex">Index into the array.</param>
            <param name="byteCount">Number of bytes in the array to use.</param>
            <param name="byteIndex">The index into the byte array.</param>
            <param name="bytes">The byte array to copy into.</param>
            <returns>The number of characters generated.</returns>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            Get maximum bytes for a number of characters.
            </summary>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Utilities.Text.BinaryEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            Get maximum characters for a number of bytes.
            </summary>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="P:NtApiDotNet.Utilities.Text.BinaryEncoding.IsSingleByte">
            <summary>
            Indicates if the encoding is a single byte.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.AppContainerProfile">
            <summary>
            A class which represents an AppContainer profile.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Create(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Boolean)">
            <summary>
            Create a new AppContainerProfile.
            </summary>
            <param name="appcontainer_name">The name of the AppContainer.</param>
            <param name="display_name">A display name.</param>
            <param name="description">An optional description.</param>
            <param name="capabilities">An optional list of capability SIDs.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The created AppContainer profile.</returns>
            <remarks>If the profile already exists then it'll be opened instead.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Create(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Create a new AppContainerProfile.
            </summary>
            <param name="appcontainer_name">The name of the AppContainer.</param>
            <param name="display_name">A display name.</param>
            <param name="description">An optional description.</param>
            <param name="capabilities">An optional list of capability SIDs.</param>
            <returns>The created AppContainer profile.</returns>
            <remarks>If the profile already exists then it'll be opened instead.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.CreateTemporary">
            <summary>
            Create a temporary AppContainer profile.
            </summary>
            <returns>The created AppContainer profile.</returns>
            <remarks>The profile will be marked to DeleteOnClose. In order to not leak the profile you
            should wait till the process has exited and dispose this profile.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Open(System.String,System.Boolean)">
            <summary>
            Opens an AppContainerProfile.
            </summary>
            <param name="appcontainer_name">The name of the AppContainer.</param>
            <param name="throw_on_error">True to throw no error.</param>
            <returns>The opened AppContainer profile.</returns>
            <remarks>This method doesn't check the profile exists.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Open(System.String)">
            <summary>
            Opens an AppContainerProfile.
            </summary>
            <param name="appcontainer_name">The name of the AppContainer.</param>
            <returns>The opened AppContainer profile.</returns>
            <remarks>This method doesn't check the profile exists.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Delete(System.String,System.Boolean)">
            <summary>
            Delete an existing profile.
            </summary>
            <param name="appcontainer_name">The AppContainer name.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The HRESULT from the delete operation.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Delete(System.String)">
            <summary>
            Delete an existing profile.
            </summary>
            <param name="appcontainer_name">The AppContainer name.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Delete(System.Boolean)">
            <summary>
            Delete an existing profile.
            </summary>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The HRESULT from the delete operation.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Delete">
            <summary>
            Delete an existing profile.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Dispose">
            <summary>
            Dispose of the AppContainer profile. If DeleteOnClose is set then the profile will be deleted.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.AppContainerProfile.Close">
            <summary>
            Close an AppContainer profile. If DeleteOnClose is set then the profile will be deleted.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.AppContainerProfile.Name">
            <summary>
            The AppContainer name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.AppContainerProfile.Sid">
            <summary>
            The package SID 
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.AppContainerProfile.Path">
            <summary>
            Path to the AppContainer profile.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.AppContainerProfile.DeleteOnClose">
            <summary>
            Set to true to delete the profile when closed.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ExecutableManifest">
            <summary>
            Contains information about a manifest file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ParseError">
            <summary>
            True if parsing the XML manifest failed.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.FullPath">
            <summary>
            Full path to the manifest location.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.Name">
            <summary>
            The name of the manifest.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.UiAccess">
            <summary>
            True if the manifest indicates UI access.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ExecutionLevel">
            <summary>
            The execution level from the manifest.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.AutoElevate">
            <summary>
            True if the manifest indicates auto elevation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ManifestXml">
            <summary>
            The manifest XML.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ExecutableManifest.GetManifests(System.String)">
            <summary>
            Get the manifests from a file.
            </summary>
            <param name="filename">The file to extract the manifests from.</param>
            <returns>The list of manifests.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SecurityLogonType">
            <summary>
            Logon type
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.UndefinedLogonType">
            <summary>
            This is used to specify an undefined logon type
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Interactive">
            <summary>
            Interactively logged on (locally or remotely)
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Network">
            <summary>
            Accessing system via network
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Batch">
            <summary>
            Started via a batch queue
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Service">
            <summary>
            Service started by service controller
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Proxy">
            <summary>
            Proxy logon
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Unlock">
            <summary>
            Unlock workstation
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.NetworkCleartext">
            <summary>
            Network logon with cleartext credentials
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.NewCredentials">
            <summary>
            Clone caller, new default credentials
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.LogonUtils">
            <summary>
            Utilities for user logon.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.Logon(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon a user with a username and password.
            </summary>
            <param name="user">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="type">The type of logon token.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.Logon(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup})">
            <summary>
            Logon a user with a username and password.
            </summary>
            <param name="user">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="type">The type of logon token.</param>
            <param name="groups">Additional groups to add. Needs SeTcbPrivilege.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.LogonS4U(System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon user using S4U
            </summary>
            <param name="user">The username.</param>
            <param name="realm">The user's realm.</param>
            <param name="type">The type of logon token.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.PackageArchitecture">
            <summary>
            APPX Package Architecture.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageArchitecture.X86">
            <summary>
            X86
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageArchitecture.ARM">
            <summary>
            ARM
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageArchitecture.X64">
            <summary>
            X64
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageArchitecture.Neutral">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageArchitecture.ARM64">
            <summary>
            ARM64
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.PackageOrigin">
            <summary>
            APPX Package Origin.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.Unknown">
            <summary>
            Unknown origin.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.Unsigned">
            <summary>
            Unsigned.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.Inbox">
            <summary>
            Inbox.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.Store">
            <summary>
            Store.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.DeveloperUnsigned">
            <summary>
            Developer unsigned.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.DeveloperSigned">
            <summary>
            Developer signed.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.PackageOrigin.LineOfBusiness">
            <summary>
            Line-of-business.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.PackageIdentity">
            <summary>
            Class which represents an AppContainer package identity.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.ProcessorArchitecture">
            <summary>
            Process architecture.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.Version">
            <summary>
            Package version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.Name">
            <summary>
            Package family name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.Publisher">
            <summary>
            Publisher (not always available).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.ResourceId">
            <summary>
            Resource ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.PublisherId">
            <summary>
            Published ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.FullName">
            <summary>
            Full package name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.Origin">
            <summary>
            Package origin.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.PackageIdentity.Path">
            <summary>
            Package install path.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.PackageIdentity.FindDelegate">
            <summary>
            Get the GetStagedPackageOrigin method as a delegate. It's supposed to be exposed by kernel32,
            but actually doesn't seem to be.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.PackageIdentity.CreateFromFullName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create from a package full name.
            </summary>
            <param name="package_full_name">The package full name.</param>
            <param name="full_information">Query for full information (needs to be installed for the current user).</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The package identity.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.PackageIdentity.CreateFromFullName(System.String,System.Boolean)">
            <summary>
            Create from a package full name.
            </summary>
            <param name="package_full_name">The package full name.</param>
            <param name="full_information">Query for full information (needs to be installed for the current user).</param>
            <returns>The package identity.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.RpcClient">
            <summary>
            Generic RPC client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcClient.#ctor(System.Guid,System.Version)">
            <summary>
            Constructor.
            </summary>
            <param name="interface_id">The interface ID.</param>
            <param name="interface_version">Version of the interface.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcClient.#ctor(NtApiDotNet.Win32.RpcServer)">
            <summary>
            Constructor.
            </summary>
            <param name="server">The RPC server to bind to.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcClient.SendReceive(System.Int32,NtApiDotNet.Ndr.Marshal.NdrMarshalBuffer)">
            <summary>
            Send and receive an RPC message.
            </summary>
            <param name="proc_num">The procedure number.</param>
            <param name="ndr_buffer">Marshal NDR buffer for the call.</param>
            <returns>Unmarshal NDR buffer for the result.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport">
            <summary>
            Interface to implement an RPC client transport.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.Bind(System.Guid,System.Version,System.Guid,System.Version)">
            <summary>
            Bind the RPC transport to a specified interface.
            </summary>
            <param name="interface_id">The interface ID to bind to.</param>
            <param name="interface_version">The interface version to bind to.</param>
            <param name="transfer_syntax_id">The transfer syntax to use.</param>
            <param name="transfer_syntax_version">The transfer syntax version to use.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.SendReceive(System.Int32,System.Guid,NtApiDotNet.Ndr.Marshal.NdrDataRepresentation,System.Byte[],System.Collections.Generic.IReadOnlyCollection{NtApiDotNet.NtObject})">
            <summary>
            Send and receive an RPC message.
            </summary>
            <param name="proc_num">The procedure number.</param>
            <param name="objuuid">The object UUID for the call.</param>
            <param name="data_representation">NDR data representation.</param>
            <param name="ndr_buffer">Marshal NDR buffer for the call.</param>
            <param name="handles">List of handles marshaled into the buffer.</param>
            <returns>Client response from the send.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.Disconnect">
            <summary>
            Disconnect the transport.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.Connected">
            <summary>
            Get whether the client is connected or not.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.Endpoint">
            <summary>
            Get the endpoint the client is connected to.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransport.ProtocolSequence">
            <summary>
            Get the transport protocol sequence.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport">
            <summary>
            RPC client transport over ALPC.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.#ctor(System.String,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path to connect. The format depends on the transport.</param>
            <param name="security_quality_of_service">The security quality of service for the connection.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.Bind(System.Guid,System.Version,System.Guid,System.Version)">
            <summary>
            Bind the RPC transport to an interface.
            </summary>
            <param name="interface_id">The interface ID to bind to.</param>
            <param name="interface_version">The interface version to bind to.</param>
            <param name="transfer_syntax_id">The transfer syntax to use.</param>
            <param name="transfer_syntax_version">The transfer syntax version to use.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.SendReceive(System.Int32,System.Guid,NtApiDotNet.Ndr.Marshal.NdrDataRepresentation,System.Byte[],System.Collections.Generic.IReadOnlyCollection{NtApiDotNet.NtObject})">
            <summary>
            Send and receive an RPC message.
            </summary>
            <param name="proc_num">The procedure number.</param>
            <param name="objuuid">The object UUID for the call.</param>
            <param name="data_representation">NDR data representation.</param>
            <param name="ndr_buffer">Marshal NDR buffer for the call.</param>
            <param name="handles">List of handles marshaled into the buffer.</param>
            <returns>Client response from the send.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.Dispose">
            <summary>
            Dispose of the client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.Disconnect">
            <summary>
            Disconnect the client.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.Connected">
            <summary>
            Get whether the client is connected or not.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.Endpoint">
            <summary>
            Get the ALPC port path that we connected to.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.CallId">
            <summary>
            Get the current Call ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcAlpcClientTransport.ProtocolSequence">
            <summary>
            Get the transport protocol sequence.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransportFactory">
            <summary>
            Interface to implement an RPC client transport factory.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransportFactory.Connect(NtApiDotNet.Win32.RpcEndpoint,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Connect a new RPC client transport.
            </summary>
            <param name="endpoint">The RPC endpoint.</param>
            <param name="security_quality_of_service">The security quality of service for the connection.</param>
            <returns>The connected transport.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.RpcClientTransportFactory">
            <summary>
            Factory for RPC client transports.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcClientTransportFactory.AddFactory(System.String,NtApiDotNet.Win32.Rpc.Transport.IRpcClientTransportFactory)">
            <summary>
            Add a new transport factory.
            </summary>
            <param name="protocol_seq">The protocol sequence to add.</param>
            <param name="factory">The transport factory.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcClientTransportFactory.ConnectEndpoint(NtApiDotNet.Win32.RpcEndpoint,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Connect a client transport from an endpoint.
            </summary>
            <param name="endpoint">The RPC endpoint.</param>
            <param name="security_quality_of_service">The security quality of service for the connection.</param>
            <returns>The  connected client transport.</returns>
            <exception cref="T:System.ArgumentException">Thrown if protocol sequence unsupported.</exception>
            <exception cref="T:System.Exception">Other exceptions depending on the connection.</exception>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo">
            <summary>
            Extended error information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.ComputerName">
            <summary>
            Computer name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.ProcessId">
            <summary>
            Process ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.TimeStamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.GeneratingComponent">
            <summary>
            Generating component.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.Status">
            <summary>
            Status code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.DetectionLocation">
            <summary>
            Detection location.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.Flags">
            <summary>
            Flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcExtendedErrorInfo.Parameters">
            <summary>
            Extra parameters.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.Transport.RpcFaultException">
            <summary>
            Exception for RPC fault conditions.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.Transport.RpcFaultException.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="rpc_status">The RPC status code.</param>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.Transport.RpcFaultException.ExtendedErrorInfo">
            <summary>
            Get extended error information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcClientBase">
            <summary>
            Base class for a RPC client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.#ctor(System.Guid,System.Version)">
            <summary>
            Constructor.
            </summary>
            <param name="interface_id">The interface ID.</param>
            <param name="interface_version">Version of the interface.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="interface_id">The interface ID as a string.</param>
            <param name="major">Major version of the interface.</param>
            <param name="minor">Minor version of the interface.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.SendReceive(System.Int32,NtApiDotNet.Ndr.Marshal.NdrDataRepresentation,System.Byte[],System.Collections.Generic.IReadOnlyCollection{NtApiDotNet.NtObject})">
            <summary>
            Send and receive an RPC message.
            </summary>
            <param name="proc_num">The procedure number.</param>
            <param name="data_representation">The NDR data representation.</param>
            <param name="ndr_buffer">Marshal NDR buffer for the call.</param>
            <param name="handles">List of handles marshaled into the buffer.</param>
            <returns>Unmarshal NDR buffer for the result.</returns>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.Connected">
            <summary>
            Get whether the client is connected or not.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.Endpoint">
            <summary>
            Get the endpoint that we connected to.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.ProtocolSequence">
            <summary>
            Get the protocol sequence that we connected to.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.ObjectUuid">
            <summary>
            Get or set the current Object UUID used for calls.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.InterfaceId">
            <summary>
            The RPC interface ID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBase.InterfaceVersion">
            <summary>
            The RPC interface version.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Connect(NtApiDotNet.Win32.RpcEndpoint,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Connect the client to a RPC endpoint.
            </summary>
            <param name="endpoint">The endpoint for RPC server.</param>
            <param name="security_quality_of_service">The security quality of service for the connection.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Connect(System.String,System.String,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Connect the client to a RPC endpoint.
            </summary>
            <param name="protocol_seq">The protocol sequence for the transport.</param>
            <param name="endpoint">The endpoint for the protocol sequence.</param>
            <param name="security_quality_of_service">The security quality of service for the connection.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Connect(System.String,NtApiDotNet.SecurityQualityOfService)">
            <summary>
            Connect the client to an ALPC RPC port.
            </summary>
            <param name="alpc_path">The path to the ALPC RPC port.</param>
            <param name="security_quality_of_service">The security quality of service for the port.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Connect(System.String)">
            <summary>
            Connect the client to an ALPC RPC port.
            </summary>
            <param name="alpc_path">The path to the ALPC RPC port. If an empty string the endpoint will be looked up in the endpoint mapper.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Connect">
            <summary>
            Connect the client to an ALPC RPC port.
            </summary>
            <remarks>The ALPC endpoint will be looked up in the endpoint mapper.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Dispose">
            <summary>
            Dispose of the client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBase.Disconnect">
            <summary>
            Disconnect the client.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcClientBuilder">
            <summary>
            Builder to create an RPC client from an RpcServer class.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Build a source file for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <param name="options">The code generation options, can be null.</param>
            <param name="provider">The code dom provider, such as CSharpDomProvider</param>
            <returns>The source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments)">
            <summary>
            Build a C# source file for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <returns>The C# source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(NtApiDotNet.Win32.RpcServer)">
            <summary>
            Build a C# source file for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <returns>The C# source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(System.Collections.Generic.IEnumerable{NtApiDotNet.Ndr.NdrComplexTypeReference},System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Build a source file for RPC complex types.
            </summary>
            <param name="complex_types">The RPC complex types to build the encoders from.</param>
            <param name="decoder_name">Name of the decoder class. Can be null or empty to use default.</param>
            <param name="encoder_name">Name of the encoder class. Can be null or empty to use default.</param>
            <param name="namespace_name">Name of the generated namespace. Null or empty specified no namespace.</param>
            <param name="options">The code generation options, can be null.</param>
            <param name="provider">The code dom provider, such as CSharpDomProvider</param>
            <returns>The source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(System.Collections.Generic.IEnumerable{NtApiDotNet.Ndr.NdrComplexTypeReference},System.String,System.String,System.String)">
            <summary>
            Build a source file for RPC complex types.
            </summary>
            <param name="complex_types">The RPC complex types to build the encoders from.</param>
            <param name="decoder_name">Name of the decoder class. Can be null or empty to use default.</param>
            <param name="encoder_name">Name of the encoder class. Can be null or empty to use default.</param>
            <param name="namespace_name">Name of the generated namespace. Null or empty specified no namespace.</param>
            <returns>The source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildSource(System.Collections.Generic.IEnumerable{NtApiDotNet.Ndr.NdrComplexTypeReference})">
            <summary>
            Build a source file for RPC complex types.
            </summary>
            <param name="complex_types">The RPC complex types to build the encoders from.</param>
            <returns>The C# source code file.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildAssembly(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments,System.Boolean,System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Compile an in-memory assembly for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <param name="ignore_cache">True to ignore cached assemblies.</param>
            <param name="provider">Code DOM provider to compile the assembly.</param>
            <returns>The compiled assembly.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildAssembly(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments,System.Boolean)">
            <summary>
            Compile an in-memory assembly for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <param name="ignore_cache">True to ignore cached assemblies.</param>
            <returns>The compiled assembly.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildAssembly(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments)">
            <summary>
            Compile an in-memory assembly for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <returns>The compiled assembly.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildAssembly(NtApiDotNet.Win32.RpcServer,System.Boolean)">
            <summary>
            Compile an in-memory assembly for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="ignore_cache">True to ignore cached assemblies.</param>
            <returns>The compiled assembly.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.BuildAssembly(NtApiDotNet.Win32.RpcServer)">
            <summary>
            Compile an in-memory assembly for the RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <returns>The compiled assembly.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.CreateClient(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments,System.Boolean,System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Create an instance of an RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="ignore_cache">True to ignore cached assemblies.</param>
            <param name="args">Additional builder arguments.</param>
            <param name="provider">Code DOM provider to compile the assembly.</param>
            <returns>The created RPC client.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.CreateClient(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments,System.Boolean)">
            <summary>
            Create an instance of an RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="ignore_cache">True to ignore cached assemblies.</param>
            <param name="args">Additional builder arguments.</param>
            <returns>The created RPC client.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.CreateClient(NtApiDotNet.Win32.RpcServer,NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments)">
            <summary>
            Create an instance of an RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <param name="args">Additional builder arguments.</param>
            <returns>The created RPC client.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilder.CreateClient(NtApiDotNet.Win32.RpcServer)">
            <summary>
            Create an instance of an RPC client.
            </summary>
            <param name="server">The RPC server to base the client on.</param>
            <returns>The created RPC client.</returns>
            <remarks>This method will cache the results of the compilation against the RpcServer.</remarks>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags">
            <summary>
            Flags for the RPC client builder.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.GenerateConstructorProperties">
            <summary>
            Generate public properties on the client to create defined complex types.
            </summary>
            <remarks>If not specified then constructors will be defined on the types themselves.</remarks>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.InsertBreakpoints">
            <summary>
            Insert breakpoints into the start of every generated method. Also enables debugging.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.DisableCalculatedCorrelations">
            <summary>
            Disable calculated correlation information. This will prevent automatic updating of array and 
            string lengths based on other parameters or fields. This might result in unexpected behavior or
            call failures. This won't disable correlations for union types or constant correlations.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.NoNamespace">
            <summary>
            Don't emit any namespace, normally not specifying a namespace will auto-generate one.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.UnsignedChar">
            <summary>
            Output FC_CHAR as if the original compiler had specified unsigned char types. Basically converts
            System.SByte to System.Byte where needed which makes the methods easier to use.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.StructureReturn">
            <summary>
            Return ref/out parameters via a structure rather than requiring ref/out parameters in client
            methods.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.HideWrappedMethods">
            <summary>
            When using StructureReturn hide the original out/ref methods.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Rpc.RpcClientBuilderFlags.GenerateComplexTypeEncodeMethods">
            <summary>
            Generate encode/decode methods for complex types.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments">
            <summary>
            Arguments for the RPC client builder.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.Flags">
            <summary>
            Builder flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.NamespaceName">
            <summary>
            The namespace for the client class.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.ClientName">
            <summary>
            The class name of the client.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.EncoderName">
            <summary>
            The class name of the complex type encoding class.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.DecoderName">
            <summary>
            The class name of the complex type decoder class.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.EnableDebugging">
            <summary>
            Enable debugging on built code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.GetHashCode">
            <summary>
            GetHashCode implementation.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcClientBuilderArguments.Equals(System.Object)">
            <summary>
            Equals implementation.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the object is equal.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcClientResponse">
            <summary>
            Response data from an RPC client call.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientResponse.NdrBuffer">
            <summary>
            The marshaled NDR data from the response.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientResponse.Handles">
            <summary>
            Any object handles returned in the response. (only for ALPC).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Rpc.RpcClientResponse.DataRepresentation">
            <summary>
            Indicates the NDR data representation for the response.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Rpc.RpcUtils">
            <summary>
            Some addition internal utilities for RPC code.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.SetRpcTraceLevel(System.Diagnostics.TraceLevel)">
            <summary>
            Specify RPC trace level.
            </summary>
            <param name="level">Specify the RPC trace level.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.DeRef``1(``0)">
            <summary>
            Helper to dereference a type.
            </summary>
            <typeparam name="T">The type to dereference.</typeparam>
            <param name="t">The value to dereference.</param>
            <returns>The dereferenced result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.DeRef``1(System.Nullable{``0})">
            <summary>
            Helper to dereference a type.
            </summary>
            <typeparam name="T">The type to dereference.</typeparam>
            <param name="t">The value to dereference.</param>
            <returns>The dereferenced result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.CheckNull``1(``0,System.String)">
            <summary>
            Helper to check for NULL.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="name">The name of the value to check.</param>
            <returns>The checked value.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.CheckNull``1(``0[],System.String)">
            <summary>
            Helper to check for NULL.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="name">The name of the value to check.</param>
            <returns>The checked value.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.CheckNull``1(System.Nullable{``0},System.String)">
            <summary>
            Helper to check for NULL.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="name">The name of the value to check.</param>
            <returns>The checked value.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.DeRef``1(NtApiDotNet.Ndr.Marshal.NdrEmbeddedPointer{``0})">
            <summary>
            Helper to dereference a type.
            </summary>
            <typeparam name="T">The type to dereference.</typeparam>
            <param name="t">The value to dereference.</param>
            <returns>The dereferenced result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpPlus(System.Int64)">
            <summary>
            Helper to perform a plus unary operation.
            </summary>
            <param name="v">The value to apply the operator to.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpMinus(System.Int64)">
            <summary>
            Helper to perform a minus unary operation.
            </summary>
            <param name="v">The value to apply the operator to.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpComplement(System.Int64)">
            <summary>
            Helper to perform a complement unary operation.
            </summary>
            <param name="v">The value to apply the operator to.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpTernary(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Perform a ternary operation.
            </summary>
            <param name="condition">The condition to evaluate as != 0.</param>
            <param name="true_value">The result if true.</param>
            <param name="false_value">The result if false.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpPlus(System.Int64,System.Int64)">
            <summary>
            Perform ADD.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpMinus(System.Int64,System.Int64)">
            <summary>
            Perform SUB.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpStar(System.Int64,System.Int64)">
            <summary>
            Perform MUL.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpSlash(System.Int64,System.Int64)">
            <summary>
            Perform DIV.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpMod(System.Int64,System.Int64)">
            <summary>
            Perform MOD.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpBitwiseAnd(System.Int64,System.Int64)">
            <summary>
            Perform Bitwise AND.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpBitwiseOr(System.Int64,System.Int64)">
            <summary>
            Perform Bitwise OR.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpXor(System.Int64,System.Int64)">
            <summary>
            Perform bitwise XOR. Needed as Code DOM doesn't support XOR.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpLeftShift(System.Int64,System.Int64)">
            <summary>
            Perform bitwise LEFTSHIFT.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpRightShift(System.Int64,System.Int64)">
            <summary>
            Perform bitwise RIGHTSHIFT.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpLogicalAnd(System.Int64,System.Int64)">
            <summary>
            Perform logical AND.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpLogicalOr(System.Int64,System.Int64)">
            <summary>
            Perform logical OR.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpEqual(System.Int64,System.Int64)">
            <summary>
            Perform EQUAL.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpNotEqual(System.Int64,System.Int64)">
            <summary>
            Perform NOTEQUAL.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpGreater(System.Int64,System.Int64)">
            <summary>
            Perform GREATER.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpGreaterEqual(System.Int64,System.Int64)">
            <summary>
            Perform GREATEREQUAL.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpLess(System.Int64,System.Int64)">
            <summary>
            Perform LESS.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.OpLessEqual(System.Int64,System.Int64)">
            <summary>
            Perform LESSEQUAL.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>Returns left LESSEQUAL right.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.Boolean)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.SByte)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.Byte)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.Int16)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.UInt16)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.Int32)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.UInt32)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.Int64)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool(System.UInt64)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The value</param>
            <returns>True if value != 0.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool``1(System.Nullable{``0})">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The nullable value</param>
            <returns>True if value has a value set.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Rpc.RpcUtils.ToBool``1(``0)">
            <summary>
            Convert value to a boolean.
            </summary>
            <param name="value">The nullable value</param>
            <returns>True if value has a value set.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.RpcEndpoint">
            <summary>
            Class to represent an RPC endpoint.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.InterfaceId">
            <summary>
            The interface ID of the endpoint.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.InterfaceVersion">
            <summary>
            The interface version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.ObjectUuid">
            <summary>
            The object UUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.Annotation">
            <summary>
            Optional annotation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.BindingString">
            <summary>
            RPC binding string.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.ProtocolSequence">
            <summary>
            Endpoint protocol sequence.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.NetworkAddress">
            <summary>
            Endpoint network address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.Endpoint">
            <summary>
            Endpoint name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.NetworkOptions">
            <summary>
            Endpoint network options.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.EndpointPath">
            <summary>
            The endpoint path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcEndpoint.Registered">
            <summary>
            Indicates this endpoint is registered with the endpoint mapper.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpoint.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>String form of the object.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.RpcEndpointMapper">
            <summary>
            Static class to access information from the RPC mapper.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpoints">
            <summary>
            Query all endpoints registered on the local system.
            </summary>
            <returns>List of endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpoints(System.Guid,System.Version)">
            <summary>
            Query for endpoints registered on the local system for an RPC endpoint.
            </summary>
            <param name="interface_id">Interface UUID to lookup.</param>
            <param name="interface_version">Interface version lookup.</param>
            <returns>The list of registered RPC endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpoints(System.Guid)">
            <summary>
            Query for endpoints registered on the local system for an RPC endpoint ignoring the version.
            </summary>
            <param name="interface_id">Interface UUID to lookup.</param>
            <returns>The list of registered RPC endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpoints(NtApiDotNet.Ndr.NdrRpcServerInterface)">
            <summary>
            Query for endpoints registered on the local system for an RPC endpoint.
            </summary>
            <param name="server_interface">The server interface.</param>
            <returns>The list of registered RPC endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryAlpcEndpoints(System.Guid,System.Version)">
            <summary>
            Query for endpoints registered on the local system for an RPC endpoint via ALPC.
            </summary>
            <param name="interface_id">Interface UUID to lookup.</param>
            <param name="interface_version">Interface version lookup.</param>
            <returns>The list of registered RPC endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryAlpcEndpoints(NtApiDotNet.Ndr.NdrRpcServerInterface)">
            <summary>
            Query for endpoints registered on the local system for an RPC endpoint via ALPC.
            </summary>
            <param name="server_interface">The server interface.</param>
            <returns>The list of registered RPC endpoints.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpointsForAlpcPort(System.String)">
            <summary>
            Query for endpoints for a RPC binding. 
            </summary>
            <param name="alpc_port">The ALPC port to query. Can be a full path as long as it contains \RPC Control\ somewhere.</param>
            <returns>The list of endpoints on the RPC binding.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.QueryEndpointsForBinding(System.String)">
            <summary>
            Query for endpoints for a RPC binding. 
            </summary>
            <param name="string_binding">The RPC binding to query, e.g. ncalrpc:[PORT]</param>
            <returns>The list of endpoints on the RPC binding.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.MapServerToEndpoint(System.String,System.Guid,System.Version)">
            <summary>
            Resolve the local binding string for this service from the local Endpoint Mapper and return the endpoint.
            </summary>
            <param name="protocol_seq">The protocol sequence to lookup.</param>
            <param name="interface_id">Interface UUID to lookup.</param>
            <param name="interface_version">Interface version lookup.</param>
            <returns>The mapped endpoint.</returns>
            <remarks>This only will return a valid value if the service is running and registered with the Endpoint Mapper. It can also hang.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.MapServerToAlpcEndpoint(System.Guid,System.Version)">
            <summary>
            Resolve the local binding string for this service from the local Endpoint Mapper and return the ALPC port path.
            </summary>
            <param name="interface_id">Interface UUID to lookup.</param>
            <param name="interface_version">Interface version lookup.</param>
            <returns>The mapped endpoint.</returns>
            <remarks>This only will return a valid value if the service is running and registered with the Endpoint Mapper. It can also hang.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.MapServerToAlpcEndpoint(NtApiDotNet.Ndr.NdrRpcServerInterface)">
            <summary>
            Resolve the local binding string for this service from the local Endpoint Mapper and return the ALPC port path.
            </summary>
            <param name="server_interface">The server interface.</param>
            <returns>The mapped endpoint.</returns>
            <remarks>This only will return a valid value if the service is running and registered with the Endpoint Mapper. It can also hang.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcEndpointMapper.MapServerToBindingString(System.String,System.Guid,System.Version)">
            <summary>
            Resolve the binding string for this service from the local Endpoint Mapper.
            </summary>
            <param name="protocol_seq">The protocol sequence to lookup.</param>
            <param name="interface_id">Interface UUID to lookup.</param>
            <param name="interface_version">Interface version lookup.</param>
            <remarks>This only will return a valid value if the service is running and registered with the Endpoint Mapper. It can also hang.</remarks>
            <returns>The RPC binding string. Empty string if it doesn't exist or the lookup failed.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.RpcAlpcServer">
            <summary>
            Class representing an RPC ALPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.ProcessId">
            <summary>
            The PID of the process which contains the ALPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.ProcessName">
            <summary>
            The name of the process which contains the ALPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.Endpoints">
            <summary>
            List of known endpoints potentially accessible via this RPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.EndpointCount">
            <summary>
            The number of endpoints.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.Name">
            <summary>
            The name of the ALPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcAlpcServer.SecurityDescriptor">
            <summary>
            The security descriptor of the ALPC server.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcAlpcServer.GetAlpcServers(System.Int32)">
            <summary>
            Get RPC ALPC servers for a specific process.
            </summary>
            <param name="process_id">The ID of the process.</param>
            <returns>The list of RPC ALPC servers.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcAlpcServer.GetAlpcServers">
            <summary>
            Get a list of all RPC ALPC servers.
            </summary>
            <remarks>This works by discovering any server ALPC ports owned by the process and querying for interfaces.</remarks>
            <returns>The list of RPC ALPC servers.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcAlpcServer.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>Formatted string.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.RpcServer">
            <summary>
            A class to represent an RPC server.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.ResolveRunningEndpoint">
            <summary>
            Resolve the current running endpoint for this server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.FormatAsText">
            <summary>
            Format the RPC server as text.
            </summary>
            <returns>The formatted RPC server.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.FormatAsText(System.Boolean)">
            <summary>
            Format the RPC server as text.
            </summary>
            <param name="remove_comments">True to remove comments from the output.</param>
            <returns>The formatted RPC server.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.Serialize(System.IO.Stream)">
            <summary>
            Serialize the RPC server to a stream.
            </summary>
            <param name="stm">The stream to hold the serialized server.</param>
            <remarks>Only use the output of this method with the Deserialize method. No guarantees of compatibility is made between
            versions of the library or the specific format used.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.Serialize">
            <summary>
            Serialize the RPC server to a byte array.
            </summary>
            <returns>The serialized data.</returns>
            <remarks>Only use the output of this method with the Deserialize method. No guarantees of compatibility is made between
            versions of the library or the specific format used.</remarks>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.InterfaceId">
            <summary>
            The RPC server interface UUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.InterfaceVersion">
            <summary>
            The RPC server interface version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.TransferSyntaxId">
            <summary>
            The RPC transfer syntax GUID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.TransferSyntaxVersion">
            <summary>
            The RPC transfer syntax version.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.ProcedureCount">
            <summary>
            The number of RPC procedures.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Procedures">
            <summary>
            The list of RPC procedures.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Server">
            <summary>
            The NDR RPC server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.ComplexTypes">
            <summary>
            List of parsed complext types.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.FilePath">
            <summary>
            Path to the PE file this server came from (if known)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Name">
            <summary>
            Name of the the PE file this server came from (if known)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Offset">
            <summary>
            Offset into the PE file this server was parsed from.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.ServiceName">
            <summary>
            Name of the service this server would run in (if known).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.ServiceDisplayName">
            <summary>
            Display name of the service this server would run in (if known).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.IsServiceRunning">
            <summary>
            True if the service is currently running.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Endpoints">
            <summary>
            List of endpoints for this service if running.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.EndpointCount">
            <summary>
            Count of endpoints for this service if running.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RpcServer.Client">
            <summary>
            This parsed interface represents a client.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.ParsePeFile(System.String,System.String,System.String)">
            <summary>
            Parse all RPC servers from a PE file.
            </summary>
            <param name="file">The PE file to parse.</param>
            <param name="dbghelp_path">Path to a DBGHELP DLL to resolve symbols.</param>
            <param name="symbol_path">Symbol path for DBGHELP</param>
            <remarks>This only works for PE files with the same bitness as the current process.</remarks>
            <returns>A list of parsed RPC server.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.ParsePeFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Parse all RPC servers from a PE file.
            </summary>
            <param name="file">The PE file to parse.</param>
            <param name="dbghelp_path">Path to a DBGHELP DLL to resolve symbols.</param>
            <param name="symbol_path">Symbol path for DBGHELP</param>
            <param name="parse_clients">True to parse client RPC interfaces.</param>
            <remarks>This only works for PE files with the same bitness as the current process.</remarks>
            <returns>A list of parsed RPC server.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.ParsePeFile(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse all RPC servers from a PE file.
            </summary>
            <param name="file">The PE file to parse.</param>
            <param name="dbghelp_path">Path to a DBGHELP DLL to resolve symbols.</param>
            <param name="symbol_path">Symbol path for DBGHELP</param>
            <param name="parse_clients">True to parse client RPC interfaces.</param>
            <param name="ignore_symbols">Ignore symbol resolving.</param>
            <remarks>This only works for PE files with the same bitness as the current process.</remarks>
            <returns>A list of parsed RPC server.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize an RPC server instance from a stream.
            </summary>
            <param name="stm">The stream to deserialize from.</param>
            <returns>The RPC server instance.</returns>
            <remarks>The data used by this method should only use the output from serialize. No guarantees of compatibility is made between
            versions of the library or the specific format used.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.RpcServer.Deserialize(System.Byte[])">
            <summary>
            Deserialize an RPC server instance from a byte array.
            </summary>
            <param name="ba">The byte array to deserialize from.</param>
            <returns>The RPC server instance.</returns>
            <remarks>The data used by this method should only use the output from serialize. No guarantees of compatibility is made between
            versions of the library or the specific format used.</remarks>
        </member>
        <member name="T:NtApiDotNet.Win32.SymbolLoadedModule">
            <summary>
            Represents a loaded module from the symbolc resolver.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SymbolLoadedModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SymbolLoadedModule.BaseAddress">
            <summary>
            The base address of the module.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SymbolLoadedModule.ImageSize">
            <summary>
            The image size of the module.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ISymbolResolver">
            <summary>
            Interface for a symbol resolver.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetLoadedModules">
            <summary>
            Get list of loaded modules.
            </summary>
            <returns>The list of loaded modules</returns>
            <remarks>Note this will cache the results so subsequent calls won't necessarily see new modules.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetLoadedModules(System.Boolean)">
            <summary>
            Get list of loaded modules and optionally refresh the list.
            </summary>
            <param name="refresh">True to refresh the current cached list of modules.</param>
            <returns>The list of loaded modules</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetModuleForAddress(System.IntPtr)">
            <summary>
            Get module at an address.
            </summary>
            <param name="address">The address for the module.</param>
            <returns>The module, or null if not found.</returns>
            <remarks>Note this will cache the results so subsequent calls won't necessarily see new modules.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetModuleForAddress(System.IntPtr,System.Boolean)">
            <summary>
            Get module at an address.
            </summary>
            <param name="address">The address for the module.</param>
            <param name="refresh">True to refresh the current cached list of modules.</param>
            <returns>The module, or null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetModuleRelativeAddress(System.IntPtr)">
            <summary>
            Get a string representation of a relative address to a module.
            </summary>
            <param name="address">The address to get the string for,</param>
            <returns>The string form of the address, e.g. modulename+0x100</returns>
            <remarks>Note this will cache the results so subsequent calls won't necessarily see new modules.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetModuleRelativeAddress(System.IntPtr,System.Boolean)">
            <summary>
            Get a string representation of a relative address to a module.
            </summary>
            <param name="address">The address to get the string for,</param>
            <param name="refresh">True to refresh the current cached list of modules.</param>
            <returns>The string form of the address, e.g. modulename+0x100</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetAddressOfSymbol(System.String)">
            <summary>
            Get the address of a symbol.
            </summary>
            <param name="name">The name of the symbol, should include the module name, e.g. modulename!MySymbol.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetSymbolForAddress(System.IntPtr)">
            <summary>
            Get the symbol name for an address.
            </summary>
            <param name="address">The address of the symbol.</param>
            <returns>The symbol name.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetSymbolForAddress(System.IntPtr,System.Boolean)">
            <summary>
            Get the symbol name for an address, with no fallback.
            </summary>
            <param name="address">The address of the symbol.</param>
            <param name="generate_fake_symbol">If true then generate a fake symbol.</param>
            <returns>The symbol name. If |generate_fake_symbol| is true and the symbol doesn't exist one is generated based on module name.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.GetSymbolForAddress(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Get the symbol name for an address, with no fallback.
            </summary>
            <param name="address">The address of the symbol.</param>
            <param name="generate_fake_symbol">If true then generate a fake symbol.</param>
            <param name="return_name_only">If true then return only the name of the symbols (such as C++ symbol name) rather than full symbol.</param>
            <returns>The symbol name. If |generate_fake_symbol| is true and the symbol doesn't exist one is generated based on module name.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.ReloadModuleList">
            <summary>
            Reload the list of modules for this symbol resolver.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ISymbolResolver.LoadModule(System.String,System.IntPtr)">
            <summary>
            Load a specific module into the symbol resolver.
            </summary>
            <param name="module_path">The path to the module.</param>
            <param name="base_address">The base address of the loaded module.</param>
        </member>
        <member name="T:NtApiDotNet.Win32.SymbolResolver">
            <summary>
            Static class for create symbolc resolvers.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SymbolResolver.Create(NtApiDotNet.NtProcess,System.String,System.String)">
            <summary>
            Create a new instance of a symbol resolver.
            </summary>
            <param name="process">The process in which the symbols should be resolved.</param>
            <param name="dbghelp_path">The path to dbghelp.dll, ideally should use the one which comes with Debugging Tools for Windows.</param>
            <param name="symbol_path">The symbol path.</param>
            <returns>The instance of a symbol resolver. Should be disposed when finished.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SymbolResolver.Create(NtApiDotNet.NtProcess)">
            <summary>
            Create a new instance of a symbol resolver. Uses the system dbghelp library and symbol path
            from _NT_SYMBOL_PATH environment variable.
            </summary>
            <param name="process">The process in which the symbols should be resolved.</param>
            <returns>The instance of a symbol resolver. Should be disposed when finished.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32Utils">
            <summary>
            Utilities for Win32 APIs.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.EditSecurity(System.IntPtr,NtApiDotNet.NtObject,System.String,System.Boolean)">
            <summary>
            Display the edit security dialog.
            </summary>
            <param name="hwnd">Parent window handle.</param>
            <param name="handle">NT object to display the security.</param>
            <param name="object_name">The name of the object to display.</param>
            <param name="read_only">True to force the UI to read only.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.EditSecurity(System.IntPtr,System.String,NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType)">
            <summary>
            Display the edit security dialog.
            </summary>
            <param name="hwnd">Parent window handle.</param>
            <param name="name">The name of the object to display.</param>
            <param name="sd">The security descriptor to display.</param>
            <param name="type">The NT type of the object.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.EditSecurity(System.IntPtr,System.String,NtApiDotNet.SecurityDescriptor,System.Type,NtApiDotNet.AccessMask,NtApiDotNet.GenericMapping)">
            <summary>
            Display the edit security dialog.
            </summary>
            <param name="hwnd">Parent window handle.</param>
            <param name="name">The name of the object to display.</param>
            <param name="sd">The security descriptor to display.</param>
            <param name="access_type">An enumerated type for the access mask.</param>
            <param name="generic_mapping">Generic mapping for the access rights.</param>
            <param name="valid_access">Valid access mask for the access rights.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.DefineDosDevice(NtApiDotNet.Win32.DefineDosDeviceFlags,System.String,System.String)">
            <summary>
            Define a new DOS device.
            </summary>
            <param name="flags">The dos device flags.</param>
            <param name="device_name">The device name to define.</param>
            <param name="target_path">The target path.</param>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Utils.InvalidHandle">
            <summary>
            Get Windows INVALID_HANDLE_VALUE.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.ParseCommandLine(System.String)">
            <summary>
            Parse a command line into arguments.
            </summary>
            <param name="command_line">The parsed command line.</param>
            <returns>The list of arguments.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.GetImagePathFromCommandLine(System.String)">
            <summary>
            Get the image path from a command line.
            </summary>
            <param name="command_line">The command line to parse.</param>
            <returns>The image path, returns the original command line if can't find a valid image path.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.GetWin32PathName(NtApiDotNet.NtFile,NtApiDotNet.Win32.Win32PathNameFlags,System.Boolean)">
            <summary>
            Get Win32 path name for a file.
            </summary>
            <param name="file">The file to get the path from.</param>
            <param name="flags">Flags for the path to return.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The win32 path.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.GetWin32PathName(NtApiDotNet.NtFile,NtApiDotNet.Win32.Win32PathNameFlags)">
            <summary>
            Get Win32 path name for a file.
            </summary>
            <param name="file">The file to get the path from.</param>
            <param name="flags">Flags for the path to return.</param>
            <returns>The win32 path.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.FormatMessage(NtApiDotNet.Win32.SafeLoadLibraryHandle,System.UInt32)">
            <summary>
            Format a message.
            </summary>
            <param name="module">The module containing the message.</param>
            <param name="message_id">The ID of the message.</param>
            <returns>The message. Empty string on error.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Utils.FormatMessage(System.UInt32)">
            <summary>
            Format a message.
            </summary>
            <param name="message_id">The ID of the message.</param>
            <returns>The message. Empty string on error.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.DefineDosDeviceFlags">
            <summary>
            Flags for DefineDosDevice
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DefineDosDeviceFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DefineDosDeviceFlags.RawTargetPath">
            <summary>
            Specify a raw target path
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DefineDosDeviceFlags.RemoveDefinition">
            <summary>
            Remove existing definition
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DefineDosDeviceFlags.ExactMatchOnRemove">
            <summary>
            Only remove exact matches to the target
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DefineDosDeviceFlags.NoBroadcastSystem">
            <summary>
            Don't broadcast changes to the system
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32PathNameFlags">
            <summary>
            Flags for GetWin32PathName.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32PathNameFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32PathNameFlags.NameGuid">
            <summary>
            GUID format.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32PathNameFlags.NameNt">
            <summary>
            NT format.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32PathNameFlags.NameNone">
            <summary>
            No specific format.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32PathNameFlags.Opened">
            <summary>
            Opened file name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.LoadLibraryFlags">
            <summary>
            Flags for loading a library.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.DontResolveDllReferences">
            <summary>
            Don't resolve DLL references
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsDataFile">
            <summary>
            Load library as a data file.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadWithAlteredSearchPath">
            <summary>
            Load with an altered search path.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadIgnoreCodeAuthzLevel">
            <summary>
            Ignore code authz level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsImageResource">
            <summary>
            Load library as an image resource.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsDataFileExclusive">
            <summary>
            Load library as a data file exclusively.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibrarySearchDllLoadDir">
            <summary>
            Add the DLL's directory temporarily to the search list.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibrarySearchApplicationDir">
            <summary>
            Search application directory for the DLL.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibrarySearchUserDirs">
            <summary>
            Search the user's directories for the DLL.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibrarySearchSystem32">
            <summary>
            Search system32 for the DLL.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibrarySearchDefaultDirs">
            <summary>
            Search the default directories for the DLL.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.DllCharacteristics">
            <summary>
            DLL characteristic flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.Reserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.Reserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.Reserved8">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.Reserved10">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.HighEntropyVA">
            <summary>
            Image can handle a high entropy 64-bit virtual address space. 
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.DynamicBase">
            <summary>
            DLL can be relocated at load time.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.ForceIntegrity">
            <summary>
            Code Integrity checks are enforced.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.NxCompat">
            <summary>
            Image is NX compatible.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.NoIsolation">
            <summary>
            Isolation aware, but do not isolate the image.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.NoSeh">
            <summary>
            Does not use structured exception (SE) handling. No SE handler may be called in this image.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.NoBind">
            <summary>
            Do not bind the image.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.AppContainer">
            <summary>
            Image must execute in an AppContainer.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.WdmDriver">
            <summary>
            A WDM driver.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.GuardCF">
            <summary>
            Image supports Control Flow Guard.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.DllCharacteristics.TerminalServerAware">
            <summary>
            Terminal Server aware. 
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ImageSection">
            <summary>
            Class which represents a section from a loaded PE file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ImageSection.Name">
            <summary>
            The name of the section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ImageSection.Data">
            <summary>
            Buffer to the data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ImageSection.RelativeVirtualAddress">
            <summary>
            Relative Virtual address of the data from the library base.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ImageSection.ToArray">
            <summary>
            Get the data as an array.
            </summary>
            <returns>The data as an array.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SafeLoadLibraryHandle">
            <summary>
            Safe handle for a loaded library.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="handle">The handle to the library</param>
            <param name="owns_handle">True if the handle is owned by this object.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.ReleaseHandle">
            <summary>
            Release handle.
            </summary>
            <returns>True if handle released.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetProcAddress(System.String)">
            <summary>
            Get the address of an exported function.
            </summary>
            <param name="name">The name of the exported function.</param>
            <returns>Pointer to the exported function, or IntPtr.Zero if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetProcAddress(System.IntPtr)">
            <summary>
            Get the address of an exported function from an ordinal.
            </summary>
            <param name="ordinal">The ordinal of the exported function.</param>
            <returns>Pointer to the exported function, or IntPtr.Zero if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetFunctionPointer``1(System.Boolean)">
            <summary>
            Get a delegate which points to an unmanaged function.
            </summary>
            <typeparam name="TDelegate">The delegate type. The name of the delegate is used to lookup the name of the function.</typeparam>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetFunctionPointer``1">
            <summary>
            Get a delegate which points to an unmanaged function.
            </summary>
            <typeparam name="TDelegate">The delegate type. The name of the delegate is used to lookup the name of the function.</typeparam>
            <returns>The delegate.</returns>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.FullPath">
            <summary>
            Get path to loaded module.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.Name">
            <summary>
            Get the module name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.MappedAsImage">
            <summary>
            Whether this library is mapped as an image.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.MappedAsDataFile">
            <summary>
            Whether this library is mapped as a datafile.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.LoadLibrary(System.String,NtApiDotNet.Win32.LoadLibraryFlags,System.Boolean)">
            <summary>
            Load a library into memory.
            </summary>
            <param name="name">The path to the library.</param>
            <param name="flags">Additonal flags to pass to LoadLibraryEx</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>Handle to the loaded library.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.LoadLibrary(System.String,NtApiDotNet.Win32.LoadLibraryFlags)">
            <summary>
            Load a library into memory.
            </summary>
            <param name="name">The path to the library.</param>
            <param name="flags">Additonal flags to pass to LoadLibraryEx</param>
            <returns>Handle to the loaded library.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.LoadLibrary(System.String)">
            <summary>
            Load a library into memory.
            </summary>
            <param name="name">The path to the library.</param>
            <returns>Handle to the loaded library.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetModuleHandle(System.String)">
            <summary>
            Get the handle to an existing loading library by name.
            </summary>
            <param name="name">The name of the module.</param>
            <returns>The handle to the loaded library.</returns>
            <exception cref="T:NtApiDotNet.Win32.SafeWin32Exception">Thrown if the module can't be found.</exception>
            <remarks>This will take a reference on the library, you should dispose the handle after use.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetModuleHandleNoThrow(System.String)">
            <summary>
            Get the handle to an existing loading library by name.
            </summary>
            <param name="name">The name of the module.</param>
            <returns>The handle to the loaded library. Returns Null if not found.</returns>
            <remarks>This will take a reference on the library, you should dispose the handle after use.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetModuleHandle(System.IntPtr)">
            <summary>
            Get the handle to an existing loading library by an address in the module.
            </summary>
            <param name="address">An address inside the module.</param>
            <returns>The handle to the loaded library, null if the address isn't inside a valid module.</returns>
            <remarks>This will take a reference on the library, you should dispose the handle after use.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.PinModule">
            <summary>
            Pin the library into memory. This prevents FreeLibrary unloading the library until
            the process exits.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.PinModule(System.String)">
            <summary>
            Pin the library into memory. This prevents FreeLibrary unloading the library until
            the process exits.
            </summary>
            <param name="name">The name of the module to pin.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.PinModule(System.IntPtr)">
            <summary>
            Pin the library into memory. This prevents FreeLibrary unloading the library until
            the process exits.
            </summary>
            <param name="address">The address of the module to pin.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.ParseDelayedImports">
            <summary>
            Parse a library's delayed import information.
            </summary>
            <returns>A dictionary containing the location of import information keyed against the IAT address.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetImageSections">
            <summary>
            Get the image sections from a loaded library.
            </summary>
            <returns>The list of image sections.</returns>
            <exception cref="T:NtApiDotNet.Win32.SafeWin32Exception">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.OriginalImageBase">
            <summary>
            Get original image base address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.EntryPoint">
            <summary>
            Get image entry point RVA.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.Is64bit">
            <summary>
            Get whether the image is 64 bit or not.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.DllCharacteristics">
            <summary>
            Get the image's DLL characteristics flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.Null">
            <summary>
            NULL load library handle.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.SafeWin32Exception">
            <summary>
            Represents an impersonation safe win32 exception, which resolves the win32 message when Message is called.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeWin32Exception.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeWin32Exception.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="error">Win32 error.</param>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeWin32Exception.Message">
            <summary>
            The message for the exception.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceTriggerType">
            <summary>
            Service trigger type.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceInformation">
            <summary>
            Class representing the information about a service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.Name">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.SecurityDescriptor">
            <summary>
            The security descriptor of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.Triggers">
            <summary>
            The list of triggers for the service.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.RunningService">
            <summary>
            Class representing a running service instance.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.Name">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.DisplayName">
            <summary>
            The description of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.ServiceType">
            <summary>
            Type of service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.ImagePath">
            <summary>
            Image path for the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.CommandLine">
            <summary>
            Command line for the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.ServiceDll">
            <summary>
            Service DLL if a shared process server.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.Status">
            <summary>
            Current service status.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.ProcessId">
            <summary>
            Process ID of the running service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.SecurityDescriptor">
            <summary>
            The security descriptor of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.Triggers">
            <summary>
            The list of triggers for the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.RunningService.UserName">
            <summary>
            The user name this service runs under.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceUtils">
            <summary>
            Utilities for accessing services.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetScmGenericMapping">
            <summary>
            Get the generic mapping for the SCM.
            </summary>
            <returns>The SCM generic mapping.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceGenericMapping">
            <summary>
            Get the generic mapping for a service.
            </summary>
            <returns>The service generic mapping.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetScmSecurityDescriptor">
            <summary>
            Get the security descriptor of the SCM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceInformation(System.String)">
            <summary>
            Get the information about a service.
            </summary>
            <param name="name">The name of the service.</param>
            <returns>The servicec information.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceProcessId(System.String)">
            <summary>
            Get the PID of a running service.
            </summary>
            <param name="name">The name of the service.</param>
            <returns>Returns the PID of the running service, or 0 if not running.</returns>
            <exception cref="T:NtApiDotNet.Win32.SafeWin32Exception">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceProcessIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the PIDs of a list of running service.
            </summary>
            <param name="names">The names of the services.</param>
            <returns>Returns the PID of the running service, or 0 if not running.</returns>
            <exception cref="T:NtApiDotNet.Win32.SafeWin32Exception">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServices(NtApiDotNet.Win32.SERVICE_STATE)">
            <summary>
            Get a list of registered services.
            </summary>
            <returns>A list of running services with process IDs.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServices">
            <summary>
            Get a list of all registered services.
            </summary>
            <returns>A list of registered services.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetRunningServicesWithProcessIds">
            <summary>
            Get a list of all active running services with their process IDs.
            </summary>
            <returns>A list of all active running services with process IDs.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SaferLevel">
            <summary>
            Enumeration for safer level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.Constrained">
            <summary>
            Constrained.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.FullyTrusted">
            <summary>
            Fully trusted.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.NormalUser">
            <summary>
            Normal user.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.Untrusted">
            <summary>
            Untrusted.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.TokenUtils">
            <summary>
            Class to access tokens through various mechanisms.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetLogonS4UToken(System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon a user using S4U
            </summary>
            <param name="user">The username.</param>
            <param name="realm">The user's realm.</param>
            <param name="logon_type"></param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetAnonymousToken(NtApiDotNet.TokenAccessRights)">
            <summary>
            Get the anonymous token.
            </summary>
            <param name="desired_access">The access rights for the opened token.</param>
            <returns>The anonymous token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetAnonymousToken">
            <summary>
            Get the anonymous token.
            </summary>
            <returns>The anonymous token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetLogonUserToken(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup})">
            <summary>
            Logon a user.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_type">The logon token's type.</param>
            <param name="groups">Optional list of additonal groups to add.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.OpenClipboardToken(NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Open the current clipboard token.
            </summary>
            <param name="desired_access"></param>
            <param name="throw_on_error"></param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromClipboard(NtApiDotNet.TokenAccessRights)">
            <summary>
            Get the token from the clipboard.
            </summary>
            <param name="desired_access">The access rights for the opened token.</param>
            <returns>The clipboard token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromClipboard">
            <summary>
            Get the token from the clipboard.
            </summary>
            <returns>The clipboard token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DerivePackageSidFromName(System.String,System.Boolean)">
            <summary>
            Derive a package sid from a name.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The derived Sid</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DerivePackageSidFromName(System.String)">
            <summary>
            Derive a package sid from a name.
            </summary>
            <param name="name">The name of the package.</param>
            <returns>The derived Sid</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DeriveRestrictedPackageSidFromSid(NtApiDotNet.Sid,System.String)">
            <summary>
            Derive a restricted package sid from an existing pacakge sid.
            </summary>
            <param name="package_sid">The base package sid.</param>
            <param name="restricted_name">The restricted name for the sid.</param>
            <returns>The derived Sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DeriveRestrictedPackageSidFromName(System.String,System.String)">
            <summary>
            Derive a restricted package sid from an existing pacakge sid.
            </summary>
            <param name="base_name">The base package name.</param>
            <param name="restricted_name">The restricted name for the sid.</param>
            <returns>The derived Sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetPackageSidFromName(System.String)">
            <summary>
            Get the package sid from a name.
            </summary>
            <param name="name">The name of the package, can be either an SDDL sid or a package name.</param>
            <returns>The derived sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromSaferLevel(NtApiDotNet.NtToken,NtApiDotNet.Win32.SaferLevel,System.Boolean)">
            <summary>
            Get a safer token.
            </summary>
            <param name="token">The base token.</param>
            <param name="level">The safer level to use.</param>
            <param name="make_inert">True to make the token inert.</param>
            <returns>The safer token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetSessionTokens">
            <summary>
            Get tokens for all logged on sessions.
            </summary>
            <remarks>Needs SeTcbPrivilege to work.</remarks>
            <returns>The list of session tokens.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.CreateProcessFlags">
            <summary>
            Flags for create process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DebugProcess">
            <summary>
            Debug process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DebugOnlyThisProcess">
            <summary>
            Debug only this process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.Suspended">
            <summary>
            Create suspended.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DetachedProcess">
            <summary>
            Detach process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NewConsole">
            <summary>
            Create a new console.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NormalPriorityClass">
            <summary>
            Normal priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.IdlePriorityClass">
            <summary>
            Idle priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.HighPriorityClass">
            <summary>
            High priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.RealtimePriorityClass">
            <summary>
            Realtime priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NewProcessGroup">
            <summary>
            Create a new process group.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.UnicodeEnvironment">
            <summary>
            Create from a unicode environment.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.SeparateWowVdm">
            <summary>
            Create a separate WOW VDM.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.SharedWowVdm">
            <summary>
            Share the WOW VDM.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ForceDOS">
            <summary>
            Force DOS process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.BelowNormalPriorityClass">
            <summary>
            Below normal priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.AboveNormalPriorityClass">
            <summary>
            Above normal priority class.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.InheritParentAffinity">
            <summary>
            Inherit parent affinity.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.InheritCallerPriority">
            <summary>
            Inherit caller priority (deprecated)
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ProtectedProcess">
            <summary>
            Create a protected process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ExtendedStartupInfoPresent">
            <summary>
            Specify extended startup information is present.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ModeBackgroundBegin">
            <summary>
            Process mode background begin.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ModeBackgroundEnd">
            <summary>
            Process mode background end.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.SecureProcess">
            <summary>
            Create a secure process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.BreakawayFromJob">
            <summary>
            Breakaway from a job object.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.PreserveCodeAuthZLevel">
            <summary>
            Preserve code authz level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DefaultErrorMode">
            <summary>
            Default error mode.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NoWindow">
            <summary>
            No window.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ProfileUser">
            <summary>
            Profile user.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ProfileKernel">
            <summary>
            Profile kernel.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ProfileServer">
            <summary>
            Profile server.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.IgnoreSystemDefault">
            <summary>
            Ignore system default.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.CreateProcessLogonFlags">
            <summary>
            Flags for CreateProcessWithLogon
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.WithProfile">
            <summary>
            With a profile.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.NetCredentialsOnly">
            <summary>
            Using network credentials.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32kFilterFlags">
            <summary>
            Win32k filter flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.Enable">
            <summary>
            Enable filter.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.Audit">
            <summary>
            Audit filter.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProtectionLevel">
            <summary>
            Specify PPL level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.Same">
            <summary>
            Safe level as parent.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.TcbPPL">
            <summary>
            Tcb PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.WindowsPP">
            <summary>
            Windows PP
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.WindowsPPL">
            <summary>
            Windows PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.AntimalwarePPL">
            <summary>
            Antimalware PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.LsaPPL">
            <summary>
            LSA PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.TcbPP">
            <summary>
            Tcb PP
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.CodeGenPPL">
            <summary>
            Code Generation PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.AuthenticodePP">
            <summary>
            Authenticode PP
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.AppPPL">
            <summary>
            App PPL
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProcessExtendedFlags">
            <summary>
            Extended process flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProcessExtendedFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProcessExtendedFlags.LogElevationFailure">
            <summary>
            Log elevation failure.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProcessExtendedFlags.IgnoreElevationCheck">
            <summary>
            Ignore elevation requirements.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProcessExtendedFlags.ForceBreakawayJob">
            <summary>
            Force job breakaway (needs TCB privilege).
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProcessMitigationOptions">
            <summary>
            Process mitigation option flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProcessMitigationOptions2">
            <summary>
            Process mitigation option 2 flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32ProcessConfig">
            <summary>
            Win32 process creation configuration.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ProcessSecurityDescriptor">
            <summary>
            Specify security descriptor of process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritProcessHandle">
            <summary>
            Specify process handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ThreadSecurityDescriptor">
            <summary>
            Specify security descriptor of thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritThreadHandle">
            <summary>
            Specify thread handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritHandles">
            <summary>
            Specify to inherit handles.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ParentProcess">
            <summary>
            Specify parent process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ApplicationName">
            <summary>
            Specify path to application executable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CommandLine">
            <summary>
            Specify command line.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CreationFlags">
            <summary>
            Specify creation flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Environment">
            <summary>
            Specify environment block.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CurrentDirectory">
            <summary>
            Specify current directory.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Desktop">
            <summary>
            Specify desktop name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Title">
            <summary>
            Specify window title.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.TerminateOnDispose">
            <summary>
            True to terminate the process when it's disposed.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.MitigationOptions">
            <summary>
            Specify the mitigation options.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.MitigationOptions2">
            <summary>
            Specify the mitigation options 2.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Win32kFilterFlags">
            <summary>
            Specify win32k filter flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Win32kFilterLevel">
            <summary>
            Specify win32k filter level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ProtectionLevel">
            <summary>
            Specify PP level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritHandleList">
            <summary>
            Specify list of handles to inherit.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.AppContainerSid">
            <summary>
            Specify the appcontainer Sid.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Capabilities">
            <summary>
            Specify the appcontainer capabilities.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.LowPrivilegeAppContainer">
            <summary>
            Specify LPAC.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.RestrictChildProcessCreation">
            <summary>
            Restrict the process from creating child processes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.OverrideChildProcessCreation">
            <summary>
            Override child process creation restriction.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.DesktopAppBreakaway">
            <summary>
            Specify new process policy when creating a desktop bridge application.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Token">
            <summary>
            Specify a token to use for the new process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.StdInputHandle">
            <summary>
            Specify a stdin handle for the new process (you must inherit the handle).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.StdOutputHandle">
            <summary>
            Specify a stdout handle for the new process (you must inherit the handle).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.StdErrorHandle">
            <summary>
            Specify a stderror handle for the new process (you must inherit the handle).
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.PackageName">
            <summary>
            Specify the package name to use.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.PseudoConsole">
            <summary>
            Specify handle to pseudo console.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.BnoIsolationPrefix">
            <summary>
            Specify Base Named Objects isolation prefix.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.SafeOpenPromptOriginClaim">
            <summary>
            Specify the safe open prompt original claim.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.DebugObject">
            <summary>
            When specifying the debug flags use this debug object instead of the current thread's object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.NoTokenFallback">
            <summary>
            When specified do not fallback to using CreateProcessWithLogon if CreateProcessWithUser fails.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ExtendedFlags">
            <summary>
            Specify additional extended flags.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32ProcessConfig.AddInheritedHandle(NtApiDotNet.NtObject)">
            <summary>
            Add an object's handle to the list of inherited handles. 
            </summary>
            <param name="obj">The object to add.</param>
            <returns>The raw handle value.</returns>
            <remarks>Note that this doesn't maintain a reference to the object. It should be kept
            alive until the process has been created.</remarks>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32ProcessConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32Process">
            <summary>
            Class representing a win32 process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessAsUser(NtApiDotNet.NtToken,NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process with a token.
            </summary>
            <param name="token">The token to create the process with.</param>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessAsUser(NtApiDotNet.NtToken,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process with a token.
            </summary>
            <param name="token">The token to create the process with.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessWithLogin(System.String,System.String,System.String,NtApiDotNet.Win32.CreateProcessLogonFlags,NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process with a token from a user logon.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_flags">Logon flags.</param>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessWithLogin(System.String,System.String,System.String,NtApiDotNet.Win32.CreateProcessLogonFlags,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process with a token from a user logon.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_flags">Logon flags.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcess(NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process.
            </summary>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcess(NtApiDotNet.NtProcess,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process.
            </summary>
            <param name="parent">Optional parent process.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.Dispose">
            <summary>
            Dispose the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Process">
            <summary>
            The handle to the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Thread">
            <summary>
            The handle to the initial thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Pid">
            <summary>
            The process ID of the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Tid">
            <summary>
            The thread ID of the initial thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.TerminateOnDispose">
            <summary>
            True to terminate process when disposed.
            </summary>
        </member>
    </members>
</doc>
